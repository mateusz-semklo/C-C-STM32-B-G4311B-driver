
B-G4311B-driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dd30  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b04  0800df10  0800df10  0001df10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ea14  0800ea14  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800ea14  0800ea14  0001ea14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ea1c  0800ea1c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ea1c  0800ea1c  0001ea1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ea20  0800ea20  0001ea20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800ea24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000424  200001e0  0800ec04  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000604  0800ec04  00020604  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d250  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000036f6  00000000  00000000  0003d460  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001628  00000000  00000000  00040b58  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001448  00000000  00000000  00042180  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022448  00000000  00000000  000435c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014c26  00000000  00000000  00065a10  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e023f  00000000  00000000  0007a636  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015a875  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ad0  00000000  00000000  0015a8f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e0 	.word	0x200001e0
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800def8 	.word	0x0800def8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e4 	.word	0x200001e4
 800021c:	0800def8 	.word	0x0800def8

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800040e:	f1a4 0401 	sub.w	r4, r4, #1
 8000412:	d1e9      	bne.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b972 	b.w	8000fd4 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f806 	bl	8000d08 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__udivmoddi4>:
 8000d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d0c:	9e08      	ldr	r6, [sp, #32]
 8000d0e:	4604      	mov	r4, r0
 8000d10:	4688      	mov	r8, r1
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d14b      	bne.n	8000dae <__udivmoddi4+0xa6>
 8000d16:	428a      	cmp	r2, r1
 8000d18:	4615      	mov	r5, r2
 8000d1a:	d967      	bls.n	8000dec <__udivmoddi4+0xe4>
 8000d1c:	fab2 f282 	clz	r2, r2
 8000d20:	b14a      	cbz	r2, 8000d36 <__udivmoddi4+0x2e>
 8000d22:	f1c2 0720 	rsb	r7, r2, #32
 8000d26:	fa01 f302 	lsl.w	r3, r1, r2
 8000d2a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d2e:	4095      	lsls	r5, r2
 8000d30:	ea47 0803 	orr.w	r8, r7, r3
 8000d34:	4094      	lsls	r4, r2
 8000d36:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d3a:	0c23      	lsrs	r3, r4, #16
 8000d3c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d40:	fa1f fc85 	uxth.w	ip, r5
 8000d44:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d48:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d4c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d50:	4299      	cmp	r1, r3
 8000d52:	d909      	bls.n	8000d68 <__udivmoddi4+0x60>
 8000d54:	18eb      	adds	r3, r5, r3
 8000d56:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d5a:	f080 811b 	bcs.w	8000f94 <__udivmoddi4+0x28c>
 8000d5e:	4299      	cmp	r1, r3
 8000d60:	f240 8118 	bls.w	8000f94 <__udivmoddi4+0x28c>
 8000d64:	3f02      	subs	r7, #2
 8000d66:	442b      	add	r3, r5
 8000d68:	1a5b      	subs	r3, r3, r1
 8000d6a:	b2a4      	uxth	r4, r4
 8000d6c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d70:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d74:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d78:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d7c:	45a4      	cmp	ip, r4
 8000d7e:	d909      	bls.n	8000d94 <__udivmoddi4+0x8c>
 8000d80:	192c      	adds	r4, r5, r4
 8000d82:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d86:	f080 8107 	bcs.w	8000f98 <__udivmoddi4+0x290>
 8000d8a:	45a4      	cmp	ip, r4
 8000d8c:	f240 8104 	bls.w	8000f98 <__udivmoddi4+0x290>
 8000d90:	3802      	subs	r0, #2
 8000d92:	442c      	add	r4, r5
 8000d94:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d98:	eba4 040c 	sub.w	r4, r4, ip
 8000d9c:	2700      	movs	r7, #0
 8000d9e:	b11e      	cbz	r6, 8000da8 <__udivmoddi4+0xa0>
 8000da0:	40d4      	lsrs	r4, r2
 8000da2:	2300      	movs	r3, #0
 8000da4:	e9c6 4300 	strd	r4, r3, [r6]
 8000da8:	4639      	mov	r1, r7
 8000daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d909      	bls.n	8000dc6 <__udivmoddi4+0xbe>
 8000db2:	2e00      	cmp	r6, #0
 8000db4:	f000 80eb 	beq.w	8000f8e <__udivmoddi4+0x286>
 8000db8:	2700      	movs	r7, #0
 8000dba:	e9c6 0100 	strd	r0, r1, [r6]
 8000dbe:	4638      	mov	r0, r7
 8000dc0:	4639      	mov	r1, r7
 8000dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc6:	fab3 f783 	clz	r7, r3
 8000dca:	2f00      	cmp	r7, #0
 8000dcc:	d147      	bne.n	8000e5e <__udivmoddi4+0x156>
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d302      	bcc.n	8000dd8 <__udivmoddi4+0xd0>
 8000dd2:	4282      	cmp	r2, r0
 8000dd4:	f200 80fa 	bhi.w	8000fcc <__udivmoddi4+0x2c4>
 8000dd8:	1a84      	subs	r4, r0, r2
 8000dda:	eb61 0303 	sbc.w	r3, r1, r3
 8000dde:	2001      	movs	r0, #1
 8000de0:	4698      	mov	r8, r3
 8000de2:	2e00      	cmp	r6, #0
 8000de4:	d0e0      	beq.n	8000da8 <__udivmoddi4+0xa0>
 8000de6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dea:	e7dd      	b.n	8000da8 <__udivmoddi4+0xa0>
 8000dec:	b902      	cbnz	r2, 8000df0 <__udivmoddi4+0xe8>
 8000dee:	deff      	udf	#255	; 0xff
 8000df0:	fab2 f282 	clz	r2, r2
 8000df4:	2a00      	cmp	r2, #0
 8000df6:	f040 808f 	bne.w	8000f18 <__udivmoddi4+0x210>
 8000dfa:	1b49      	subs	r1, r1, r5
 8000dfc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e00:	fa1f f885 	uxth.w	r8, r5
 8000e04:	2701      	movs	r7, #1
 8000e06:	fbb1 fcfe 	udiv	ip, r1, lr
 8000e0a:	0c23      	lsrs	r3, r4, #16
 8000e0c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000e10:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e14:	fb08 f10c 	mul.w	r1, r8, ip
 8000e18:	4299      	cmp	r1, r3
 8000e1a:	d907      	bls.n	8000e2c <__udivmoddi4+0x124>
 8000e1c:	18eb      	adds	r3, r5, r3
 8000e1e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e22:	d202      	bcs.n	8000e2a <__udivmoddi4+0x122>
 8000e24:	4299      	cmp	r1, r3
 8000e26:	f200 80cd 	bhi.w	8000fc4 <__udivmoddi4+0x2bc>
 8000e2a:	4684      	mov	ip, r0
 8000e2c:	1a59      	subs	r1, r3, r1
 8000e2e:	b2a3      	uxth	r3, r4
 8000e30:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e34:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e38:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e3c:	fb08 f800 	mul.w	r8, r8, r0
 8000e40:	45a0      	cmp	r8, r4
 8000e42:	d907      	bls.n	8000e54 <__udivmoddi4+0x14c>
 8000e44:	192c      	adds	r4, r5, r4
 8000e46:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e4a:	d202      	bcs.n	8000e52 <__udivmoddi4+0x14a>
 8000e4c:	45a0      	cmp	r8, r4
 8000e4e:	f200 80b6 	bhi.w	8000fbe <__udivmoddi4+0x2b6>
 8000e52:	4618      	mov	r0, r3
 8000e54:	eba4 0408 	sub.w	r4, r4, r8
 8000e58:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e5c:	e79f      	b.n	8000d9e <__udivmoddi4+0x96>
 8000e5e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e62:	40bb      	lsls	r3, r7
 8000e64:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e68:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e6c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e70:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e74:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e78:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e7c:	4325      	orrs	r5, r4
 8000e7e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e82:	0c2c      	lsrs	r4, r5, #16
 8000e84:	fb08 3319 	mls	r3, r8, r9, r3
 8000e88:	fa1f fa8e 	uxth.w	sl, lr
 8000e8c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e90:	fb09 f40a 	mul.w	r4, r9, sl
 8000e94:	429c      	cmp	r4, r3
 8000e96:	fa02 f207 	lsl.w	r2, r2, r7
 8000e9a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e9e:	d90b      	bls.n	8000eb8 <__udivmoddi4+0x1b0>
 8000ea0:	eb1e 0303 	adds.w	r3, lr, r3
 8000ea4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ea8:	f080 8087 	bcs.w	8000fba <__udivmoddi4+0x2b2>
 8000eac:	429c      	cmp	r4, r3
 8000eae:	f240 8084 	bls.w	8000fba <__udivmoddi4+0x2b2>
 8000eb2:	f1a9 0902 	sub.w	r9, r9, #2
 8000eb6:	4473      	add	r3, lr
 8000eb8:	1b1b      	subs	r3, r3, r4
 8000eba:	b2ad      	uxth	r5, r5
 8000ebc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ec0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ec4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ec8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ecc:	45a2      	cmp	sl, r4
 8000ece:	d908      	bls.n	8000ee2 <__udivmoddi4+0x1da>
 8000ed0:	eb1e 0404 	adds.w	r4, lr, r4
 8000ed4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ed8:	d26b      	bcs.n	8000fb2 <__udivmoddi4+0x2aa>
 8000eda:	45a2      	cmp	sl, r4
 8000edc:	d969      	bls.n	8000fb2 <__udivmoddi4+0x2aa>
 8000ede:	3802      	subs	r0, #2
 8000ee0:	4474      	add	r4, lr
 8000ee2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ee6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eea:	eba4 040a 	sub.w	r4, r4, sl
 8000eee:	454c      	cmp	r4, r9
 8000ef0:	46c2      	mov	sl, r8
 8000ef2:	464b      	mov	r3, r9
 8000ef4:	d354      	bcc.n	8000fa0 <__udivmoddi4+0x298>
 8000ef6:	d051      	beq.n	8000f9c <__udivmoddi4+0x294>
 8000ef8:	2e00      	cmp	r6, #0
 8000efa:	d069      	beq.n	8000fd0 <__udivmoddi4+0x2c8>
 8000efc:	ebb1 050a 	subs.w	r5, r1, sl
 8000f00:	eb64 0403 	sbc.w	r4, r4, r3
 8000f04:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000f08:	40fd      	lsrs	r5, r7
 8000f0a:	40fc      	lsrs	r4, r7
 8000f0c:	ea4c 0505 	orr.w	r5, ip, r5
 8000f10:	e9c6 5400 	strd	r5, r4, [r6]
 8000f14:	2700      	movs	r7, #0
 8000f16:	e747      	b.n	8000da8 <__udivmoddi4+0xa0>
 8000f18:	f1c2 0320 	rsb	r3, r2, #32
 8000f1c:	fa20 f703 	lsr.w	r7, r0, r3
 8000f20:	4095      	lsls	r5, r2
 8000f22:	fa01 f002 	lsl.w	r0, r1, r2
 8000f26:	fa21 f303 	lsr.w	r3, r1, r3
 8000f2a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f2e:	4338      	orrs	r0, r7
 8000f30:	0c01      	lsrs	r1, r0, #16
 8000f32:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f36:	fa1f f885 	uxth.w	r8, r5
 8000f3a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f42:	fb07 f308 	mul.w	r3, r7, r8
 8000f46:	428b      	cmp	r3, r1
 8000f48:	fa04 f402 	lsl.w	r4, r4, r2
 8000f4c:	d907      	bls.n	8000f5e <__udivmoddi4+0x256>
 8000f4e:	1869      	adds	r1, r5, r1
 8000f50:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f54:	d22f      	bcs.n	8000fb6 <__udivmoddi4+0x2ae>
 8000f56:	428b      	cmp	r3, r1
 8000f58:	d92d      	bls.n	8000fb6 <__udivmoddi4+0x2ae>
 8000f5a:	3f02      	subs	r7, #2
 8000f5c:	4429      	add	r1, r5
 8000f5e:	1acb      	subs	r3, r1, r3
 8000f60:	b281      	uxth	r1, r0
 8000f62:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f66:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f6a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f6e:	fb00 f308 	mul.w	r3, r0, r8
 8000f72:	428b      	cmp	r3, r1
 8000f74:	d907      	bls.n	8000f86 <__udivmoddi4+0x27e>
 8000f76:	1869      	adds	r1, r5, r1
 8000f78:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f7c:	d217      	bcs.n	8000fae <__udivmoddi4+0x2a6>
 8000f7e:	428b      	cmp	r3, r1
 8000f80:	d915      	bls.n	8000fae <__udivmoddi4+0x2a6>
 8000f82:	3802      	subs	r0, #2
 8000f84:	4429      	add	r1, r5
 8000f86:	1ac9      	subs	r1, r1, r3
 8000f88:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f8c:	e73b      	b.n	8000e06 <__udivmoddi4+0xfe>
 8000f8e:	4637      	mov	r7, r6
 8000f90:	4630      	mov	r0, r6
 8000f92:	e709      	b.n	8000da8 <__udivmoddi4+0xa0>
 8000f94:	4607      	mov	r7, r0
 8000f96:	e6e7      	b.n	8000d68 <__udivmoddi4+0x60>
 8000f98:	4618      	mov	r0, r3
 8000f9a:	e6fb      	b.n	8000d94 <__udivmoddi4+0x8c>
 8000f9c:	4541      	cmp	r1, r8
 8000f9e:	d2ab      	bcs.n	8000ef8 <__udivmoddi4+0x1f0>
 8000fa0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000fa4:	eb69 020e 	sbc.w	r2, r9, lr
 8000fa8:	3801      	subs	r0, #1
 8000faa:	4613      	mov	r3, r2
 8000fac:	e7a4      	b.n	8000ef8 <__udivmoddi4+0x1f0>
 8000fae:	4660      	mov	r0, ip
 8000fb0:	e7e9      	b.n	8000f86 <__udivmoddi4+0x27e>
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	e795      	b.n	8000ee2 <__udivmoddi4+0x1da>
 8000fb6:	4667      	mov	r7, ip
 8000fb8:	e7d1      	b.n	8000f5e <__udivmoddi4+0x256>
 8000fba:	4681      	mov	r9, r0
 8000fbc:	e77c      	b.n	8000eb8 <__udivmoddi4+0x1b0>
 8000fbe:	3802      	subs	r0, #2
 8000fc0:	442c      	add	r4, r5
 8000fc2:	e747      	b.n	8000e54 <__udivmoddi4+0x14c>
 8000fc4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fc8:	442b      	add	r3, r5
 8000fca:	e72f      	b.n	8000e2c <__udivmoddi4+0x124>
 8000fcc:	4638      	mov	r0, r7
 8000fce:	e708      	b.n	8000de2 <__udivmoddi4+0xda>
 8000fd0:	4637      	mov	r7, r6
 8000fd2:	e6e9      	b.n	8000da8 <__udivmoddi4+0xa0>

08000fd4 <__aeabi_idiv0>:
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop

08000fd8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b092      	sub	sp, #72	; 0x48
 8000fdc:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 8000fde:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	601a      	str	r2, [r3, #0]
 8000fe6:	605a      	str	r2, [r3, #4]
 8000fe8:	609a      	str	r2, [r3, #8]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000fea:	463b      	mov	r3, r7
 8000fec:	223c      	movs	r2, #60	; 0x3c
 8000fee:	2100      	movs	r1, #0
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f009 f85f 	bl	800a0b4 <memset>

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000ff6:	4b43      	ldr	r3, [pc, #268]	; (8001104 <MX_ADC1_Init+0x12c>)
 8000ff8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000ffc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000ffe:	4b41      	ldr	r3, [pc, #260]	; (8001104 <MX_ADC1_Init+0x12c>)
 8001000:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001004:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001006:	4b3f      	ldr	r3, [pc, #252]	; (8001104 <MX_ADC1_Init+0x12c>)
 8001008:	2200      	movs	r2, #0
 800100a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800100c:	4b3d      	ldr	r3, [pc, #244]	; (8001104 <MX_ADC1_Init+0x12c>)
 800100e:	2200      	movs	r2, #0
 8001010:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001012:	4b3c      	ldr	r3, [pc, #240]	; (8001104 <MX_ADC1_Init+0x12c>)
 8001014:	2200      	movs	r2, #0
 8001016:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001018:	4b3a      	ldr	r3, [pc, #232]	; (8001104 <MX_ADC1_Init+0x12c>)
 800101a:	2201      	movs	r2, #1
 800101c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800101e:	4b39      	ldr	r3, [pc, #228]	; (8001104 <MX_ADC1_Init+0x12c>)
 8001020:	2204      	movs	r2, #4
 8001022:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001024:	4b37      	ldr	r3, [pc, #220]	; (8001104 <MX_ADC1_Init+0x12c>)
 8001026:	2200      	movs	r2, #0
 8001028:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800102a:	4b36      	ldr	r3, [pc, #216]	; (8001104 <MX_ADC1_Init+0x12c>)
 800102c:	2200      	movs	r2, #0
 800102e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001030:	4b34      	ldr	r3, [pc, #208]	; (8001104 <MX_ADC1_Init+0x12c>)
 8001032:	2201      	movs	r2, #1
 8001034:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001036:	4b33      	ldr	r3, [pc, #204]	; (8001104 <MX_ADC1_Init+0x12c>)
 8001038:	2200      	movs	r2, #0
 800103a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800103e:	4b31      	ldr	r3, [pc, #196]	; (8001104 <MX_ADC1_Init+0x12c>)
 8001040:	2200      	movs	r2, #0
 8001042:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001046:	4b2f      	ldr	r3, [pc, #188]	; (8001104 <MX_ADC1_Init+0x12c>)
 8001048:	2200      	movs	r2, #0
 800104a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800104c:	4b2d      	ldr	r3, [pc, #180]	; (8001104 <MX_ADC1_Init+0x12c>)
 800104e:	2200      	movs	r2, #0
 8001050:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001054:	482b      	ldr	r0, [pc, #172]	; (8001104 <MX_ADC1_Init+0x12c>)
 8001056:	f001 fec9 	bl	8002dec <HAL_ADC_Init>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8001060:	f001 f85b 	bl	800211a <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001064:	2300      	movs	r3, #0
 8001066:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001068:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800106c:	4619      	mov	r1, r3
 800106e:	4825      	ldr	r0, [pc, #148]	; (8001104 <MX_ADC1_Init+0x12c>)
 8001070:	f003 fabe 	bl	80045f0 <HAL_ADCEx_MultiModeConfigChannel>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800107a:	f001 f84e 	bl	800211a <Error_Handler>
  }
  /** Configure Injected Channel 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 800107e:	4b22      	ldr	r3, [pc, #136]	; (8001108 <MX_ADC1_Init+0x130>)
 8001080:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8001082:	2309      	movs	r3, #9
 8001084:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 8001086:	2301      	movs	r3, #1
 8001088:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 800108a:	237f      	movs	r3, #127	; 0x7f
 800108c:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 800108e:	2304      	movs	r3, #4
 8001090:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffset = 0;
 8001092:	2300      	movs	r3, #0
 8001094:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedNbrOfConversion = 2;
 8001096:	2302      	movs	r3, #2
 8001098:	623b      	str	r3, [r7, #32]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 800109a:	2300      	movs	r3, #0
 800109c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sConfigInjected.AutoInjectedConv = DISABLE;
 80010a0:	2300      	movs	r3, #0
 80010a2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sConfigInjected.QueueInjectedContext = DISABLE;
 80010a6:	2300      	movs	r3, #0
 80010a8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_CC4;
 80010ac:	2384      	movs	r3, #132	; 0x84
 80010ae:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 80010b0:	2380      	movs	r3, #128	; 0x80
 80010b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigInjected.InjecOversamplingMode = DISABLE;
 80010b4:	2300      	movs	r3, #0
 80010b6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80010ba:	463b      	mov	r3, r7
 80010bc:	4619      	mov	r1, r3
 80010be:	4811      	ldr	r0, [pc, #68]	; (8001104 <MX_ADC1_Init+0x12c>)
 80010c0:	f002 fe3e 	bl	8003d40 <HAL_ADCEx_InjectedConfigChannel>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <MX_ADC1_Init+0xf6>
  {
    Error_Handler();
 80010ca:	f001 f826 	bl	800211a <Error_Handler>
  }
  /** Configure Injected Channel 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_12;
 80010ce:	4b0f      	ldr	r3, [pc, #60]	; (800110c <MX_ADC1_Init+0x134>)
 80010d0:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 80010d2:	f240 130f 	movw	r3, #271	; 0x10f
 80010d6:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_1;
 80010d8:	2300      	movs	r3, #0
 80010da:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffsetSign = ADC_OFFSET_SIGN_POSITIVE;
 80010dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80010e0:	61bb      	str	r3, [r7, #24]
  sConfigInjected.InjectedOffsetSaturation = ENABLE;
 80010e2:	2301      	movs	r3, #1
 80010e4:	773b      	strb	r3, [r7, #28]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80010e6:	463b      	mov	r3, r7
 80010e8:	4619      	mov	r1, r3
 80010ea:	4806      	ldr	r0, [pc, #24]	; (8001104 <MX_ADC1_Init+0x12c>)
 80010ec:	f002 fe28 	bl	8003d40 <HAL_ADCEx_InjectedConfigChannel>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <MX_ADC1_Init+0x122>
  {
    Error_Handler();
 80010f6:	f001 f810 	bl	800211a <Error_Handler>
  }

}
 80010fa:	bf00      	nop
 80010fc:	3748      	adds	r7, #72	; 0x48
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	20000278 	.word	0x20000278
 8001108:	0c900008 	.word	0x0c900008
 800110c:	32601000 	.word	0x32601000

08001110 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b090      	sub	sp, #64	; 0x40
 8001114:	af00      	add	r7, sp, #0
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001116:	1d3b      	adds	r3, r7, #4
 8001118:	223c      	movs	r2, #60	; 0x3c
 800111a:	2100      	movs	r1, #0
 800111c:	4618      	mov	r0, r3
 800111e:	f008 ffc9 	bl	800a0b4 <memset>

  /** Common config 
  */
  hadc2.Instance = ADC2;
 8001122:	4b34      	ldr	r3, [pc, #208]	; (80011f4 <MX_ADC2_Init+0xe4>)
 8001124:	4a34      	ldr	r2, [pc, #208]	; (80011f8 <MX_ADC2_Init+0xe8>)
 8001126:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8001128:	4b32      	ldr	r3, [pc, #200]	; (80011f4 <MX_ADC2_Init+0xe4>)
 800112a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800112e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001130:	4b30      	ldr	r3, [pc, #192]	; (80011f4 <MX_ADC2_Init+0xe4>)
 8001132:	2200      	movs	r2, #0
 8001134:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001136:	4b2f      	ldr	r3, [pc, #188]	; (80011f4 <MX_ADC2_Init+0xe4>)
 8001138:	2200      	movs	r2, #0
 800113a:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 800113c:	4b2d      	ldr	r3, [pc, #180]	; (80011f4 <MX_ADC2_Init+0xe4>)
 800113e:	2200      	movs	r2, #0
 8001140:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001142:	4b2c      	ldr	r3, [pc, #176]	; (80011f4 <MX_ADC2_Init+0xe4>)
 8001144:	2200      	movs	r2, #0
 8001146:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001148:	4b2a      	ldr	r3, [pc, #168]	; (80011f4 <MX_ADC2_Init+0xe4>)
 800114a:	2204      	movs	r2, #4
 800114c:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800114e:	4b29      	ldr	r3, [pc, #164]	; (80011f4 <MX_ADC2_Init+0xe4>)
 8001150:	2200      	movs	r2, #0
 8001152:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001154:	4b27      	ldr	r3, [pc, #156]	; (80011f4 <MX_ADC2_Init+0xe4>)
 8001156:	2200      	movs	r2, #0
 8001158:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800115a:	4b26      	ldr	r3, [pc, #152]	; (80011f4 <MX_ADC2_Init+0xe4>)
 800115c:	2201      	movs	r2, #1
 800115e:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001160:	4b24      	ldr	r3, [pc, #144]	; (80011f4 <MX_ADC2_Init+0xe4>)
 8001162:	2200      	movs	r2, #0
 8001164:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001168:	4b22      	ldr	r3, [pc, #136]	; (80011f4 <MX_ADC2_Init+0xe4>)
 800116a:	2200      	movs	r2, #0
 800116c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001170:	4b20      	ldr	r3, [pc, #128]	; (80011f4 <MX_ADC2_Init+0xe4>)
 8001172:	2200      	movs	r2, #0
 8001174:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8001176:	4b1f      	ldr	r3, [pc, #124]	; (80011f4 <MX_ADC2_Init+0xe4>)
 8001178:	2200      	movs	r2, #0
 800117a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800117e:	481d      	ldr	r0, [pc, #116]	; (80011f4 <MX_ADC2_Init+0xe4>)
 8001180:	f001 fe34 	bl	8002dec <HAL_ADC_Init>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 800118a:	f000 ffc6 	bl	800211a <Error_Handler>
  }
  /** Configure Injected Channel 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 800118e:	4b1b      	ldr	r3, [pc, #108]	; (80011fc <MX_ADC2_Init+0xec>)
 8001190:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8001192:	2309      	movs	r3, #9
 8001194:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 8001196:	2301      	movs	r3, #1
 8001198:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 800119a:	237f      	movs	r3, #127	; 0x7f
 800119c:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_1;
 800119e:	2300      	movs	r3, #0
 80011a0:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 80011a2:	2300      	movs	r3, #0
 80011a4:	61bb      	str	r3, [r7, #24]
  sConfigInjected.InjectedOffsetSign = ADC_OFFSET_SIGN_POSITIVE;
 80011a6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80011aa:	61fb      	str	r3, [r7, #28]
  sConfigInjected.InjectedOffsetSaturation = ENABLE;
 80011ac:	2301      	movs	r3, #1
 80011ae:	f887 3020 	strb.w	r3, [r7, #32]
  sConfigInjected.InjectedNbrOfConversion = 1;
 80011b2:	2301      	movs	r3, #1
 80011b4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80011b6:	2300      	movs	r3, #0
 80011b8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sConfigInjected.AutoInjectedConv = DISABLE;
 80011bc:	2300      	movs	r3, #0
 80011be:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sConfigInjected.QueueInjectedContext = DISABLE;
 80011c2:	2300      	movs	r3, #0
 80011c4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_CC4;
 80011c8:	2384      	movs	r3, #132	; 0x84
 80011ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 80011cc:	2380      	movs	r3, #128	; 0x80
 80011ce:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigInjected.InjecOversamplingMode = DISABLE;
 80011d0:	2300      	movs	r3, #0
 80011d2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 80011d6:	1d3b      	adds	r3, r7, #4
 80011d8:	4619      	mov	r1, r3
 80011da:	4806      	ldr	r0, [pc, #24]	; (80011f4 <MX_ADC2_Init+0xe4>)
 80011dc:	f002 fdb0 	bl	8003d40 <HAL_ADCEx_InjectedConfigChannel>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <MX_ADC2_Init+0xda>
  {
    Error_Handler();
 80011e6:	f000 ff98 	bl	800211a <Error_Handler>
  }

}
 80011ea:	bf00      	nop
 80011ec:	3740      	adds	r7, #64	; 0x40
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	2000020c 	.word	0x2000020c
 80011f8:	50000100 	.word	0x50000100
 80011fc:	0c900008 	.word	0x0c900008

08001200 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b08c      	sub	sp, #48	; 0x30
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001208:	f107 031c 	add.w	r3, r7, #28
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	605a      	str	r2, [r3, #4]
 8001212:	609a      	str	r2, [r3, #8]
 8001214:	60da      	str	r2, [r3, #12]
 8001216:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001220:	d14e      	bne.n	80012c0 <HAL_ADC_MspInit+0xc0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001222:	4b47      	ldr	r3, [pc, #284]	; (8001340 <HAL_ADC_MspInit+0x140>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	3301      	adds	r3, #1
 8001228:	4a45      	ldr	r2, [pc, #276]	; (8001340 <HAL_ADC_MspInit+0x140>)
 800122a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800122c:	4b44      	ldr	r3, [pc, #272]	; (8001340 <HAL_ADC_MspInit+0x140>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	2b01      	cmp	r3, #1
 8001232:	d10b      	bne.n	800124c <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001234:	4b43      	ldr	r3, [pc, #268]	; (8001344 <HAL_ADC_MspInit+0x144>)
 8001236:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001238:	4a42      	ldr	r2, [pc, #264]	; (8001344 <HAL_ADC_MspInit+0x144>)
 800123a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800123e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001240:	4b40      	ldr	r3, [pc, #256]	; (8001344 <HAL_ADC_MspInit+0x144>)
 8001242:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001244:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001248:	61bb      	str	r3, [r7, #24]
 800124a:	69bb      	ldr	r3, [r7, #24]
    }
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800124c:	4b3d      	ldr	r3, [pc, #244]	; (8001344 <HAL_ADC_MspInit+0x144>)
 800124e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001250:	4a3c      	ldr	r2, [pc, #240]	; (8001344 <HAL_ADC_MspInit+0x144>)
 8001252:	f043 0301 	orr.w	r3, r3, #1
 8001256:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001258:	4b3a      	ldr	r3, [pc, #232]	; (8001344 <HAL_ADC_MspInit+0x144>)
 800125a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800125c:	f003 0301 	and.w	r3, r3, #1
 8001260:	617b      	str	r3, [r7, #20]
 8001262:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001264:	4b37      	ldr	r3, [pc, #220]	; (8001344 <HAL_ADC_MspInit+0x144>)
 8001266:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001268:	4a36      	ldr	r2, [pc, #216]	; (8001344 <HAL_ADC_MspInit+0x144>)
 800126a:	f043 0302 	orr.w	r3, r3, #2
 800126e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001270:	4b34      	ldr	r3, [pc, #208]	; (8001344 <HAL_ADC_MspInit+0x144>)
 8001272:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001274:	f003 0302 	and.w	r3, r3, #2
 8001278:	613b      	str	r3, [r7, #16]
 800127a:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration    
    PA0     ------> ADC1_IN1
    PA2     ------> ADC1_IN3
    PB1     ------> ADC1_IN12 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 800127c:	2305      	movs	r3, #5
 800127e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001280:	2303      	movs	r3, #3
 8001282:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001284:	2300      	movs	r3, #0
 8001286:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001288:	f107 031c 	add.w	r3, r7, #28
 800128c:	4619      	mov	r1, r3
 800128e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001292:	f003 fbc3 	bl	8004a1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001296:	2302      	movs	r3, #2
 8001298:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800129a:	2303      	movs	r3, #3
 800129c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129e:	2300      	movs	r3, #0
 80012a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a2:	f107 031c 	add.w	r3, r7, #28
 80012a6:	4619      	mov	r1, r3
 80012a8:	4827      	ldr	r0, [pc, #156]	; (8001348 <HAL_ADC_MspInit+0x148>)
 80012aa:	f003 fbb7 	bl	8004a1c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 1, 0);
 80012ae:	2200      	movs	r2, #0
 80012b0:	2101      	movs	r1, #1
 80012b2:	2012      	movs	r0, #18
 80012b4:	f003 fb17 	bl	80048e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80012b8:	2012      	movs	r0, #18
 80012ba:	f003 fb2e 	bl	800491a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80012be:	e03a      	b.n	8001336 <HAL_ADC_MspInit+0x136>
  else if(adcHandle->Instance==ADC2)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a21      	ldr	r2, [pc, #132]	; (800134c <HAL_ADC_MspInit+0x14c>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d135      	bne.n	8001336 <HAL_ADC_MspInit+0x136>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80012ca:	4b1d      	ldr	r3, [pc, #116]	; (8001340 <HAL_ADC_MspInit+0x140>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	3301      	adds	r3, #1
 80012d0:	4a1b      	ldr	r2, [pc, #108]	; (8001340 <HAL_ADC_MspInit+0x140>)
 80012d2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80012d4:	4b1a      	ldr	r3, [pc, #104]	; (8001340 <HAL_ADC_MspInit+0x140>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d10b      	bne.n	80012f4 <HAL_ADC_MspInit+0xf4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80012dc:	4b19      	ldr	r3, [pc, #100]	; (8001344 <HAL_ADC_MspInit+0x144>)
 80012de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e0:	4a18      	ldr	r2, [pc, #96]	; (8001344 <HAL_ADC_MspInit+0x144>)
 80012e2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80012e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012e8:	4b16      	ldr	r3, [pc, #88]	; (8001344 <HAL_ADC_MspInit+0x144>)
 80012ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012f0:	60fb      	str	r3, [r7, #12]
 80012f2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f4:	4b13      	ldr	r3, [pc, #76]	; (8001344 <HAL_ADC_MspInit+0x144>)
 80012f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012f8:	4a12      	ldr	r2, [pc, #72]	; (8001344 <HAL_ADC_MspInit+0x144>)
 80012fa:	f043 0301 	orr.w	r3, r3, #1
 80012fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001300:	4b10      	ldr	r3, [pc, #64]	; (8001344 <HAL_ADC_MspInit+0x144>)
 8001302:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001304:	f003 0301 	and.w	r3, r3, #1
 8001308:	60bb      	str	r3, [r7, #8]
 800130a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800130c:	2340      	movs	r3, #64	; 0x40
 800130e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001310:	2303      	movs	r3, #3
 8001312:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001314:	2300      	movs	r3, #0
 8001316:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001318:	f107 031c 	add.w	r3, r7, #28
 800131c:	4619      	mov	r1, r3
 800131e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001322:	f003 fb7b 	bl	8004a1c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 1, 0);
 8001326:	2200      	movs	r2, #0
 8001328:	2101      	movs	r1, #1
 800132a:	2012      	movs	r0, #18
 800132c:	f003 fadb 	bl	80048e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001330:	2012      	movs	r0, #18
 8001332:	f003 faf2 	bl	800491a <HAL_NVIC_EnableIRQ>
}
 8001336:	bf00      	nop
 8001338:	3730      	adds	r7, #48	; 0x30
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	200001fc 	.word	0x200001fc
 8001344:	40021000 	.word	0x40021000
 8001348:	48000400 	.word	0x48000400
 800134c:	50000100 	.word	0x50000100

08001350 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA15   ------> S_TIM2_CH1
*/
void MX_GPIO_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b08a      	sub	sp, #40	; 0x28
 8001354:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001356:	f107 0314 	add.w	r3, r7, #20
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	605a      	str	r2, [r3, #4]
 8001360:	609a      	str	r2, [r3, #8]
 8001362:	60da      	str	r2, [r3, #12]
 8001364:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001366:	4b2d      	ldr	r3, [pc, #180]	; (800141c <MX_GPIO_Init+0xcc>)
 8001368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800136a:	4a2c      	ldr	r2, [pc, #176]	; (800141c <MX_GPIO_Init+0xcc>)
 800136c:	f043 0304 	orr.w	r3, r3, #4
 8001370:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001372:	4b2a      	ldr	r3, [pc, #168]	; (800141c <MX_GPIO_Init+0xcc>)
 8001374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001376:	f003 0304 	and.w	r3, r3, #4
 800137a:	613b      	str	r3, [r7, #16]
 800137c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800137e:	4b27      	ldr	r3, [pc, #156]	; (800141c <MX_GPIO_Init+0xcc>)
 8001380:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001382:	4a26      	ldr	r2, [pc, #152]	; (800141c <MX_GPIO_Init+0xcc>)
 8001384:	f043 0320 	orr.w	r3, r3, #32
 8001388:	64d3      	str	r3, [r2, #76]	; 0x4c
 800138a:	4b24      	ldr	r3, [pc, #144]	; (800141c <MX_GPIO_Init+0xcc>)
 800138c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800138e:	f003 0320 	and.w	r3, r3, #32
 8001392:	60fb      	str	r3, [r7, #12]
 8001394:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001396:	4b21      	ldr	r3, [pc, #132]	; (800141c <MX_GPIO_Init+0xcc>)
 8001398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800139a:	4a20      	ldr	r2, [pc, #128]	; (800141c <MX_GPIO_Init+0xcc>)
 800139c:	f043 0301 	orr.w	r3, r3, #1
 80013a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013a2:	4b1e      	ldr	r3, [pc, #120]	; (800141c <MX_GPIO_Init+0xcc>)
 80013a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a6:	f003 0301 	and.w	r3, r3, #1
 80013aa:	60bb      	str	r3, [r7, #8]
 80013ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ae:	4b1b      	ldr	r3, [pc, #108]	; (800141c <MX_GPIO_Init+0xcc>)
 80013b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b2:	4a1a      	ldr	r2, [pc, #104]	; (800141c <MX_GPIO_Init+0xcc>)
 80013b4:	f043 0302 	orr.w	r3, r3, #2
 80013b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013ba:	4b18      	ldr	r3, [pc, #96]	; (800141c <MX_GPIO_Init+0xcc>)
 80013bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013be:	f003 0302 	and.w	r3, r3, #2
 80013c2:	607b      	str	r3, [r7, #4]
 80013c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PWM_INPUT_TIM2_Pin;
 80013c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013cc:	2302      	movs	r3, #2
 80013ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80013d0:	2302      	movs	r3, #2
 80013d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d4:	2303      	movs	r3, #3
 80013d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80013d8:	2301      	movs	r3, #1
 80013da:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PWM_INPUT_TIM2_GPIO_Port, &GPIO_InitStruct);
 80013dc:	f107 0314 	add.w	r3, r7, #20
 80013e0:	4619      	mov	r1, r3
 80013e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013e6:	f003 fb19 	bl	8004a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button_Pin;
 80013ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013f0:	4b0b      	ldr	r3, [pc, #44]	; (8001420 <MX_GPIO_Init+0xd0>)
 80013f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f4:	2300      	movs	r3, #0
 80013f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 80013f8:	f107 0314 	add.w	r3, r7, #20
 80013fc:	4619      	mov	r1, r3
 80013fe:	4809      	ldr	r0, [pc, #36]	; (8001424 <MX_GPIO_Init+0xd4>)
 8001400:	f003 fb0c 	bl	8004a1c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 15, 0);
 8001404:	2200      	movs	r2, #0
 8001406:	210f      	movs	r1, #15
 8001408:	2028      	movs	r0, #40	; 0x28
 800140a:	f003 fa6c 	bl	80048e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800140e:	2028      	movs	r0, #40	; 0x28
 8001410:	f003 fa83 	bl	800491a <HAL_NVIC_EnableIRQ>

}
 8001414:	bf00      	nop
 8001416:	3728      	adds	r7, #40	; 0x28
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	40021000 	.word	0x40021000
 8001420:	10110000 	.word	0x10110000
 8001424:	48000800 	.word	0x48000800

08001428 <start_up>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void start_up(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
	 if(HAL_OK== ((HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED)) && (HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED))) )
 800142c:	217f      	movs	r1, #127	; 0x7f
 800142e:	4858      	ldr	r0, [pc, #352]	; (8001590 <start_up+0x168>)
 8001430:	f002 fae4 	bl	80039fc <HAL_ADCEx_Calibration_Start>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d008      	beq.n	800144c <start_up+0x24>
 800143a:	217f      	movs	r1, #127	; 0x7f
 800143c:	4855      	ldr	r0, [pc, #340]	; (8001594 <start_up+0x16c>)
 800143e:	f002 fadd 	bl	80039fc <HAL_ADCEx_Calibration_Start>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <start_up+0x24>
 8001448:	2301      	movs	r3, #1
 800144a:	e000      	b.n	800144e <start_up+0x26>
 800144c:	2300      	movs	r3, #0
 800144e:	2b00      	cmp	r3, #0
 8001450:	f040 809c 	bne.w	800158c <start_up+0x164>
	   {
		if(HAL_OK== (HAL_OPAMPEx_SelfCalibrateAll(&hopamp1, &hopamp2, &hopamp3)))
 8001454:	4a50      	ldr	r2, [pc, #320]	; (8001598 <start_up+0x170>)
 8001456:	4951      	ldr	r1, [pc, #324]	; (800159c <start_up+0x174>)
 8001458:	4851      	ldr	r0, [pc, #324]	; (80015a0 <start_up+0x178>)
 800145a:	f003 fd7a 	bl	8004f52 <HAL_OPAMPEx_SelfCalibrateAll>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	f040 8093 	bne.w	800158c <start_up+0x164>
		{


			//////// konfiguracja Timer 1  //////////////////////////
			TIM1->ARR= TIM1_ARR;
 8001466:	4b4f      	ldr	r3, [pc, #316]	; (80015a4 <start_up+0x17c>)
 8001468:	f240 32e7 	movw	r2, #999	; 0x3e7
 800146c:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM1->PSC= TIM1_PSC;
 800146e:	4b4d      	ldr	r3, [pc, #308]	; (80015a4 <start_up+0x17c>)
 8001470:	2209      	movs	r2, #9
 8001472:	629a      	str	r2, [r3, #40]	; 0x28

			TIM1->CCR1=(TIM1->ARR/10);
 8001474:	4b4b      	ldr	r3, [pc, #300]	; (80015a4 <start_up+0x17c>)
 8001476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001478:	4a4a      	ldr	r2, [pc, #296]	; (80015a4 <start_up+0x17c>)
 800147a:	494b      	ldr	r1, [pc, #300]	; (80015a8 <start_up+0x180>)
 800147c:	fba1 1303 	umull	r1, r3, r1, r3
 8001480:	08db      	lsrs	r3, r3, #3
 8001482:	6353      	str	r3, [r2, #52]	; 0x34
			TIM1->CCR2=0;
 8001484:	4b47      	ldr	r3, [pc, #284]	; (80015a4 <start_up+0x17c>)
 8001486:	2200      	movs	r2, #0
 8001488:	639a      	str	r2, [r3, #56]	; 0x38
			TIM1->CCR3=0;
 800148a:	4b46      	ldr	r3, [pc, #280]	; (80015a4 <start_up+0x17c>)
 800148c:	2200      	movs	r2, #0
 800148e:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM1->CCR4=TIM1_CCR4;
 8001490:	4b44      	ldr	r3, [pc, #272]	; (80015a4 <start_up+0x17c>)
 8001492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001494:	4a43      	ldr	r2, [pc, #268]	; (80015a4 <start_up+0x17c>)
 8001496:	3b04      	subs	r3, #4
 8001498:	6413      	str	r3, [r2, #64]	; 0x40

			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800149a:	2100      	movs	r1, #0
 800149c:	4843      	ldr	r0, [pc, #268]	; (80015ac <start_up+0x184>)
 800149e:	f005 f8cd 	bl	800663c <HAL_TIM_PWM_Start>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 80014a2:	2100      	movs	r1, #0
 80014a4:	4841      	ldr	r0, [pc, #260]	; (80015ac <start_up+0x184>)
 80014a6:	f006 f905 	bl	80076b4 <HAL_TIMEx_PWMN_Start>
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80014aa:	2104      	movs	r1, #4
 80014ac:	483f      	ldr	r0, [pc, #252]	; (80015ac <start_up+0x184>)
 80014ae:	f005 f8c5 	bl	800663c <HAL_TIM_PWM_Start>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 80014b2:	2104      	movs	r1, #4
 80014b4:	483d      	ldr	r0, [pc, #244]	; (80015ac <start_up+0x184>)
 80014b6:	f006 f8fd 	bl	80076b4 <HAL_TIMEx_PWMN_Start>
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80014ba:	2108      	movs	r1, #8
 80014bc:	483b      	ldr	r0, [pc, #236]	; (80015ac <start_up+0x184>)
 80014be:	f005 f8bd 	bl	800663c <HAL_TIM_PWM_Start>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 80014c2:	2108      	movs	r1, #8
 80014c4:	4839      	ldr	r0, [pc, #228]	; (80015ac <start_up+0x184>)
 80014c6:	f006 f8f5 	bl	80076b4 <HAL_TIMEx_PWMN_Start>
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80014ca:	210c      	movs	r1, #12
 80014cc:	4837      	ldr	r0, [pc, #220]	; (80015ac <start_up+0x184>)
 80014ce:	f005 f8b5 	bl	800663c <HAL_TIM_PWM_Start>


			HAL_Delay(800);
 80014d2:	f44f 7048 	mov.w	r0, #800	; 0x320
 80014d6:	f001 fb4f 	bl	8002b78 <HAL_Delay>

			//////// konfiguracja Timer 4 - encoder ///////////////////
			TIM4->ARR= TIM4_ARR;
 80014da:	4b35      	ldr	r3, [pc, #212]	; (80015b0 <start_up+0x188>)
 80014dc:	f240 1267 	movw	r2, #359	; 0x167
 80014e0:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM4->PSC= TIM4_PSC;
 80014e2:	4b33      	ldr	r3, [pc, #204]	; (80015b0 <start_up+0x188>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	629a      	str	r2, [r3, #40]	; 0x28
			HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1);
 80014e8:	2100      	movs	r1, #0
 80014ea:	4832      	ldr	r0, [pc, #200]	; (80015b4 <start_up+0x18c>)
 80014ec:	f005 fa1e 	bl	800692c <HAL_TIM_Encoder_Start>
			HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_2);
 80014f0:	2104      	movs	r1, #4
 80014f2:	4830      	ldr	r0, [pc, #192]	; (80015b4 <start_up+0x18c>)
 80014f4:	f005 fa1a 	bl	800692c <HAL_TIM_Encoder_Start>

			HAL_Delay(400);
 80014f8:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80014fc:	f001 fb3c 	bl	8002b78 <HAL_Delay>

			TIM1->CCR1=0;
 8001500:	4b28      	ldr	r3, [pc, #160]	; (80015a4 <start_up+0x17c>)
 8001502:	2200      	movs	r2, #0
 8001504:	635a      	str	r2, [r3, #52]	; 0x34
			TIM1->CCR2=0;
 8001506:	4b27      	ldr	r3, [pc, #156]	; (80015a4 <start_up+0x17c>)
 8001508:	2200      	movs	r2, #0
 800150a:	639a      	str	r2, [r3, #56]	; 0x38
			TIM1->CCR3=0;
 800150c:	4b25      	ldr	r3, [pc, #148]	; (80015a4 <start_up+0x17c>)
 800150e:	2200      	movs	r2, #0
 8001510:	63da      	str	r2, [r3, #60]	; 0x3c

			HAL_Delay(200);
 8001512:	20c8      	movs	r0, #200	; 0xc8
 8001514:	f001 fb30 	bl	8002b78 <HAL_Delay>



			//////// start ADC 1 2 ///////////////////////////////////
			HAL_OPAMP_Start(&hopamp1);
 8001518:	4821      	ldr	r0, [pc, #132]	; (80015a0 <start_up+0x178>)
 800151a:	f003 fce9 	bl	8004ef0 <HAL_OPAMP_Start>
			HAL_OPAMP_Start(&hopamp2);
 800151e:	481f      	ldr	r0, [pc, #124]	; (800159c <start_up+0x174>)
 8001520:	f003 fce6 	bl	8004ef0 <HAL_OPAMP_Start>
			HAL_OPAMP_Start(&hopamp3);
 8001524:	481c      	ldr	r0, [pc, #112]	; (8001598 <start_up+0x170>)
 8001526:	f003 fce3 	bl	8004ef0 <HAL_OPAMP_Start>

			//////// start ADC 1 2 ///////////////////////////////////
			HAL_ADCEx_InjectedStart_IT(&hadc1);
 800152a:	4819      	ldr	r0, [pc, #100]	; (8001590 <start_up+0x168>)
 800152c:	f002 fac8 	bl	8003ac0 <HAL_ADCEx_InjectedStart_IT>
			HAL_ADCEx_InjectedStart_IT(&hadc2);
 8001530:	4818      	ldr	r0, [pc, #96]	; (8001594 <start_up+0x16c>)
 8001532:	f002 fac5 	bl	8003ac0 <HAL_ADCEx_InjectedStart_IT>


			////////  UASRT 2 /////////////////////////////////////////
			HAL_UART_Receive_IT(&huart2, &recive, 1);
 8001536:	2201      	movs	r2, #1
 8001538:	491f      	ldr	r1, [pc, #124]	; (80015b8 <start_up+0x190>)
 800153a:	4820      	ldr	r0, [pc, #128]	; (80015bc <start_up+0x194>)
 800153c:	f006 fad2 	bl	8007ae4 <HAL_UART_Receive_IT>


			/////////// inicjalizacja pid_d ////////////////
			set_d=0;
 8001540:	4b1f      	ldr	r3, [pc, #124]	; (80015c0 <start_up+0x198>)
 8001542:	f04f 0200 	mov.w	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
			pid_d.Kp=2;
 8001548:	4b1e      	ldr	r3, [pc, #120]	; (80015c4 <start_up+0x19c>)
 800154a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800154e:	619a      	str	r2, [r3, #24]
			pid_d.Ki=1000;
 8001550:	4b1c      	ldr	r3, [pc, #112]	; (80015c4 <start_up+0x19c>)
 8001552:	4a1d      	ldr	r2, [pc, #116]	; (80015c8 <start_up+0x1a0>)
 8001554:	61da      	str	r2, [r3, #28]
			pid_d.Kd=0;
 8001556:	4b1b      	ldr	r3, [pc, #108]	; (80015c4 <start_up+0x19c>)
 8001558:	f04f 0200 	mov.w	r2, #0
 800155c:	621a      	str	r2, [r3, #32]
			arm_pid_init_f32(&pid_d, 1);
 800155e:	2101      	movs	r1, #1
 8001560:	4818      	ldr	r0, [pc, #96]	; (80015c4 <start_up+0x19c>)
 8001562:	f008 fb41 	bl	8009be8 <arm_pid_init_f32>

			/////////// inicjalizacja pid_q ////////////////
			set_q=1;
 8001566:	4b19      	ldr	r3, [pc, #100]	; (80015cc <start_up+0x1a4>)
 8001568:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800156c:	601a      	str	r2, [r3, #0]
			pid_q.Kp=1000;
 800156e:	4b18      	ldr	r3, [pc, #96]	; (80015d0 <start_up+0x1a8>)
 8001570:	4a15      	ldr	r2, [pc, #84]	; (80015c8 <start_up+0x1a0>)
 8001572:	619a      	str	r2, [r3, #24]
			pid_q.Ki=2;
 8001574:	4b16      	ldr	r3, [pc, #88]	; (80015d0 <start_up+0x1a8>)
 8001576:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800157a:	61da      	str	r2, [r3, #28]
			pid_q.Kd=0;
 800157c:	4b14      	ldr	r3, [pc, #80]	; (80015d0 <start_up+0x1a8>)
 800157e:	f04f 0200 	mov.w	r2, #0
 8001582:	621a      	str	r2, [r3, #32]
			arm_pid_init_f32(&pid_q, 1);
 8001584:	2101      	movs	r1, #1
 8001586:	4812      	ldr	r0, [pc, #72]	; (80015d0 <start_up+0x1a8>)
 8001588:	f008 fb2e 	bl	8009be8 <arm_pid_init_f32>
		}


	   }

}
 800158c:	bf00      	nop
 800158e:	bd80      	pop	{r7, pc}
 8001590:	20000278 	.word	0x20000278
 8001594:	2000020c 	.word	0x2000020c
 8001598:	20000460 	.word	0x20000460
 800159c:	20000424 	.word	0x20000424
 80015a0:	2000049c 	.word	0x2000049c
 80015a4:	40012c00 	.word	0x40012c00
 80015a8:	cccccccd 	.word	0xcccccccd
 80015ac:	20000524 	.word	0x20000524
 80015b0:	40000800 	.word	0x40000800
 80015b4:	200004d8 	.word	0x200004d8
 80015b8:	200003c0 	.word	0x200003c0
 80015bc:	20000570 	.word	0x20000570
 80015c0:	20000314 	.word	0x20000314
 80015c4:	20000318 	.word	0x20000318
 80015c8:	447a0000 	.word	0x447a0000
 80015cc:	20000404 	.word	0x20000404
 80015d0:	20000394 	.word	0x20000394
 80015d4:	00000000 	.word	0x00000000

080015d8 <AlphaBeta_To_Angle_Vref>:

void AlphaBeta_To_Angle_Vref(float32_t alpha,float32_t beta,float32_t *angle_current_rad,float32_t *Vref)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b086      	sub	sp, #24
 80015dc:	af00      	add	r7, sp, #0
 80015de:	ed87 0a03 	vstr	s0, [r7, #12]
 80015e2:	edc7 0a02 	vstr	s1, [r7, #8]
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	6039      	str	r1, [r7, #0]
	*angle_current_rad = atan2f(beta,alpha);
 80015ea:	edd7 0a03 	vldr	s1, [r7, #12]
 80015ee:	ed97 0a02 	vldr	s0, [r7, #8]
 80015f2:	f00c fa9f 	bl	800db34 <atan2f>
 80015f6:	eef0 7a40 	vmov.f32	s15, s0
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	edc3 7a00 	vstr	s15, [r3]
	arm_sqrt_f32( ((alpha*alpha)+(beta*beta)), Vref);
 8001600:	ed97 7a03 	vldr	s14, [r7, #12]
 8001604:	edd7 7a03 	vldr	s15, [r7, #12]
 8001608:	ee27 7a27 	vmul.f32	s14, s14, s15
 800160c:	edd7 6a02 	vldr	s13, [r7, #8]
 8001610:	edd7 7a02 	vldr	s15, [r7, #8]
 8001614:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001618:	ee77 7a27 	vadd.f32	s15, s14, s15
 800161c:	edc7 7a05 	vstr	s15, [r7, #20]
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8001624:	edd7 7a05 	vldr	s15, [r7, #20]
 8001628:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800162c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001630:	db09      	blt.n	8001646 <AlphaBeta_To_Angle_Vref+0x6e>
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
 8001632:	ed97 0a05 	vldr	s0, [r7, #20]
 8001636:	f00c fa7f 	bl	800db38 <sqrtf>
 800163a:	eef0 7a40 	vmov.f32	s15, s0
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	edc3 7a00 	vstr	s15, [r3]
 8001644:	e003      	b.n	800164e <AlphaBeta_To_Angle_Vref+0x76>

      return (ARM_MATH_SUCCESS);
    }
    else
    {
      *pOut = 0.0f;
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	f04f 0200 	mov.w	r2, #0
 800164c:	601a      	str	r2, [r3, #0]

	 if(*Vref>=sv_Vdc_limit)  // saturacja Vref
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4618      	mov	r0, r3
 8001654:	f7fe ffa0 	bl	8000598 <__aeabi_f2d>
 8001658:	a308      	add	r3, pc, #32	; (adr r3, 800167c <AlphaBeta_To_Angle_Vref+0xa4>)
 800165a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800165e:	f7ff fa79 	bl	8000b54 <__aeabi_dcmpge>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d100      	bne.n	800166a <AlphaBeta_To_Angle_Vref+0x92>
	    	*Vref=sv_Vdc_limit;
}
 8001668:	e002      	b.n	8001670 <AlphaBeta_To_Angle_Vref+0x98>
	    	*Vref=sv_Vdc_limit;
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	4a02      	ldr	r2, [pc, #8]	; (8001678 <AlphaBeta_To_Angle_Vref+0xa0>)
 800166e:	601a      	str	r2, [r3, #0]
}
 8001670:	bf00      	nop
 8001672:	3718      	adds	r7, #24
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	415db3d0 	.word	0x415db3d0
 800167c:	0f9096bc 	.word	0x0f9096bc
 8001680:	402bb67a 	.word	0x402bb67a
 8001684:	00000000 	.word	0x00000000

08001688 <Angle_To_Sector>:


void Angle_To_Sector(float32_t angle_current_rad,uint8_t *sector)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001692:	6038      	str	r0, [r7, #0]

	if((angle_current_rad>0) && (angle_current_rad<=1.047197)) // pi/3
 8001694:	edd7 7a01 	vldr	s15, [r7, #4]
 8001698:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800169c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016a0:	dd0e      	ble.n	80016c0 <Angle_To_Sector+0x38>
 80016a2:	6878      	ldr	r0, [r7, #4]
 80016a4:	f7fe ff78 	bl	8000598 <__aeabi_f2d>
 80016a8:	a347      	add	r3, pc, #284	; (adr r3, 80017c8 <Angle_To_Sector+0x140>)
 80016aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ae:	f7ff fa47 	bl	8000b40 <__aeabi_dcmple>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d003      	beq.n	80016c0 <Angle_To_Sector+0x38>
		*sector=1;
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	2201      	movs	r2, #1
 80016bc:	701a      	strb	r2, [r3, #0]
 80016be:	e07f      	b.n	80017c0 <Angle_To_Sector+0x138>
	else if((angle_current_rad>1.047197) && (angle_current_rad<=2.094395)) //2/3*pi
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f7fe ff69 	bl	8000598 <__aeabi_f2d>
 80016c6:	a340      	add	r3, pc, #256	; (adr r3, 80017c8 <Angle_To_Sector+0x140>)
 80016c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016cc:	f7ff fa4c 	bl	8000b68 <__aeabi_dcmpgt>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d00e      	beq.n	80016f4 <Angle_To_Sector+0x6c>
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f7fe ff5e 	bl	8000598 <__aeabi_f2d>
 80016dc:	a33c      	add	r3, pc, #240	; (adr r3, 80017d0 <Angle_To_Sector+0x148>)
 80016de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e2:	f7ff fa2d 	bl	8000b40 <__aeabi_dcmple>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d003      	beq.n	80016f4 <Angle_To_Sector+0x6c>
		*sector=2;
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	2202      	movs	r2, #2
 80016f0:	701a      	strb	r2, [r3, #0]
 80016f2:	e065      	b.n	80017c0 <Angle_To_Sector+0x138>
	else if((angle_current_rad>2.094395) && (angle_current_rad<=3.141593))
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	f7fe ff4f 	bl	8000598 <__aeabi_f2d>
 80016fa:	a335      	add	r3, pc, #212	; (adr r3, 80017d0 <Angle_To_Sector+0x148>)
 80016fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001700:	f7ff fa32 	bl	8000b68 <__aeabi_dcmpgt>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d00e      	beq.n	8001728 <Angle_To_Sector+0xa0>
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f7fe ff44 	bl	8000598 <__aeabi_f2d>
 8001710:	a331      	add	r3, pc, #196	; (adr r3, 80017d8 <Angle_To_Sector+0x150>)
 8001712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001716:	f7ff fa13 	bl	8000b40 <__aeabi_dcmple>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d003      	beq.n	8001728 <Angle_To_Sector+0xa0>
		*sector=3;
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	2203      	movs	r2, #3
 8001724:	701a      	strb	r2, [r3, #0]
 8001726:	e04b      	b.n	80017c0 <Angle_To_Sector+0x138>
	else if((angle_current_rad>-3.141593) && (angle_current_rad<=-2.094395))
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	f7fe ff35 	bl	8000598 <__aeabi_f2d>
 800172e:	a32c      	add	r3, pc, #176	; (adr r3, 80017e0 <Angle_To_Sector+0x158>)
 8001730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001734:	f7ff fa18 	bl	8000b68 <__aeabi_dcmpgt>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d00e      	beq.n	800175c <Angle_To_Sector+0xd4>
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	f7fe ff2a 	bl	8000598 <__aeabi_f2d>
 8001744:	a328      	add	r3, pc, #160	; (adr r3, 80017e8 <Angle_To_Sector+0x160>)
 8001746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800174a:	f7ff f9f9 	bl	8000b40 <__aeabi_dcmple>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d003      	beq.n	800175c <Angle_To_Sector+0xd4>
		*sector=4;
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	2204      	movs	r2, #4
 8001758:	701a      	strb	r2, [r3, #0]
 800175a:	e031      	b.n	80017c0 <Angle_To_Sector+0x138>
	else if((angle_current_rad>-2.094395) && (angle_current_rad<=-1.047197))
 800175c:	6878      	ldr	r0, [r7, #4]
 800175e:	f7fe ff1b 	bl	8000598 <__aeabi_f2d>
 8001762:	a321      	add	r3, pc, #132	; (adr r3, 80017e8 <Angle_To_Sector+0x160>)
 8001764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001768:	f7ff f9fe 	bl	8000b68 <__aeabi_dcmpgt>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d00e      	beq.n	8001790 <Angle_To_Sector+0x108>
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f7fe ff10 	bl	8000598 <__aeabi_f2d>
 8001778:	a31d      	add	r3, pc, #116	; (adr r3, 80017f0 <Angle_To_Sector+0x168>)
 800177a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800177e:	f7ff f9df 	bl	8000b40 <__aeabi_dcmple>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d003      	beq.n	8001790 <Angle_To_Sector+0x108>
		*sector=5;
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	2205      	movs	r2, #5
 800178c:	701a      	strb	r2, [r3, #0]
 800178e:	e017      	b.n	80017c0 <Angle_To_Sector+0x138>
	else if ((angle_current_rad>-1.047197) && (angle_current_rad<=0))
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f7fe ff01 	bl	8000598 <__aeabi_f2d>
 8001796:	a316      	add	r3, pc, #88	; (adr r3, 80017f0 <Angle_To_Sector+0x168>)
 8001798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800179c:	f7ff f9e4 	bl	8000b68 <__aeabi_dcmpgt>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d100      	bne.n	80017a8 <Angle_To_Sector+0x120>
		*sector=6;
	else{}

}
 80017a6:	e00b      	b.n	80017c0 <Angle_To_Sector+0x138>
	else if ((angle_current_rad>-1.047197) && (angle_current_rad<=0))
 80017a8:	edd7 7a01 	vldr	s15, [r7, #4]
 80017ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80017b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017b4:	d900      	bls.n	80017b8 <Angle_To_Sector+0x130>
}
 80017b6:	e003      	b.n	80017c0 <Angle_To_Sector+0x138>
		*sector=6;
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	2206      	movs	r2, #6
 80017bc:	701a      	strb	r2, [r3, #0]
}
 80017be:	e7ff      	b.n	80017c0 <Angle_To_Sector+0x138>
 80017c0:	bf00      	nop
 80017c2:	3708      	adds	r7, #8
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	a437824d 	.word	0xa437824d
 80017cc:	3ff0c151 	.word	0x3ff0c151
 80017d0:	2a6f3f53 	.word	0x2a6f3f53
 80017d4:	4000c152 	.word	0x4000c152
 80017d8:	82c2bd7f 	.word	0x82c2bd7f
 80017dc:	400921fb 	.word	0x400921fb
 80017e0:	82c2bd7f 	.word	0x82c2bd7f
 80017e4:	c00921fb 	.word	0xc00921fb
 80017e8:	2a6f3f53 	.word	0x2a6f3f53
 80017ec:	c000c152 	.word	0xc000c152
 80017f0:	a437824d 	.word	0xa437824d
 80017f4:	bff0c151 	.word	0xbff0c151

080017f8 <SVPWM>:


void SVPWM(uint8_t sector,float32_t angle_current_rad,float32_t Vref, float32_t T[], float32_t T_gate[], float32_t *S1,float32_t *S2,float32_t *S3)
{
 80017f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80017fc:	b086      	sub	sp, #24
 80017fe:	af00      	add	r7, sp, #0
 8001800:	ed87 0a04 	vstr	s0, [r7, #16]
 8001804:	edc7 0a03 	vstr	s1, [r7, #12]
 8001808:	60b9      	str	r1, [r7, #8]
 800180a:	607a      	str	r2, [r7, #4]
 800180c:	603b      	str	r3, [r7, #0]
 800180e:	4603      	mov	r3, r0
 8001810:	75fb      	strb	r3, [r7, #23]

	T[1]=sv_modulation * ((Vref * sv_Tz)/sv_Vdc_limit) * arm_sin_f32((sector * 1.047197) - (angle_current_rad)); /// pi/3 = 1,0472
 8001812:	edd7 7a03 	vldr	s15, [r7, #12]
 8001816:	ed9f 7ab6 	vldr	s14, [pc, #728]	; 8001af0 <SVPWM+0x2f8>
 800181a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800181e:	ee17 0a90 	vmov	r0, s15
 8001822:	f7fe feb9 	bl	8000598 <__aeabi_f2d>
 8001826:	a3ac      	add	r3, pc, #688	; (adr r3, 8001ad8 <SVPWM+0x2e0>)
 8001828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800182c:	f7ff f836 	bl	800089c <__aeabi_ddiv>
 8001830:	4603      	mov	r3, r0
 8001832:	460c      	mov	r4, r1
 8001834:	4618      	mov	r0, r3
 8001836:	4621      	mov	r1, r4
 8001838:	a3a9      	add	r3, pc, #676	; (adr r3, 8001ae0 <SVPWM+0x2e8>)
 800183a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800183e:	f7fe ff03 	bl	8000648 <__aeabi_dmul>
 8001842:	4603      	mov	r3, r0
 8001844:	460c      	mov	r4, r1
 8001846:	4625      	mov	r5, r4
 8001848:	461c      	mov	r4, r3
 800184a:	7dfb      	ldrb	r3, [r7, #23]
 800184c:	4618      	mov	r0, r3
 800184e:	f7fe fe91 	bl	8000574 <__aeabi_i2d>
 8001852:	a3a5      	add	r3, pc, #660	; (adr r3, 8001ae8 <SVPWM+0x2f0>)
 8001854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001858:	f7fe fef6 	bl	8000648 <__aeabi_dmul>
 800185c:	4602      	mov	r2, r0
 800185e:	460b      	mov	r3, r1
 8001860:	4690      	mov	r8, r2
 8001862:	4699      	mov	r9, r3
 8001864:	6938      	ldr	r0, [r7, #16]
 8001866:	f7fe fe97 	bl	8000598 <__aeabi_f2d>
 800186a:	4602      	mov	r2, r0
 800186c:	460b      	mov	r3, r1
 800186e:	4640      	mov	r0, r8
 8001870:	4649      	mov	r1, r9
 8001872:	f7fe fd31 	bl	80002d8 <__aeabi_dsub>
 8001876:	4602      	mov	r2, r0
 8001878:	460b      	mov	r3, r1
 800187a:	4610      	mov	r0, r2
 800187c:	4619      	mov	r1, r3
 800187e:	f7ff f9db 	bl	8000c38 <__aeabi_d2f>
 8001882:	4603      	mov	r3, r0
 8001884:	ee00 3a10 	vmov	s0, r3
 8001888:	f008 fb5e 	bl	8009f48 <arm_sin_f32>
 800188c:	ee10 3a10 	vmov	r3, s0
 8001890:	4618      	mov	r0, r3
 8001892:	f7fe fe81 	bl	8000598 <__aeabi_f2d>
 8001896:	4602      	mov	r2, r0
 8001898:	460b      	mov	r3, r1
 800189a:	4620      	mov	r0, r4
 800189c:	4629      	mov	r1, r5
 800189e:	f7fe fed3 	bl	8000648 <__aeabi_dmul>
 80018a2:	4603      	mov	r3, r0
 80018a4:	460c      	mov	r4, r1
 80018a6:	4619      	mov	r1, r3
 80018a8:	4622      	mov	r2, r4
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	1d1c      	adds	r4, r3, #4
 80018ae:	4608      	mov	r0, r1
 80018b0:	4611      	mov	r1, r2
 80018b2:	f7ff f9c1 	bl	8000c38 <__aeabi_d2f>
 80018b6:	4603      	mov	r3, r0
 80018b8:	6023      	str	r3, [r4, #0]
	T[2]=sv_modulation * ((Vref * sv_Tz)/sv_Vdc_limit) * arm_sin_f32((-(sector-1) * 1.047197) +  angle_current_rad) ;
 80018ba:	edd7 7a03 	vldr	s15, [r7, #12]
 80018be:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8001af0 <SVPWM+0x2f8>
 80018c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018c6:	ee17 0a90 	vmov	r0, s15
 80018ca:	f7fe fe65 	bl	8000598 <__aeabi_f2d>
 80018ce:	a382      	add	r3, pc, #520	; (adr r3, 8001ad8 <SVPWM+0x2e0>)
 80018d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018d4:	f7fe ffe2 	bl	800089c <__aeabi_ddiv>
 80018d8:	4603      	mov	r3, r0
 80018da:	460c      	mov	r4, r1
 80018dc:	4618      	mov	r0, r3
 80018de:	4621      	mov	r1, r4
 80018e0:	a37f      	add	r3, pc, #508	; (adr r3, 8001ae0 <SVPWM+0x2e8>)
 80018e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e6:	f7fe feaf 	bl	8000648 <__aeabi_dmul>
 80018ea:	4603      	mov	r3, r0
 80018ec:	460c      	mov	r4, r1
 80018ee:	4625      	mov	r5, r4
 80018f0:	461c      	mov	r4, r3
 80018f2:	7dfb      	ldrb	r3, [r7, #23]
 80018f4:	f1c3 0301 	rsb	r3, r3, #1
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7fe fe3b 	bl	8000574 <__aeabi_i2d>
 80018fe:	a37a      	add	r3, pc, #488	; (adr r3, 8001ae8 <SVPWM+0x2f0>)
 8001900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001904:	f7fe fea0 	bl	8000648 <__aeabi_dmul>
 8001908:	4602      	mov	r2, r0
 800190a:	460b      	mov	r3, r1
 800190c:	4690      	mov	r8, r2
 800190e:	4699      	mov	r9, r3
 8001910:	6938      	ldr	r0, [r7, #16]
 8001912:	f7fe fe41 	bl	8000598 <__aeabi_f2d>
 8001916:	4602      	mov	r2, r0
 8001918:	460b      	mov	r3, r1
 800191a:	4640      	mov	r0, r8
 800191c:	4649      	mov	r1, r9
 800191e:	f7fe fcdd 	bl	80002dc <__adddf3>
 8001922:	4602      	mov	r2, r0
 8001924:	460b      	mov	r3, r1
 8001926:	4610      	mov	r0, r2
 8001928:	4619      	mov	r1, r3
 800192a:	f7ff f985 	bl	8000c38 <__aeabi_d2f>
 800192e:	4603      	mov	r3, r0
 8001930:	ee00 3a10 	vmov	s0, r3
 8001934:	f008 fb08 	bl	8009f48 <arm_sin_f32>
 8001938:	ee10 3a10 	vmov	r3, s0
 800193c:	4618      	mov	r0, r3
 800193e:	f7fe fe2b 	bl	8000598 <__aeabi_f2d>
 8001942:	4602      	mov	r2, r0
 8001944:	460b      	mov	r3, r1
 8001946:	4620      	mov	r0, r4
 8001948:	4629      	mov	r1, r5
 800194a:	f7fe fe7d 	bl	8000648 <__aeabi_dmul>
 800194e:	4603      	mov	r3, r0
 8001950:	460c      	mov	r4, r1
 8001952:	4619      	mov	r1, r3
 8001954:	4622      	mov	r2, r4
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	f103 0408 	add.w	r4, r3, #8
 800195c:	4608      	mov	r0, r1
 800195e:	4611      	mov	r1, r2
 8001960:	f7ff f96a 	bl	8000c38 <__aeabi_d2f>
 8001964:	4603      	mov	r3, r0
 8001966:	6023      	str	r3, [r4, #0]
	T[0]=sv_Tz-T[1]-T[2];
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	3304      	adds	r3, #4
 800196c:	edd3 7a00 	vldr	s15, [r3]
 8001970:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8001af0 <SVPWM+0x2f8>
 8001974:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	3308      	adds	r3, #8
 800197c:	edd3 7a00 	vldr	s15, [r3]
 8001980:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	edc3 7a00 	vstr	s15, [r3]

	t1=T[1];
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	4a59      	ldr	r2, [pc, #356]	; (8001af4 <SVPWM+0x2fc>)
 8001990:	6013      	str	r3, [r2, #0]
	t2=T[2];
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	4a58      	ldr	r2, [pc, #352]	; (8001af8 <SVPWM+0x300>)
 8001998:	6013      	str	r3, [r2, #0]
	t3=T[0];
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a57      	ldr	r2, [pc, #348]	; (8001afc <SVPWM+0x304>)
 80019a0:	6013      	str	r3, [r2, #0]

	T_gate[0]= (T[0]/2);
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	ed93 7a00 	vldr	s14, [r3]
 80019a8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80019ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	edc3 7a00 	vstr	s15, [r3]
	T_gate[1]= T[1]+(T_gate[0]);
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	3304      	adds	r3, #4
 80019ba:	ed93 7a00 	vldr	s14, [r3]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	edd3 7a00 	vldr	s15, [r3]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	3304      	adds	r3, #4
 80019c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019cc:	edc3 7a00 	vstr	s15, [r3]
	T_gate[2]= T[2]+(T_gate[0]);
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	3308      	adds	r3, #8
 80019d4:	ed93 7a00 	vldr	s14, [r3]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	edd3 7a00 	vldr	s15, [r3]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	3308      	adds	r3, #8
 80019e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019e6:	edc3 7a00 	vstr	s15, [r3]
	T_gate[3]= T[1]+T[2]+(T_gate[0]);
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	3304      	adds	r3, #4
 80019ee:	ed93 7a00 	vldr	s14, [r3]
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	3308      	adds	r3, #8
 80019f6:	edd3 7a00 	vldr	s15, [r3]
 80019fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	edd3 7a00 	vldr	s15, [r3]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	330c      	adds	r3, #12
 8001a08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a0c:	edc3 7a00 	vstr	s15, [r3]


	if(sector == 1)
 8001a10:	7dfb      	ldrb	r3, [r7, #23]
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d10c      	bne.n	8001a30 <SVPWM+0x238>
	{
		*S1=T_gate[3];
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	68da      	ldr	r2, [r3, #12]
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	601a      	str	r2, [r3, #0]
		*S2=T_gate[2];
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	689a      	ldr	r2, [r3, #8]
 8001a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a24:	601a      	str	r2, [r3, #0]
		*S3=T_gate[0];
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a2c:	601a      	str	r2, [r3, #0]
		*S2=T_gate[0];
		*S3=T_gate[1];
	}
	else{}

}
 8001a2e:	e04e      	b.n	8001ace <SVPWM+0x2d6>
	else if(sector == 2)
 8001a30:	7dfb      	ldrb	r3, [r7, #23]
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d10c      	bne.n	8001a50 <SVPWM+0x258>
		*S1=T_gate[1];
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	685a      	ldr	r2, [r3, #4]
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	601a      	str	r2, [r3, #0]
		*S2=T_gate[3];
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	68da      	ldr	r2, [r3, #12]
 8001a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a44:	601a      	str	r2, [r3, #0]
		*S3=T_gate[0];
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a4c:	601a      	str	r2, [r3, #0]
}
 8001a4e:	e03e      	b.n	8001ace <SVPWM+0x2d6>
	else if(sector == 3)
 8001a50:	7dfb      	ldrb	r3, [r7, #23]
 8001a52:	2b03      	cmp	r3, #3
 8001a54:	d10c      	bne.n	8001a70 <SVPWM+0x278>
		*S1=T_gate[0];
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	601a      	str	r2, [r3, #0]
		*S2=T_gate[3];
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	68da      	ldr	r2, [r3, #12]
 8001a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a64:	601a      	str	r2, [r3, #0]
		*S3=T_gate[2];
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	689a      	ldr	r2, [r3, #8]
 8001a6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a6c:	601a      	str	r2, [r3, #0]
}
 8001a6e:	e02e      	b.n	8001ace <SVPWM+0x2d6>
	else if(sector == 4)
 8001a70:	7dfb      	ldrb	r3, [r7, #23]
 8001a72:	2b04      	cmp	r3, #4
 8001a74:	d10c      	bne.n	8001a90 <SVPWM+0x298>
		*S1=T_gate[0];
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	601a      	str	r2, [r3, #0]
		*S2=T_gate[1];
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	685a      	ldr	r2, [r3, #4]
 8001a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a84:	601a      	str	r2, [r3, #0]
		*S3=T_gate[3];
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	68da      	ldr	r2, [r3, #12]
 8001a8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a8c:	601a      	str	r2, [r3, #0]
}
 8001a8e:	e01e      	b.n	8001ace <SVPWM+0x2d6>
	else if(sector == 5)
 8001a90:	7dfb      	ldrb	r3, [r7, #23]
 8001a92:	2b05      	cmp	r3, #5
 8001a94:	d10c      	bne.n	8001ab0 <SVPWM+0x2b8>
		*S1=T_gate[2];
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	689a      	ldr	r2, [r3, #8]
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	601a      	str	r2, [r3, #0]
		*S2=T_gate[0];
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001aa4:	601a      	str	r2, [r3, #0]
		*S3=T_gate[3];
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	68da      	ldr	r2, [r3, #12]
 8001aaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001aac:	601a      	str	r2, [r3, #0]
}
 8001aae:	e00e      	b.n	8001ace <SVPWM+0x2d6>
	else if(sector == 6)
 8001ab0:	7dfb      	ldrb	r3, [r7, #23]
 8001ab2:	2b06      	cmp	r3, #6
 8001ab4:	d10b      	bne.n	8001ace <SVPWM+0x2d6>
		*S1=T_gate[3];
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	68da      	ldr	r2, [r3, #12]
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	601a      	str	r2, [r3, #0]
		*S2=T_gate[0];
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ac4:	601a      	str	r2, [r3, #0]
		*S3=T_gate[1];
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	685a      	ldr	r2, [r3, #4]
 8001aca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001acc:	601a      	str	r2, [r3, #0]
}
 8001ace:	bf00      	nop
 8001ad0:	3718      	adds	r7, #24
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001ad8:	0f9096bc 	.word	0x0f9096bc
 8001adc:	402bb67a 	.word	0x402bb67a
 8001ae0:	33333333 	.word	0x33333333
 8001ae4:	3feb3333 	.word	0x3feb3333
 8001ae8:	a437824d 	.word	0xa437824d
 8001aec:	3ff0c151 	.word	0x3ff0c151
 8001af0:	447a0000 	.word	0x447a0000
 8001af4:	200003cc 	.word	0x200003cc
 8001af8:	20000348 	.word	0x20000348
 8001afc:	200002e8 	.word	0x200002e8

08001b00 <HAL_ADCEx_InjectedConvCpltCallback>:


void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001b00:	b590      	push	{r4, r7, lr}
 8001b02:	b095      	sub	sp, #84	; 0x54
 8001b04:	af02      	add	r7, sp, #8
 8001b06:	6078      	str	r0, [r7, #4]


	index_event_adc++;
 8001b08:	4b31      	ldr	r3, [pc, #196]	; (8001bd0 <HAL_ADCEx_InjectedConvCpltCallback+0xd0>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	4a30      	ldr	r2, [pc, #192]	; (8001bd0 <HAL_ADCEx_InjectedConvCpltCallback+0xd0>)
 8001b10:	6013      	str	r3, [r2, #0]
	adc_Ia= HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_1);
 8001b12:	2109      	movs	r1, #9
 8001b14:	482f      	ldr	r0, [pc, #188]	; (8001bd4 <HAL_ADCEx_InjectedConvCpltCallback+0xd4>)
 8001b16:	f002 f8b9 	bl	8003c8c <HAL_ADCEx_InjectedGetValue>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	4b2e      	ldr	r3, [pc, #184]	; (8001bd8 <HAL_ADCEx_InjectedConvCpltCallback+0xd8>)
 8001b20:	601a      	str	r2, [r3, #0]
    while((hadc1.Instance->ISR &= (0x1<<5))!=0){}
 8001b22:	bf00      	nop
 8001b24:	4b2b      	ldr	r3, [pc, #172]	; (8001bd4 <HAL_ADCEx_InjectedConvCpltCallback+0xd4>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a2a      	ldr	r2, [pc, #168]	; (8001bd4 <HAL_ADCEx_InjectedConvCpltCallback+0xd4>)
 8001b2c:	6812      	ldr	r2, [r2, #0]
 8001b2e:	f003 0320 	and.w	r3, r3, #32
 8001b32:	6013      	str	r3, [r2, #0]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d1f5      	bne.n	8001b24 <HAL_ADCEx_InjectedConvCpltCallback+0x24>
    adc_Ic =HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_2);
 8001b38:	f240 110f 	movw	r1, #271	; 0x10f
 8001b3c:	4825      	ldr	r0, [pc, #148]	; (8001bd4 <HAL_ADCEx_InjectedConvCpltCallback+0xd4>)
 8001b3e:	f002 f8a5 	bl	8003c8c <HAL_ADCEx_InjectedGetValue>
 8001b42:	4603      	mov	r3, r0
 8001b44:	461a      	mov	r2, r3
 8001b46:	4b25      	ldr	r3, [pc, #148]	; (8001bdc <HAL_ADCEx_InjectedConvCpltCallback+0xdc>)
 8001b48:	601a      	str	r2, [r3, #0]
	while((hadc1.Instance->ISR &= (0x1<<5))!=0){}
 8001b4a:	bf00      	nop
 8001b4c:	4b21      	ldr	r3, [pc, #132]	; (8001bd4 <HAL_ADCEx_InjectedConvCpltCallback+0xd4>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a20      	ldr	r2, [pc, #128]	; (8001bd4 <HAL_ADCEx_InjectedConvCpltCallback+0xd4>)
 8001b54:	6812      	ldr	r2, [r2, #0]
 8001b56:	f003 0320 	and.w	r3, r3, #32
 8001b5a:	6013      	str	r3, [r2, #0]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d1f5      	bne.n	8001b4c <HAL_ADCEx_InjectedConvCpltCallback+0x4c>
	adc_Ib =HAL_ADCEx_InjectedGetValue(&hadc2, ADC_INJECTED_RANK_1);
 8001b60:	2109      	movs	r1, #9
 8001b62:	481f      	ldr	r0, [pc, #124]	; (8001be0 <HAL_ADCEx_InjectedConvCpltCallback+0xe0>)
 8001b64:	f002 f892 	bl	8003c8c <HAL_ADCEx_InjectedGetValue>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	4b1d      	ldr	r3, [pc, #116]	; (8001be4 <HAL_ADCEx_InjectedConvCpltCallback+0xe4>)
 8001b6e:	601a      	str	r2, [r3, #0]
	while((hadc2.Instance->ISR &= (0x1<<5))!=0){}
 8001b70:	bf00      	nop
 8001b72:	4b1b      	ldr	r3, [pc, #108]	; (8001be0 <HAL_ADCEx_InjectedConvCpltCallback+0xe0>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a19      	ldr	r2, [pc, #100]	; (8001be0 <HAL_ADCEx_InjectedConvCpltCallback+0xe0>)
 8001b7a:	6812      	ldr	r2, [r2, #0]
 8001b7c:	f003 0320 	and.w	r3, r3, #32
 8001b80:	6013      	str	r3, [r2, #0]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d1f5      	bne.n	8001b72 <HAL_ADCEx_InjectedConvCpltCallback+0x72>
	//adc_V =HAL_ADCEx_InjectedGetValue(&hadc2, ADC_INJECTED_RANK_2);
	//while((hadc2.Instance->ISR &= (0x1<<5))!=0){}

	if(index_event_adc<300)
 8001b86:	4b12      	ldr	r3, [pc, #72]	; (8001bd0 <HAL_ADCEx_InjectedConvCpltCallback+0xd0>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001b8e:	d20c      	bcs.n	8001baa <HAL_ADCEx_InjectedConvCpltCallback+0xaa>
	{
		Ia=0;
 8001b90:	4b15      	ldr	r3, [pc, #84]	; (8001be8 <HAL_ADCEx_InjectedConvCpltCallback+0xe8>)
 8001b92:	f04f 0200 	mov.w	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]
		Ib=0;
 8001b98:	4b14      	ldr	r3, [pc, #80]	; (8001bec <HAL_ADCEx_InjectedConvCpltCallback+0xec>)
 8001b9a:	f04f 0200 	mov.w	r2, #0
 8001b9e:	601a      	str	r2, [r3, #0]
		Ic=0;
 8001ba0:	4b13      	ldr	r3, [pc, #76]	; (8001bf0 <HAL_ADCEx_InjectedConvCpltCallback+0xf0>)
 8001ba2:	f04f 0200 	mov.w	r2, #0
 8001ba6:	601a      	str	r2, [r3, #0]
 8001ba8:	e158      	b.n	8001e5c <HAL_ADCEx_InjectedConvCpltCallback+0x35c>


	}
	else if(index_event_adc == 300)
 8001baa:	4b09      	ldr	r3, [pc, #36]	; (8001bd0 <HAL_ADCEx_InjectedConvCpltCallback+0xd0>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001bb2:	d125      	bne.n	8001c00 <HAL_ADCEx_InjectedConvCpltCallback+0x100>
	{

			   offset1=adc_Ia;
 8001bb4:	4b08      	ldr	r3, [pc, #32]	; (8001bd8 <HAL_ADCEx_InjectedConvCpltCallback+0xd8>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a0e      	ldr	r2, [pc, #56]	; (8001bf4 <HAL_ADCEx_InjectedConvCpltCallback+0xf4>)
 8001bba:	6013      	str	r3, [r2, #0]
			   offset2=adc_Ib;
 8001bbc:	4b09      	ldr	r3, [pc, #36]	; (8001be4 <HAL_ADCEx_InjectedConvCpltCallback+0xe4>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a0d      	ldr	r2, [pc, #52]	; (8001bf8 <HAL_ADCEx_InjectedConvCpltCallback+0xf8>)
 8001bc2:	6013      	str	r3, [r2, #0]
			   offset3=adc_Ic;
 8001bc4:	4b05      	ldr	r3, [pc, #20]	; (8001bdc <HAL_ADCEx_InjectedConvCpltCallback+0xdc>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a0c      	ldr	r2, [pc, #48]	; (8001bfc <HAL_ADCEx_InjectedConvCpltCallback+0xfc>)
 8001bca:	6013      	str	r3, [r2, #0]
 8001bcc:	e146      	b.n	8001e5c <HAL_ADCEx_InjectedConvCpltCallback+0x35c>
 8001bce:	bf00      	nop
 8001bd0:	200003f4 	.word	0x200003f4
 8001bd4:	20000278 	.word	0x20000278
 8001bd8:	20000388 	.word	0x20000388
 8001bdc:	20000400 	.word	0x20000400
 8001be0:	2000020c 	.word	0x2000020c
 8001be4:	20000310 	.word	0x20000310
 8001be8:	200002f4 	.word	0x200002f4
 8001bec:	20000384 	.word	0x20000384
 8001bf0:	200003d4 	.word	0x200003d4
 8001bf4:	20000308 	.word	0x20000308
 8001bf8:	2000034c 	.word	0x2000034c
 8001bfc:	20000410 	.word	0x20000410
	{

	 //   sum_currents=(adc_Ia-offset1)+(adc_Ic-offset3)+(adc_Ib-offset2);


	    adc_Ia=(adc_Ia-offset1);
 8001c00:	4b9d      	ldr	r3, [pc, #628]	; (8001e78 <HAL_ADCEx_InjectedConvCpltCallback+0x378>)
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	4b9d      	ldr	r3, [pc, #628]	; (8001e7c <HAL_ADCEx_InjectedConvCpltCallback+0x37c>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	4a9b      	ldr	r2, [pc, #620]	; (8001e78 <HAL_ADCEx_InjectedConvCpltCallback+0x378>)
 8001c0c:	6013      	str	r3, [r2, #0]
	    adc_Ib=(adc_Ib-offset2);
 8001c0e:	4b9c      	ldr	r3, [pc, #624]	; (8001e80 <HAL_ADCEx_InjectedConvCpltCallback+0x380>)
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	4b9c      	ldr	r3, [pc, #624]	; (8001e84 <HAL_ADCEx_InjectedConvCpltCallback+0x384>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	4a99      	ldr	r2, [pc, #612]	; (8001e80 <HAL_ADCEx_InjectedConvCpltCallback+0x380>)
 8001c1a:	6013      	str	r3, [r2, #0]
	    adc_Ic=(adc_Ic-offset3);
 8001c1c:	4b9a      	ldr	r3, [pc, #616]	; (8001e88 <HAL_ADCEx_InjectedConvCpltCallback+0x388>)
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	4b9a      	ldr	r3, [pc, #616]	; (8001e8c <HAL_ADCEx_InjectedConvCpltCallback+0x38c>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	4a98      	ldr	r2, [pc, #608]	; (8001e88 <HAL_ADCEx_InjectedConvCpltCallback+0x388>)
 8001c28:	6013      	str	r3, [r2, #0]

	    Ia=-adc_Ia/33.0;
 8001c2a:	4b93      	ldr	r3, [pc, #588]	; (8001e78 <HAL_ADCEx_InjectedConvCpltCallback+0x378>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	425b      	negs	r3, r3
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7fe fc9f 	bl	8000574 <__aeabi_i2d>
 8001c36:	f04f 0200 	mov.w	r2, #0
 8001c3a:	4b95      	ldr	r3, [pc, #596]	; (8001e90 <HAL_ADCEx_InjectedConvCpltCallback+0x390>)
 8001c3c:	f7fe fe2e 	bl	800089c <__aeabi_ddiv>
 8001c40:	4603      	mov	r3, r0
 8001c42:	460c      	mov	r4, r1
 8001c44:	4618      	mov	r0, r3
 8001c46:	4621      	mov	r1, r4
 8001c48:	f7fe fff6 	bl	8000c38 <__aeabi_d2f>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	4b91      	ldr	r3, [pc, #580]	; (8001e94 <HAL_ADCEx_InjectedConvCpltCallback+0x394>)
 8001c50:	601a      	str	r2, [r3, #0]
	    Ib=-adc_Ib/33.0;
 8001c52:	4b8b      	ldr	r3, [pc, #556]	; (8001e80 <HAL_ADCEx_InjectedConvCpltCallback+0x380>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	425b      	negs	r3, r3
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7fe fc8b 	bl	8000574 <__aeabi_i2d>
 8001c5e:	f04f 0200 	mov.w	r2, #0
 8001c62:	4b8b      	ldr	r3, [pc, #556]	; (8001e90 <HAL_ADCEx_InjectedConvCpltCallback+0x390>)
 8001c64:	f7fe fe1a 	bl	800089c <__aeabi_ddiv>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	460c      	mov	r4, r1
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	4621      	mov	r1, r4
 8001c70:	f7fe ffe2 	bl	8000c38 <__aeabi_d2f>
 8001c74:	4602      	mov	r2, r0
 8001c76:	4b88      	ldr	r3, [pc, #544]	; (8001e98 <HAL_ADCEx_InjectedConvCpltCallback+0x398>)
 8001c78:	601a      	str	r2, [r3, #0]
	    Ic=-adc_Ic/33.0;
 8001c7a:	4b83      	ldr	r3, [pc, #524]	; (8001e88 <HAL_ADCEx_InjectedConvCpltCallback+0x388>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	425b      	negs	r3, r3
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7fe fc77 	bl	8000574 <__aeabi_i2d>
 8001c86:	f04f 0200 	mov.w	r2, #0
 8001c8a:	4b81      	ldr	r3, [pc, #516]	; (8001e90 <HAL_ADCEx_InjectedConvCpltCallback+0x390>)
 8001c8c:	f7fe fe06 	bl	800089c <__aeabi_ddiv>
 8001c90:	4603      	mov	r3, r0
 8001c92:	460c      	mov	r4, r1
 8001c94:	4618      	mov	r0, r3
 8001c96:	4621      	mov	r1, r4
 8001c98:	f7fe ffce 	bl	8000c38 <__aeabi_d2f>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	4b7f      	ldr	r3, [pc, #508]	; (8001e9c <HAL_ADCEx_InjectedConvCpltCallback+0x39c>)
 8001ca0:	601a      	str	r2, [r3, #0]


	        arm_clarke_f32(Ia, Ib, &Ialpha, &Ibeta);
 8001ca2:	4b7c      	ldr	r3, [pc, #496]	; (8001e94 <HAL_ADCEx_InjectedConvCpltCallback+0x394>)
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	4b7c      	ldr	r3, [pc, #496]	; (8001e98 <HAL_ADCEx_InjectedConvCpltCallback+0x398>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	617a      	str	r2, [r7, #20]
 8001cac:	613b      	str	r3, [r7, #16]
 8001cae:	4b7c      	ldr	r3, [pc, #496]	; (8001ea0 <HAL_ADCEx_InjectedConvCpltCallback+0x3a0>)
 8001cb0:	60fb      	str	r3, [r7, #12]
 8001cb2:	4b7c      	ldr	r3, [pc, #496]	; (8001ea4 <HAL_ADCEx_InjectedConvCpltCallback+0x3a4>)
 8001cb4:	60bb      	str	r3, [r7, #8]
    *pIalpha = Ia;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	697a      	ldr	r2, [r7, #20]
 8001cba:	601a      	str	r2, [r3, #0]
    *pIbeta = ((float32_t) 0.57735026919 * Ia + (float32_t) 1.15470053838 * Ib);
 8001cbc:	edd7 7a05 	vldr	s15, [r7, #20]
 8001cc0:	ed9f 7a79 	vldr	s14, [pc, #484]	; 8001ea8 <HAL_ADCEx_InjectedConvCpltCallback+0x3a8>
 8001cc4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001cc8:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ccc:	eddf 6a77 	vldr	s13, [pc, #476]	; 8001eac <HAL_ADCEx_InjectedConvCpltCallback+0x3ac>
 8001cd0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001cd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	edc3 7a00 	vstr	s15, [r3]
	    	angle_rotor_deg=TIM4->CCR1;
 8001cde:	4b74      	ldr	r3, [pc, #464]	; (8001eb0 <HAL_ADCEx_InjectedConvCpltCallback+0x3b0>)
 8001ce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ce2:	ee07 3a90 	vmov	s15, r3
 8001ce6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cea:	4b72      	ldr	r3, [pc, #456]	; (8001eb4 <HAL_ADCEx_InjectedConvCpltCallback+0x3b4>)
 8001cec:	edc3 7a00 	vstr	s15, [r3]
	    	arm_sin_cos_f32(angle_rotor_deg, &pSinVal, &pCosVal);
 8001cf0:	4b70      	ldr	r3, [pc, #448]	; (8001eb4 <HAL_ADCEx_InjectedConvCpltCallback+0x3b4>)
 8001cf2:	edd3 7a00 	vldr	s15, [r3]
 8001cf6:	4970      	ldr	r1, [pc, #448]	; (8001eb8 <HAL_ADCEx_InjectedConvCpltCallback+0x3b8>)
 8001cf8:	4870      	ldr	r0, [pc, #448]	; (8001ebc <HAL_ADCEx_InjectedConvCpltCallback+0x3bc>)
 8001cfa:	eeb0 0a67 	vmov.f32	s0, s15
 8001cfe:	f007 ffa9 	bl	8009c54 <arm_sin_cos_f32>
	    	arm_park_f32(Ialpha, Ibeta, &Id, &Iq, pSinVal, pCosVal);
 8001d02:	4b67      	ldr	r3, [pc, #412]	; (8001ea0 <HAL_ADCEx_InjectedConvCpltCallback+0x3a0>)
 8001d04:	6818      	ldr	r0, [r3, #0]
 8001d06:	4b67      	ldr	r3, [pc, #412]	; (8001ea4 <HAL_ADCEx_InjectedConvCpltCallback+0x3a4>)
 8001d08:	6819      	ldr	r1, [r3, #0]
 8001d0a:	4b6c      	ldr	r3, [pc, #432]	; (8001ebc <HAL_ADCEx_InjectedConvCpltCallback+0x3bc>)
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	4b6a      	ldr	r3, [pc, #424]	; (8001eb8 <HAL_ADCEx_InjectedConvCpltCallback+0x3b8>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	62f8      	str	r0, [r7, #44]	; 0x2c
 8001d14:	62b9      	str	r1, [r7, #40]	; 0x28
 8001d16:	496a      	ldr	r1, [pc, #424]	; (8001ec0 <HAL_ADCEx_InjectedConvCpltCallback+0x3c0>)
 8001d18:	6279      	str	r1, [r7, #36]	; 0x24
 8001d1a:	496a      	ldr	r1, [pc, #424]	; (8001ec4 <HAL_ADCEx_InjectedConvCpltCallback+0x3c4>)
 8001d1c:	6239      	str	r1, [r7, #32]
 8001d1e:	61fa      	str	r2, [r7, #28]
 8001d20:	61bb      	str	r3, [r7, #24]
    *pId = Ialpha * cosVal + Ibeta * sinVal;
 8001d22:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001d26:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d2a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d2e:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8001d32:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d36:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d40:	edc3 7a00 	vstr	s15, [r3]
    *pIq = -Ialpha * sinVal + Ibeta * cosVal;
 8001d44:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001d48:	eeb1 7a67 	vneg.f32	s14, s15
 8001d4c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d50:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d54:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8001d58:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d5c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d64:	6a3b      	ldr	r3, [r7, #32]
 8001d66:	edc3 7a00 	vstr	s15, [r3]
	    						Vq=(-sv_Vdc_limit);
	    						}
	    						**/
	   // 	angle_rotor_deg=TIM4->CCR1;
	    //	arm_sin_cos_f32(angle_rotor_deg, &pSinVal, &pCosVal);
	    	Vd=Id;
 8001d6a:	4b55      	ldr	r3, [pc, #340]	; (8001ec0 <HAL_ADCEx_InjectedConvCpltCallback+0x3c0>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a56      	ldr	r2, [pc, #344]	; (8001ec8 <HAL_ADCEx_InjectedConvCpltCallback+0x3c8>)
 8001d70:	6013      	str	r3, [r2, #0]
	    	Vq=Iq;
 8001d72:	4b54      	ldr	r3, [pc, #336]	; (8001ec4 <HAL_ADCEx_InjectedConvCpltCallback+0x3c4>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a55      	ldr	r2, [pc, #340]	; (8001ecc <HAL_ADCEx_InjectedConvCpltCallback+0x3cc>)
 8001d78:	6013      	str	r3, [r2, #0]
	    	arm_inv_park_f32(Vd, Vq, &Valpha, &Vbeta, pSinVal, pCosVal);
 8001d7a:	4b53      	ldr	r3, [pc, #332]	; (8001ec8 <HAL_ADCEx_InjectedConvCpltCallback+0x3c8>)
 8001d7c:	6818      	ldr	r0, [r3, #0]
 8001d7e:	4b53      	ldr	r3, [pc, #332]	; (8001ecc <HAL_ADCEx_InjectedConvCpltCallback+0x3cc>)
 8001d80:	6819      	ldr	r1, [r3, #0]
 8001d82:	4b4e      	ldr	r3, [pc, #312]	; (8001ebc <HAL_ADCEx_InjectedConvCpltCallback+0x3bc>)
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	4b4c      	ldr	r3, [pc, #304]	; (8001eb8 <HAL_ADCEx_InjectedConvCpltCallback+0x3b8>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	6478      	str	r0, [r7, #68]	; 0x44
 8001d8c:	6439      	str	r1, [r7, #64]	; 0x40
 8001d8e:	4950      	ldr	r1, [pc, #320]	; (8001ed0 <HAL_ADCEx_InjectedConvCpltCallback+0x3d0>)
 8001d90:	63f9      	str	r1, [r7, #60]	; 0x3c
 8001d92:	4950      	ldr	r1, [pc, #320]	; (8001ed4 <HAL_ADCEx_InjectedConvCpltCallback+0x3d4>)
 8001d94:	63b9      	str	r1, [r7, #56]	; 0x38
 8001d96:	637a      	str	r2, [r7, #52]	; 0x34
 8001d98:	633b      	str	r3, [r7, #48]	; 0x30
    *pIalpha = Id * cosVal - Iq * sinVal;
 8001d9a:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8001d9e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001da2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001da6:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8001daa:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001dae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001db2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001db6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001db8:	edc3 7a00 	vstr	s15, [r3]
    *pIbeta = Id * sinVal + Iq * cosVal;
 8001dbc:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8001dc0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001dc4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001dc8:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8001dcc:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001dd0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001dda:	edc3 7a00 	vstr	s15, [r3]

	    	AlphaBeta_To_Angle_Vref(Valpha, Vbeta, &angle_current_rad, &Vref);
 8001dde:	4b3c      	ldr	r3, [pc, #240]	; (8001ed0 <HAL_ADCEx_InjectedConvCpltCallback+0x3d0>)
 8001de0:	edd3 7a00 	vldr	s15, [r3]
 8001de4:	4b3b      	ldr	r3, [pc, #236]	; (8001ed4 <HAL_ADCEx_InjectedConvCpltCallback+0x3d4>)
 8001de6:	ed93 7a00 	vldr	s14, [r3]
 8001dea:	493b      	ldr	r1, [pc, #236]	; (8001ed8 <HAL_ADCEx_InjectedConvCpltCallback+0x3d8>)
 8001dec:	483b      	ldr	r0, [pc, #236]	; (8001edc <HAL_ADCEx_InjectedConvCpltCallback+0x3dc>)
 8001dee:	eef0 0a47 	vmov.f32	s1, s14
 8001df2:	eeb0 0a67 	vmov.f32	s0, s15
 8001df6:	f7ff fbef 	bl	80015d8 <AlphaBeta_To_Angle_Vref>
	    	angle_current_deg=57.2957*angle_current_rad;
 8001dfa:	4b38      	ldr	r3, [pc, #224]	; (8001edc <HAL_ADCEx_InjectedConvCpltCallback+0x3dc>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7fe fbca 	bl	8000598 <__aeabi_f2d>
 8001e04:	a31a      	add	r3, pc, #104	; (adr r3, 8001e70 <HAL_ADCEx_InjectedConvCpltCallback+0x370>)
 8001e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e0a:	f7fe fc1d 	bl	8000648 <__aeabi_dmul>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	460c      	mov	r4, r1
 8001e12:	4618      	mov	r0, r3
 8001e14:	4621      	mov	r1, r4
 8001e16:	f7fe ff0f 	bl	8000c38 <__aeabi_d2f>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	4b30      	ldr	r3, [pc, #192]	; (8001ee0 <HAL_ADCEx_InjectedConvCpltCallback+0x3e0>)
 8001e1e:	601a      	str	r2, [r3, #0]
	    	Angle_To_Sector(angle_current_rad, &sector);
 8001e20:	4b2e      	ldr	r3, [pc, #184]	; (8001edc <HAL_ADCEx_InjectedConvCpltCallback+0x3dc>)
 8001e22:	edd3 7a00 	vldr	s15, [r3]
 8001e26:	482f      	ldr	r0, [pc, #188]	; (8001ee4 <HAL_ADCEx_InjectedConvCpltCallback+0x3e4>)
 8001e28:	eeb0 0a67 	vmov.f32	s0, s15
 8001e2c:	f7ff fc2c 	bl	8001688 <Angle_To_Sector>
	    	SVPWM(sector, angle_current_rad , Vref, sv_T, sv_T_gate, &sv_S1, &sv_S2, &sv_S3);
 8001e30:	4b2c      	ldr	r3, [pc, #176]	; (8001ee4 <HAL_ADCEx_InjectedConvCpltCallback+0x3e4>)
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	b2d8      	uxtb	r0, r3
 8001e36:	4b29      	ldr	r3, [pc, #164]	; (8001edc <HAL_ADCEx_InjectedConvCpltCallback+0x3dc>)
 8001e38:	edd3 7a00 	vldr	s15, [r3]
 8001e3c:	4b26      	ldr	r3, [pc, #152]	; (8001ed8 <HAL_ADCEx_InjectedConvCpltCallback+0x3d8>)
 8001e3e:	ed93 7a00 	vldr	s14, [r3]
 8001e42:	4b29      	ldr	r3, [pc, #164]	; (8001ee8 <HAL_ADCEx_InjectedConvCpltCallback+0x3e8>)
 8001e44:	9301      	str	r3, [sp, #4]
 8001e46:	4b29      	ldr	r3, [pc, #164]	; (8001eec <HAL_ADCEx_InjectedConvCpltCallback+0x3ec>)
 8001e48:	9300      	str	r3, [sp, #0]
 8001e4a:	4b29      	ldr	r3, [pc, #164]	; (8001ef0 <HAL_ADCEx_InjectedConvCpltCallback+0x3f0>)
 8001e4c:	4a29      	ldr	r2, [pc, #164]	; (8001ef4 <HAL_ADCEx_InjectedConvCpltCallback+0x3f4>)
 8001e4e:	492a      	ldr	r1, [pc, #168]	; (8001ef8 <HAL_ADCEx_InjectedConvCpltCallback+0x3f8>)
 8001e50:	eef0 0a47 	vmov.f32	s1, s14
 8001e54:	eeb0 0a67 	vmov.f32	s0, s15
 8001e58:	f7ff fcce 	bl	80017f8 <SVPWM>
	    	//Ic=0;
	}



	 HAL_ADCEx_InjectedStart_IT(&hadc1);
 8001e5c:	4827      	ldr	r0, [pc, #156]	; (8001efc <HAL_ADCEx_InjectedConvCpltCallback+0x3fc>)
 8001e5e:	f001 fe2f 	bl	8003ac0 <HAL_ADCEx_InjectedStart_IT>
	 HAL_ADCEx_InjectedStart_IT(&hadc2);
 8001e62:	4827      	ldr	r0, [pc, #156]	; (8001f00 <HAL_ADCEx_InjectedConvCpltCallback+0x400>)
 8001e64:	f001 fe2c 	bl	8003ac0 <HAL_ADCEx_InjectedStart_IT>

}
 8001e68:	bf00      	nop
 8001e6a:	374c      	adds	r7, #76	; 0x4c
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd90      	pop	{r4, r7, pc}
 8001e70:	7f62b6ae 	.word	0x7f62b6ae
 8001e74:	404ca5d9 	.word	0x404ca5d9
 8001e78:	20000388 	.word	0x20000388
 8001e7c:	20000308 	.word	0x20000308
 8001e80:	20000310 	.word	0x20000310
 8001e84:	2000034c 	.word	0x2000034c
 8001e88:	20000400 	.word	0x20000400
 8001e8c:	20000410 	.word	0x20000410
 8001e90:	40408000 	.word	0x40408000
 8001e94:	200002f4 	.word	0x200002f4
 8001e98:	20000384 	.word	0x20000384
 8001e9c:	200003d4 	.word	0x200003d4
 8001ea0:	200003d0 	.word	0x200003d0
 8001ea4:	200003c4 	.word	0x200003c4
 8001ea8:	3f13cd3a 	.word	0x3f13cd3a
 8001eac:	3f93cd3a 	.word	0x3f93cd3a
 8001eb0:	40000800 	.word	0x40000800
 8001eb4:	200002f0 	.word	0x200002f0
 8001eb8:	2000041c 	.word	0x2000041c
 8001ebc:	20000370 	.word	0x20000370
 8001ec0:	20000350 	.word	0x20000350
 8001ec4:	200003e8 	.word	0x200003e8
 8001ec8:	20000340 	.word	0x20000340
 8001ecc:	20000354 	.word	0x20000354
 8001ed0:	20000414 	.word	0x20000414
 8001ed4:	20000390 	.word	0x20000390
 8001ed8:	200003bc 	.word	0x200003bc
 8001edc:	20000380 	.word	0x20000380
 8001ee0:	200003fc 	.word	0x200003fc
 8001ee4:	2000038c 	.word	0x2000038c
 8001ee8:	2000030c 	.word	0x2000030c
 8001eec:	20000344 	.word	0x20000344
 8001ef0:	20000364 	.word	0x20000364
 8001ef4:	200002f8 	.word	0x200002f8
 8001ef8:	20000358 	.word	0x20000358
 8001efc:	20000278 	.word	0x20000278
 8001f00:	2000020c 	.word	0x2000020c

08001f04 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==GPIO_PIN_10)
 8001f0e:	88fb      	ldrh	r3, [r7, #6]
 8001f10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f14:	d16c      	bne.n	8001ff0 <HAL_GPIO_EXTI_Callback+0xec>
	{
		licznik++;
 8001f16:	4b39      	ldr	r3, [pc, #228]	; (8001ffc <HAL_GPIO_EXTI_Callback+0xf8>)
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	b2da      	uxtb	r2, r3
 8001f20:	4b36      	ldr	r3, [pc, #216]	; (8001ffc <HAL_GPIO_EXTI_Callback+0xf8>)
 8001f22:	701a      	strb	r2, [r3, #0]
		switch (licznik)
 8001f24:	4b35      	ldr	r3, [pc, #212]	; (8001ffc <HAL_GPIO_EXTI_Callback+0xf8>)
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	3b01      	subs	r3, #1
 8001f2c:	2b06      	cmp	r3, #6
 8001f2e:	d857      	bhi.n	8001fe0 <HAL_GPIO_EXTI_Callback+0xdc>
 8001f30:	a201      	add	r2, pc, #4	; (adr r2, 8001f38 <HAL_GPIO_EXTI_Callback+0x34>)
 8001f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f36:	bf00      	nop
 8001f38:	08001fb9 	.word	0x08001fb9
 8001f3c:	08001f55 	.word	0x08001f55
 8001f40:	08001f69 	.word	0x08001f69
 8001f44:	08001f7d 	.word	0x08001f7d
 8001f48:	08001f91 	.word	0x08001f91
 8001f4c:	08001fa5 	.word	0x08001fa5
 8001f50:	08001fcd 	.word	0x08001fcd
		{

								case 2:
									TIM1->CCR1=duty;
 8001f54:	4b2a      	ldr	r3, [pc, #168]	; (8002000 <HAL_GPIO_EXTI_Callback+0xfc>)
 8001f56:	2278      	movs	r2, #120	; 0x78
 8001f58:	635a      	str	r2, [r3, #52]	; 0x34
									TIM1->CCR2=duty;
 8001f5a:	4b29      	ldr	r3, [pc, #164]	; (8002000 <HAL_GPIO_EXTI_Callback+0xfc>)
 8001f5c:	2278      	movs	r2, #120	; 0x78
 8001f5e:	639a      	str	r2, [r3, #56]	; 0x38
									TIM1->CCR3=0;
 8001f60:	4b27      	ldr	r3, [pc, #156]	; (8002000 <HAL_GPIO_EXTI_Callback+0xfc>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	63da      	str	r2, [r3, #60]	; 0x3c



							    break;
 8001f66:	e03b      	b.n	8001fe0 <HAL_GPIO_EXTI_Callback+0xdc>

								case 3:
									TIM1->CCR1=0;
 8001f68:	4b25      	ldr	r3, [pc, #148]	; (8002000 <HAL_GPIO_EXTI_Callback+0xfc>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	635a      	str	r2, [r3, #52]	; 0x34
									TIM1->CCR2=duty;
 8001f6e:	4b24      	ldr	r3, [pc, #144]	; (8002000 <HAL_GPIO_EXTI_Callback+0xfc>)
 8001f70:	2278      	movs	r2, #120	; 0x78
 8001f72:	639a      	str	r2, [r3, #56]	; 0x38
									TIM1->CCR3=0;
 8001f74:	4b22      	ldr	r3, [pc, #136]	; (8002000 <HAL_GPIO_EXTI_Callback+0xfc>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	63da      	str	r2, [r3, #60]	; 0x3c


							    break;
 8001f7a:	e031      	b.n	8001fe0 <HAL_GPIO_EXTI_Callback+0xdc>

								case 4:
									TIM1->CCR1=0;
 8001f7c:	4b20      	ldr	r3, [pc, #128]	; (8002000 <HAL_GPIO_EXTI_Callback+0xfc>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	635a      	str	r2, [r3, #52]	; 0x34
									TIM1->CCR2=duty;
 8001f82:	4b1f      	ldr	r3, [pc, #124]	; (8002000 <HAL_GPIO_EXTI_Callback+0xfc>)
 8001f84:	2278      	movs	r2, #120	; 0x78
 8001f86:	639a      	str	r2, [r3, #56]	; 0x38
									TIM1->CCR3=duty;
 8001f88:	4b1d      	ldr	r3, [pc, #116]	; (8002000 <HAL_GPIO_EXTI_Callback+0xfc>)
 8001f8a:	2278      	movs	r2, #120	; 0x78
 8001f8c:	63da      	str	r2, [r3, #60]	; 0x3c


							    break;
 8001f8e:	e027      	b.n	8001fe0 <HAL_GPIO_EXTI_Callback+0xdc>

							    case 5:
							    	TIM1->CCR1=0;
 8001f90:	4b1b      	ldr	r3, [pc, #108]	; (8002000 <HAL_GPIO_EXTI_Callback+0xfc>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	635a      	str	r2, [r3, #52]	; 0x34
							    	TIM1->CCR2=0;
 8001f96:	4b1a      	ldr	r3, [pc, #104]	; (8002000 <HAL_GPIO_EXTI_Callback+0xfc>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	639a      	str	r2, [r3, #56]	; 0x38
							    	TIM1->CCR3=duty;
 8001f9c:	4b18      	ldr	r3, [pc, #96]	; (8002000 <HAL_GPIO_EXTI_Callback+0xfc>)
 8001f9e:	2278      	movs	r2, #120	; 0x78
 8001fa0:	63da      	str	r2, [r3, #60]	; 0x3c


								break;
 8001fa2:	e01d      	b.n	8001fe0 <HAL_GPIO_EXTI_Callback+0xdc>

							    case 6:
							    	TIM1->CCR1=duty;
 8001fa4:	4b16      	ldr	r3, [pc, #88]	; (8002000 <HAL_GPIO_EXTI_Callback+0xfc>)
 8001fa6:	2278      	movs	r2, #120	; 0x78
 8001fa8:	635a      	str	r2, [r3, #52]	; 0x34
							    	TIM1->CCR2=0;
 8001faa:	4b15      	ldr	r3, [pc, #84]	; (8002000 <HAL_GPIO_EXTI_Callback+0xfc>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	639a      	str	r2, [r3, #56]	; 0x38
							    	TIM1->CCR3=duty;
 8001fb0:	4b13      	ldr	r3, [pc, #76]	; (8002000 <HAL_GPIO_EXTI_Callback+0xfc>)
 8001fb2:	2278      	movs	r2, #120	; 0x78
 8001fb4:	63da      	str	r2, [r3, #60]	; 0x3c


							    break;
 8001fb6:	e013      	b.n	8001fe0 <HAL_GPIO_EXTI_Callback+0xdc>

							    case 1:
							    TIM1->CCR1=duty;
 8001fb8:	4b11      	ldr	r3, [pc, #68]	; (8002000 <HAL_GPIO_EXTI_Callback+0xfc>)
 8001fba:	2278      	movs	r2, #120	; 0x78
 8001fbc:	635a      	str	r2, [r3, #52]	; 0x34
							    TIM1->CCR2=0;
 8001fbe:	4b10      	ldr	r3, [pc, #64]	; (8002000 <HAL_GPIO_EXTI_Callback+0xfc>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	639a      	str	r2, [r3, #56]	; 0x38
							    TIM1->CCR3=0;
 8001fc4:	4b0e      	ldr	r3, [pc, #56]	; (8002000 <HAL_GPIO_EXTI_Callback+0xfc>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	63da      	str	r2, [r3, #60]	; 0x3c
							    break;
 8001fca:	e009      	b.n	8001fe0 <HAL_GPIO_EXTI_Callback+0xdc>

							    case 7:
							  							    TIM1->CCR1=0;
 8001fcc:	4b0c      	ldr	r3, [pc, #48]	; (8002000 <HAL_GPIO_EXTI_Callback+0xfc>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	635a      	str	r2, [r3, #52]	; 0x34
							  							    TIM1->CCR2=0;
 8001fd2:	4b0b      	ldr	r3, [pc, #44]	; (8002000 <HAL_GPIO_EXTI_Callback+0xfc>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	639a      	str	r2, [r3, #56]	; 0x38
							  							    TIM1->CCR3=0;
 8001fd8:	4b09      	ldr	r3, [pc, #36]	; (8002000 <HAL_GPIO_EXTI_Callback+0xfc>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	63da      	str	r2, [r3, #60]	; 0x3c
							  							    break;
 8001fde:	bf00      	nop





								if(licznik>7)
 8001fe0:	4b06      	ldr	r3, [pc, #24]	; (8001ffc <HAL_GPIO_EXTI_Callback+0xf8>)
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	2b07      	cmp	r3, #7
 8001fe8:	d902      	bls.n	8001ff0 <HAL_GPIO_EXTI_Callback+0xec>
								licznik=0;
 8001fea:	4b04      	ldr	r3, [pc, #16]	; (8001ffc <HAL_GPIO_EXTI_Callback+0xf8>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	701a      	strb	r2, [r3, #0]




	}
}
 8001ff0:	bf00      	nop
 8001ff2:	370c      	adds	r7, #12
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr
 8001ffc:	200003e4 	.word	0x200003e4
 8002000:	40012c00 	.word	0x40012c00

08002004 <HAL_UART_RxCpltCallback>:
	}

}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART2)
	{
		//HAL_UART_Receive_IT(&huart2, &recive, 1);

	}
}
 800200c:	bf00      	nop
 800200e:	370c      	adds	r7, #12
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr

08002018 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800201c:	f000 fd3b 	bl	8002a96 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002020:	f000 f815 	bl	800204e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002024:	f7ff f994 	bl	8001350 <MX_GPIO_Init>
  MX_TIM1_Init();
 8002028:	f000 fa42 	bl	80024b0 <MX_TIM1_Init>
  MX_TIM4_Init();
 800202c:	f000 fb20 	bl	8002670 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8002030:	f000 fc70 	bl	8002914 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8002034:	f7fe ffd0 	bl	8000fd8 <MX_ADC1_Init>
  MX_ADC2_Init();
 8002038:	f7ff f86a 	bl	8001110 <MX_ADC2_Init>
  MX_OPAMP1_Init();
 800203c:	f000 f874 	bl	8002128 <MX_OPAMP1_Init>
  MX_OPAMP2_Init();
 8002040:	f000 f8a0 	bl	8002184 <MX_OPAMP2_Init>
  MX_OPAMP3_Init();
 8002044:	f000 f8cc 	bl	80021e0 <MX_OPAMP3_Init>
  /* USER CODE BEGIN 2 */


    start_up();
 8002048:	f7ff f9ee 	bl	8001428 <start_up>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800204c:	e7fe      	b.n	800204c <main+0x34>

0800204e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800204e:	b580      	push	{r7, lr}
 8002050:	b0a4      	sub	sp, #144	; 0x90
 8002052:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002054:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002058:	2238      	movs	r2, #56	; 0x38
 800205a:	2100      	movs	r1, #0
 800205c:	4618      	mov	r0, r3
 800205e:	f008 f829 	bl	800a0b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002062:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002066:	2200      	movs	r2, #0
 8002068:	601a      	str	r2, [r3, #0]
 800206a:	605a      	str	r2, [r3, #4]
 800206c:	609a      	str	r2, [r3, #8]
 800206e:	60da      	str	r2, [r3, #12]
 8002070:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002072:	463b      	mov	r3, r7
 8002074:	2244      	movs	r2, #68	; 0x44
 8002076:	2100      	movs	r1, #0
 8002078:	4618      	mov	r0, r3
 800207a:	f008 f81b 	bl	800a0b4 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800207e:	2000      	movs	r0, #0
 8002080:	f003 fa5c 	bl	800553c <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002084:	2301      	movs	r3, #1
 8002086:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002088:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800208c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800208e:	2302      	movs	r3, #2
 8002090:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002092:	2303      	movs	r3, #3
 8002094:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8002096:	2302      	movs	r3, #2
 8002098:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 80;
 800209a:	2350      	movs	r3, #80	; 0x50
 800209c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80020a0:	2302      	movs	r3, #2
 80020a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80020a6:	2302      	movs	r3, #2
 80020a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80020ac:	2302      	movs	r3, #2
 80020ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020b2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80020b6:	4618      	mov	r0, r3
 80020b8:	f003 fae4 	bl	8005684 <HAL_RCC_OscConfig>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d001      	beq.n	80020c6 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80020c2:	f000 f82a 	bl	800211a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020c6:	230f      	movs	r3, #15
 80020c8:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80020ca:	2303      	movs	r3, #3
 80020cc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020ce:	2300      	movs	r3, #0
 80020d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80020d2:	2300      	movs	r3, #0
 80020d4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80020d6:	2300      	movs	r3, #0
 80020d8:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80020da:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80020de:	2107      	movs	r1, #7
 80020e0:	4618      	mov	r0, r3
 80020e2:	f003 fde7 	bl	8005cb4 <HAL_RCC_ClockConfig>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d001      	beq.n	80020f0 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80020ec:	f000 f815 	bl	800211a <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12;
 80020f0:	f248 0302 	movw	r3, #32770	; 0x8002
 80020f4:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80020f6:	2300      	movs	r3, #0
 80020f8:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80020fa:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80020fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002100:	463b      	mov	r3, r7
 8002102:	4618      	mov	r0, r3
 8002104:	f003 fff2 	bl	80060ec <HAL_RCCEx_PeriphCLKConfig>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d001      	beq.n	8002112 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800210e:	f000 f804 	bl	800211a <Error_Handler>
  }
}
 8002112:	bf00      	nop
 8002114:	3790      	adds	r7, #144	; 0x90
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}

0800211a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800211a:	b480      	push	{r7}
 800211c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800211e:	bf00      	nop
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr

08002128 <MX_OPAMP1_Init>:
OPAMP_HandleTypeDef hopamp2;
OPAMP_HandleTypeDef hopamp3;

/* OPAMP1 init function */
void MX_OPAMP1_Init(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0

  hopamp1.Instance = OPAMP1;
 800212c:	4b13      	ldr	r3, [pc, #76]	; (800217c <MX_OPAMP1_Init+0x54>)
 800212e:	4a14      	ldr	r2, [pc, #80]	; (8002180 <MX_OPAMP1_Init+0x58>)
 8002130:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_NORMAL;
 8002132:	4b12      	ldr	r3, [pc, #72]	; (800217c <MX_OPAMP1_Init+0x54>)
 8002134:	2200      	movs	r2, #0
 8002136:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_PGA_MODE;
 8002138:	4b10      	ldr	r3, [pc, #64]	; (800217c <MX_OPAMP1_Init+0x54>)
 800213a:	2240      	movs	r2, #64	; 0x40
 800213c:	609a      	str	r2, [r3, #8]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 800213e:	4b0f      	ldr	r3, [pc, #60]	; (800217c <MX_OPAMP1_Init+0x54>)
 8002140:	2200      	movs	r2, #0
 8002142:	611a      	str	r2, [r3, #16]
  hopamp1.Init.InternalOutput = DISABLE;
 8002144:	4b0d      	ldr	r3, [pc, #52]	; (800217c <MX_OPAMP1_Init+0x54>)
 8002146:	2200      	movs	r2, #0
 8002148:	751a      	strb	r2, [r3, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 800214a:	4b0c      	ldr	r3, [pc, #48]	; (800217c <MX_OPAMP1_Init+0x54>)
 800214c:	2200      	movs	r2, #0
 800214e:	619a      	str	r2, [r3, #24]
  hopamp1.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 8002150:	4b0a      	ldr	r3, [pc, #40]	; (800217c <MX_OPAMP1_Init+0x54>)
 8002152:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002156:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8002158:	4b08      	ldr	r3, [pc, #32]	; (800217c <MX_OPAMP1_Init+0x54>)
 800215a:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800215e:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8002160:	4b06      	ldr	r3, [pc, #24]	; (800217c <MX_OPAMP1_Init+0x54>)
 8002162:	2200      	movs	r2, #0
 8002164:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 8002166:	4805      	ldr	r0, [pc, #20]	; (800217c <MX_OPAMP1_Init+0x54>)
 8002168:	f002 fdf2 	bl	8004d50 <HAL_OPAMP_Init>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <MX_OPAMP1_Init+0x4e>
  {
    Error_Handler();
 8002172:	f7ff ffd2 	bl	800211a <Error_Handler>
  }

}
 8002176:	bf00      	nop
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	2000049c 	.word	0x2000049c
 8002180:	40010300 	.word	0x40010300

08002184 <MX_OPAMP2_Init>:
/* OPAMP2 init function */
void MX_OPAMP2_Init(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0

  hopamp2.Instance = OPAMP2;
 8002188:	4b13      	ldr	r3, [pc, #76]	; (80021d8 <MX_OPAMP2_Init+0x54>)
 800218a:	4a14      	ldr	r2, [pc, #80]	; (80021dc <MX_OPAMP2_Init+0x58>)
 800218c:	601a      	str	r2, [r3, #0]
  hopamp2.Init.PowerMode = OPAMP_POWERMODE_NORMAL;
 800218e:	4b12      	ldr	r3, [pc, #72]	; (80021d8 <MX_OPAMP2_Init+0x54>)
 8002190:	2200      	movs	r2, #0
 8002192:	605a      	str	r2, [r3, #4]
  hopamp2.Init.Mode = OPAMP_PGA_MODE;
 8002194:	4b10      	ldr	r3, [pc, #64]	; (80021d8 <MX_OPAMP2_Init+0x54>)
 8002196:	2240      	movs	r2, #64	; 0x40
 8002198:	609a      	str	r2, [r3, #8]
  hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 800219a:	4b0f      	ldr	r3, [pc, #60]	; (80021d8 <MX_OPAMP2_Init+0x54>)
 800219c:	2200      	movs	r2, #0
 800219e:	611a      	str	r2, [r3, #16]
  hopamp2.Init.InternalOutput = DISABLE;
 80021a0:	4b0d      	ldr	r3, [pc, #52]	; (80021d8 <MX_OPAMP2_Init+0x54>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	751a      	strb	r2, [r3, #20]
  hopamp2.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 80021a6:	4b0c      	ldr	r3, [pc, #48]	; (80021d8 <MX_OPAMP2_Init+0x54>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	619a      	str	r2, [r3, #24]
  hopamp2.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 80021ac:	4b0a      	ldr	r3, [pc, #40]	; (80021d8 <MX_OPAMP2_Init+0x54>)
 80021ae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80021b2:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp2.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 80021b4:	4b08      	ldr	r3, [pc, #32]	; (80021d8 <MX_OPAMP2_Init+0x54>)
 80021b6:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80021ba:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp2.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80021bc:	4b06      	ldr	r3, [pc, #24]	; (80021d8 <MX_OPAMP2_Init+0x54>)
 80021be:	2200      	movs	r2, #0
 80021c0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 80021c2:	4805      	ldr	r0, [pc, #20]	; (80021d8 <MX_OPAMP2_Init+0x54>)
 80021c4:	f002 fdc4 	bl	8004d50 <HAL_OPAMP_Init>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d001      	beq.n	80021d2 <MX_OPAMP2_Init+0x4e>
  {
    Error_Handler();
 80021ce:	f7ff ffa4 	bl	800211a <Error_Handler>
  }

}
 80021d2:	bf00      	nop
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	20000424 	.word	0x20000424
 80021dc:	40010304 	.word	0x40010304

080021e0 <MX_OPAMP3_Init>:
/* OPAMP3 init function */
void MX_OPAMP3_Init(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0

  hopamp3.Instance = OPAMP3;
 80021e4:	4b13      	ldr	r3, [pc, #76]	; (8002234 <MX_OPAMP3_Init+0x54>)
 80021e6:	4a14      	ldr	r2, [pc, #80]	; (8002238 <MX_OPAMP3_Init+0x58>)
 80021e8:	601a      	str	r2, [r3, #0]
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_NORMAL;
 80021ea:	4b12      	ldr	r3, [pc, #72]	; (8002234 <MX_OPAMP3_Init+0x54>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	605a      	str	r2, [r3, #4]
  hopamp3.Init.Mode = OPAMP_PGA_MODE;
 80021f0:	4b10      	ldr	r3, [pc, #64]	; (8002234 <MX_OPAMP3_Init+0x54>)
 80021f2:	2240      	movs	r2, #64	; 0x40
 80021f4:	609a      	str	r2, [r3, #8]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 80021f6:	4b0f      	ldr	r3, [pc, #60]	; (8002234 <MX_OPAMP3_Init+0x54>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	611a      	str	r2, [r3, #16]
  hopamp3.Init.InternalOutput = DISABLE;
 80021fc:	4b0d      	ldr	r3, [pc, #52]	; (8002234 <MX_OPAMP3_Init+0x54>)
 80021fe:	2200      	movs	r2, #0
 8002200:	751a      	strb	r2, [r3, #20]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8002202:	4b0c      	ldr	r3, [pc, #48]	; (8002234 <MX_OPAMP3_Init+0x54>)
 8002204:	2200      	movs	r2, #0
 8002206:	619a      	str	r2, [r3, #24]
  hopamp3.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 8002208:	4b0a      	ldr	r3, [pc, #40]	; (8002234 <MX_OPAMP3_Init+0x54>)
 800220a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800220e:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp3.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8002210:	4b08      	ldr	r3, [pc, #32]	; (8002234 <MX_OPAMP3_Init+0x54>)
 8002212:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8002216:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8002218:	4b06      	ldr	r3, [pc, #24]	; (8002234 <MX_OPAMP3_Init+0x54>)
 800221a:	2200      	movs	r2, #0
 800221c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 800221e:	4805      	ldr	r0, [pc, #20]	; (8002234 <MX_OPAMP3_Init+0x54>)
 8002220:	f002 fd96 	bl	8004d50 <HAL_OPAMP_Init>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d001      	beq.n	800222e <MX_OPAMP3_Init+0x4e>
  {
    Error_Handler();
 800222a:	f7ff ff76 	bl	800211a <Error_Handler>
  }

}
 800222e:	bf00      	nop
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	20000460 	.word	0x20000460
 8002238:	40010308 	.word	0x40010308

0800223c <HAL_OPAMP_MspInit>:

void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* opampHandle)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b08a      	sub	sp, #40	; 0x28
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002244:	f107 0314 	add.w	r3, r7, #20
 8002248:	2200      	movs	r2, #0
 800224a:	601a      	str	r2, [r3, #0]
 800224c:	605a      	str	r2, [r3, #4]
 800224e:	609a      	str	r2, [r3, #8]
 8002250:	60da      	str	r2, [r3, #12]
 8002252:	611a      	str	r2, [r3, #16]
  if(opampHandle->Instance==OPAMP1)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a2e      	ldr	r2, [pc, #184]	; (8002314 <HAL_OPAMP_MspInit+0xd8>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d119      	bne.n	8002292 <HAL_OPAMP_MspInit+0x56>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800225e:	4b2e      	ldr	r3, [pc, #184]	; (8002318 <HAL_OPAMP_MspInit+0xdc>)
 8002260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002262:	4a2d      	ldr	r2, [pc, #180]	; (8002318 <HAL_OPAMP_MspInit+0xdc>)
 8002264:	f043 0301 	orr.w	r3, r3, #1
 8002268:	64d3      	str	r3, [r2, #76]	; 0x4c
 800226a:	4b2b      	ldr	r3, [pc, #172]	; (8002318 <HAL_OPAMP_MspInit+0xdc>)
 800226c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800226e:	f003 0301 	and.w	r3, r3, #1
 8002272:	613b      	str	r3, [r7, #16]
 8002274:	693b      	ldr	r3, [r7, #16]
    /**OPAMP1 GPIO Configuration    
    PA1     ------> OPAMP1_VINP
    PA2     ------> OPAMP1_VOUT
    PA3     ------> OPAMP1_VINM 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002276:	230e      	movs	r3, #14
 8002278:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800227a:	2303      	movs	r3, #3
 800227c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800227e:	2300      	movs	r3, #0
 8002280:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002282:	f107 0314 	add.w	r3, r7, #20
 8002286:	4619      	mov	r1, r3
 8002288:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800228c:	f002 fbc6 	bl	8004a1c <HAL_GPIO_Init>

  /* USER CODE BEGIN OPAMP3_MspInit 1 */

  /* USER CODE END OPAMP3_MspInit 1 */
  }
}
 8002290:	e03b      	b.n	800230a <HAL_OPAMP_MspInit+0xce>
  else if(opampHandle->Instance==OPAMP2)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a21      	ldr	r2, [pc, #132]	; (800231c <HAL_OPAMP_MspInit+0xe0>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d119      	bne.n	80022d0 <HAL_OPAMP_MspInit+0x94>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800229c:	4b1e      	ldr	r3, [pc, #120]	; (8002318 <HAL_OPAMP_MspInit+0xdc>)
 800229e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022a0:	4a1d      	ldr	r2, [pc, #116]	; (8002318 <HAL_OPAMP_MspInit+0xdc>)
 80022a2:	f043 0301 	orr.w	r3, r3, #1
 80022a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022a8:	4b1b      	ldr	r3, [pc, #108]	; (8002318 <HAL_OPAMP_MspInit+0xdc>)
 80022aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ac:	f003 0301 	and.w	r3, r3, #1
 80022b0:	60fb      	str	r3, [r7, #12]
 80022b2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80022b4:	23e0      	movs	r3, #224	; 0xe0
 80022b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022b8:	2303      	movs	r3, #3
 80022ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022bc:	2300      	movs	r3, #0
 80022be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022c0:	f107 0314 	add.w	r3, r7, #20
 80022c4:	4619      	mov	r1, r3
 80022c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022ca:	f002 fba7 	bl	8004a1c <HAL_GPIO_Init>
}
 80022ce:	e01c      	b.n	800230a <HAL_OPAMP_MspInit+0xce>
  else if(opampHandle->Instance==OPAMP3)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a12      	ldr	r2, [pc, #72]	; (8002320 <HAL_OPAMP_MspInit+0xe4>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d117      	bne.n	800230a <HAL_OPAMP_MspInit+0xce>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022da:	4b0f      	ldr	r3, [pc, #60]	; (8002318 <HAL_OPAMP_MspInit+0xdc>)
 80022dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022de:	4a0e      	ldr	r2, [pc, #56]	; (8002318 <HAL_OPAMP_MspInit+0xdc>)
 80022e0:	f043 0302 	orr.w	r3, r3, #2
 80022e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022e6:	4b0c      	ldr	r3, [pc, #48]	; (8002318 <HAL_OPAMP_MspInit+0xdc>)
 80022e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ea:	f003 0302 	and.w	r3, r3, #2
 80022ee:	60bb      	str	r3, [r7, #8]
 80022f0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80022f2:	2307      	movs	r3, #7
 80022f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022f6:	2303      	movs	r3, #3
 80022f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022fa:	2300      	movs	r3, #0
 80022fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022fe:	f107 0314 	add.w	r3, r7, #20
 8002302:	4619      	mov	r1, r3
 8002304:	4807      	ldr	r0, [pc, #28]	; (8002324 <HAL_OPAMP_MspInit+0xe8>)
 8002306:	f002 fb89 	bl	8004a1c <HAL_GPIO_Init>
}
 800230a:	bf00      	nop
 800230c:	3728      	adds	r7, #40	; 0x28
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	40010300 	.word	0x40010300
 8002318:	40021000 	.word	0x40021000
 800231c:	40010304 	.word	0x40010304
 8002320:	40010308 	.word	0x40010308
 8002324:	48000400 	.word	0x48000400

08002328 <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800232c:	4b05      	ldr	r3, [pc, #20]	; (8002344 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	4a04      	ldr	r2, [pc, #16]	; (8002344 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8002332:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002336:	6093      	str	r3, [r2, #8]
}
 8002338:	bf00      	nop
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	40007000 	.word	0x40007000

08002348 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800234e:	4b0f      	ldr	r3, [pc, #60]	; (800238c <HAL_MspInit+0x44>)
 8002350:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002352:	4a0e      	ldr	r2, [pc, #56]	; (800238c <HAL_MspInit+0x44>)
 8002354:	f043 0301 	orr.w	r3, r3, #1
 8002358:	6613      	str	r3, [r2, #96]	; 0x60
 800235a:	4b0c      	ldr	r3, [pc, #48]	; (800238c <HAL_MspInit+0x44>)
 800235c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800235e:	f003 0301 	and.w	r3, r3, #1
 8002362:	607b      	str	r3, [r7, #4]
 8002364:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002366:	4b09      	ldr	r3, [pc, #36]	; (800238c <HAL_MspInit+0x44>)
 8002368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800236a:	4a08      	ldr	r2, [pc, #32]	; (800238c <HAL_MspInit+0x44>)
 800236c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002370:	6593      	str	r3, [r2, #88]	; 0x58
 8002372:	4b06      	ldr	r3, [pc, #24]	; (800238c <HAL_MspInit+0x44>)
 8002374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800237a:	603b      	str	r3, [r7, #0]
 800237c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 800237e:	f7ff ffd3 	bl	8002328 <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002382:	bf00      	nop
 8002384:	3708      	adds	r7, #8
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	40021000 	.word	0x40021000

08002390 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002390:	b480      	push	{r7}
 8002392:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002394:	bf00      	nop
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr

0800239e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800239e:	b480      	push	{r7}
 80023a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023a2:	e7fe      	b.n	80023a2 <HardFault_Handler+0x4>

080023a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023a8:	e7fe      	b.n	80023a8 <MemManage_Handler+0x4>

080023aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023aa:	b480      	push	{r7}
 80023ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023ae:	e7fe      	b.n	80023ae <BusFault_Handler+0x4>

080023b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023b4:	e7fe      	b.n	80023b4 <UsageFault_Handler+0x4>

080023b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023b6:	b480      	push	{r7}
 80023b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023ba:	bf00      	nop
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr

080023c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023c8:	bf00      	nop
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr

080023d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023d2:	b480      	push	{r7}
 80023d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023d6:	bf00      	nop
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr

080023e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023e4:	f000 fbaa 	bl	8002b3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023e8:	bf00      	nop
 80023ea:	bd80      	pop	{r7, pc}

080023ec <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80023f0:	4803      	ldr	r0, [pc, #12]	; (8002400 <ADC1_2_IRQHandler+0x14>)
 80023f2:	f000 fe83 	bl	80030fc <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80023f6:	4803      	ldr	r0, [pc, #12]	; (8002404 <ADC1_2_IRQHandler+0x18>)
 80023f8:	f000 fe80 	bl	80030fc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80023fc:	bf00      	nop
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	20000278 	.word	0x20000278
 8002404:	2000020c 	.word	0x2000020c

08002408 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800240c:	4802      	ldr	r0, [pc, #8]	; (8002418 <USART2_IRQHandler+0x10>)
 800240e:	f005 fc41 	bl	8007c94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002412:	bf00      	nop
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	20000570 	.word	0x20000570

0800241c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8002420:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002424:	f002 fc7c 	bl	8004d20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002428:	bf00      	nop
 800242a:	bd80      	pop	{r7, pc}

0800242c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002434:	4b11      	ldr	r3, [pc, #68]	; (800247c <_sbrk+0x50>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d102      	bne.n	8002442 <_sbrk+0x16>
		heap_end = &end;
 800243c:	4b0f      	ldr	r3, [pc, #60]	; (800247c <_sbrk+0x50>)
 800243e:	4a10      	ldr	r2, [pc, #64]	; (8002480 <_sbrk+0x54>)
 8002440:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002442:	4b0e      	ldr	r3, [pc, #56]	; (800247c <_sbrk+0x50>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002448:	4b0c      	ldr	r3, [pc, #48]	; (800247c <_sbrk+0x50>)
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	4413      	add	r3, r2
 8002450:	466a      	mov	r2, sp
 8002452:	4293      	cmp	r3, r2
 8002454:	d907      	bls.n	8002466 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002456:	f007 fe03 	bl	800a060 <__errno>
 800245a:	4602      	mov	r2, r0
 800245c:	230c      	movs	r3, #12
 800245e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002460:	f04f 33ff 	mov.w	r3, #4294967295
 8002464:	e006      	b.n	8002474 <_sbrk+0x48>
	}

	heap_end += incr;
 8002466:	4b05      	ldr	r3, [pc, #20]	; (800247c <_sbrk+0x50>)
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4413      	add	r3, r2
 800246e:	4a03      	ldr	r2, [pc, #12]	; (800247c <_sbrk+0x50>)
 8002470:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002472:	68fb      	ldr	r3, [r7, #12]
}
 8002474:	4618      	mov	r0, r3
 8002476:	3710      	adds	r7, #16
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	20000200 	.word	0x20000200
 8002480:	20000608 	.word	0x20000608

08002484 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002488:	4b08      	ldr	r3, [pc, #32]	; (80024ac <SystemInit+0x28>)
 800248a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800248e:	4a07      	ldr	r2, [pc, #28]	; (80024ac <SystemInit+0x28>)
 8002490:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002494:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002498:	4b04      	ldr	r3, [pc, #16]	; (80024ac <SystemInit+0x28>)
 800249a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800249e:	609a      	str	r2, [r3, #8]
#endif
}
 80024a0:	bf00      	nop
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr
 80024aa:	bf00      	nop
 80024ac:	e000ed00 	.word	0xe000ed00

080024b0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b09c      	sub	sp, #112	; 0x70
 80024b4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024b6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80024ba:	2200      	movs	r2, #0
 80024bc:	601a      	str	r2, [r3, #0]
 80024be:	605a      	str	r2, [r3, #4]
 80024c0:	609a      	str	r2, [r3, #8]
 80024c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024c4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80024c8:	2200      	movs	r2, #0
 80024ca:	601a      	str	r2, [r3, #0]
 80024cc:	605a      	str	r2, [r3, #4]
 80024ce:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80024d0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80024d4:	2200      	movs	r2, #0
 80024d6:	601a      	str	r2, [r3, #0]
 80024d8:	605a      	str	r2, [r3, #4]
 80024da:	609a      	str	r2, [r3, #8]
 80024dc:	60da      	str	r2, [r3, #12]
 80024de:	611a      	str	r2, [r3, #16]
 80024e0:	615a      	str	r2, [r3, #20]
 80024e2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80024e4:	1d3b      	adds	r3, r7, #4
 80024e6:	2234      	movs	r2, #52	; 0x34
 80024e8:	2100      	movs	r1, #0
 80024ea:	4618      	mov	r0, r3
 80024ec:	f007 fde2 	bl	800a0b4 <memset>

  htim1.Instance = TIM1;
 80024f0:	4b5d      	ldr	r3, [pc, #372]	; (8002668 <MX_TIM1_Init+0x1b8>)
 80024f2:	4a5e      	ldr	r2, [pc, #376]	; (800266c <MX_TIM1_Init+0x1bc>)
 80024f4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80024f6:	4b5c      	ldr	r3, [pc, #368]	; (8002668 <MX_TIM1_Init+0x1b8>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80024fc:	4b5a      	ldr	r3, [pc, #360]	; (8002668 <MX_TIM1_Init+0x1b8>)
 80024fe:	2220      	movs	r2, #32
 8002500:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8002502:	4b59      	ldr	r3, [pc, #356]	; (8002668 <MX_TIM1_Init+0x1b8>)
 8002504:	2200      	movs	r2, #0
 8002506:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002508:	4b57      	ldr	r3, [pc, #348]	; (8002668 <MX_TIM1_Init+0x1b8>)
 800250a:	2200      	movs	r2, #0
 800250c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800250e:	4b56      	ldr	r3, [pc, #344]	; (8002668 <MX_TIM1_Init+0x1b8>)
 8002510:	2200      	movs	r2, #0
 8002512:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002514:	4b54      	ldr	r3, [pc, #336]	; (8002668 <MX_TIM1_Init+0x1b8>)
 8002516:	2200      	movs	r2, #0
 8002518:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800251a:	4853      	ldr	r0, [pc, #332]	; (8002668 <MX_TIM1_Init+0x1b8>)
 800251c:	f003 ffd6 	bl	80064cc <HAL_TIM_Base_Init>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d001      	beq.n	800252a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8002526:	f7ff fdf8 	bl	800211a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800252a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800252e:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002530:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002534:	4619      	mov	r1, r3
 8002536:	484c      	ldr	r0, [pc, #304]	; (8002668 <MX_TIM1_Init+0x1b8>)
 8002538:	f004 fb96 	bl	8006c68 <HAL_TIM_ConfigClockSource>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d001      	beq.n	8002546 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002542:	f7ff fdea 	bl	800211a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002546:	4848      	ldr	r0, [pc, #288]	; (8002668 <MX_TIM1_Init+0x1b8>)
 8002548:	f004 f817 	bl	800657a <HAL_TIM_PWM_Init>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d001      	beq.n	8002556 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8002552:	f7ff fde2 	bl	800211a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8002556:	2370      	movs	r3, #112	; 0x70
 8002558:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800255a:	2300      	movs	r3, #0
 800255c:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800255e:	2300      	movs	r3, #0
 8002560:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002562:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002566:	4619      	mov	r1, r3
 8002568:	483f      	ldr	r0, [pc, #252]	; (8002668 <MX_TIM1_Init+0x1b8>)
 800256a:	f005 f923 	bl	80077b4 <HAL_TIMEx_MasterConfigSynchronization>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d001      	beq.n	8002578 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8002574:	f7ff fdd1 	bl	800211a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002578:	2360      	movs	r3, #96	; 0x60
 800257a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 800257c:	2300      	movs	r3, #0
 800257e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002580:	2300      	movs	r3, #0
 8002582:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002584:	2300      	movs	r3, #0
 8002586:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002588:	2300      	movs	r3, #0
 800258a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800258c:	2300      	movs	r3, #0
 800258e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002590:	2300      	movs	r3, #0
 8002592:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002594:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002598:	2200      	movs	r2, #0
 800259a:	4619      	mov	r1, r3
 800259c:	4832      	ldr	r0, [pc, #200]	; (8002668 <MX_TIM1_Init+0x1b8>)
 800259e:	f004 fa53 	bl	8006a48 <HAL_TIM_PWM_ConfigChannel>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d001      	beq.n	80025ac <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 80025a8:	f7ff fdb7 	bl	800211a <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 80025ac:	2300      	movs	r3, #0
 80025ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80025b0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80025b4:	2204      	movs	r2, #4
 80025b6:	4619      	mov	r1, r3
 80025b8:	482b      	ldr	r0, [pc, #172]	; (8002668 <MX_TIM1_Init+0x1b8>)
 80025ba:	f004 fa45 	bl	8006a48 <HAL_TIM_PWM_ConfigChannel>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d001      	beq.n	80025c8 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 80025c4:	f7ff fda9 	bl	800211a <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 80025c8:	2300      	movs	r3, #0
 80025ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80025cc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80025d0:	2208      	movs	r2, #8
 80025d2:	4619      	mov	r1, r3
 80025d4:	4824      	ldr	r0, [pc, #144]	; (8002668 <MX_TIM1_Init+0x1b8>)
 80025d6:	f004 fa37 	bl	8006a48 <HAL_TIM_PWM_ConfigChannel>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d001      	beq.n	80025e4 <MX_TIM1_Init+0x134>
  {
    Error_Handler();
 80025e0:	f7ff fd9b 	bl	800211a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80025e4:	2370      	movs	r3, #112	; 0x70
 80025e6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80025e8:	2300      	movs	r3, #0
 80025ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80025ec:	2300      	movs	r3, #0
 80025ee:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80025f0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80025f4:	220c      	movs	r2, #12
 80025f6:	4619      	mov	r1, r3
 80025f8:	481b      	ldr	r0, [pc, #108]	; (8002668 <MX_TIM1_Init+0x1b8>)
 80025fa:	f004 fa25 	bl	8006a48 <HAL_TIM_PWM_ConfigChannel>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d001      	beq.n	8002608 <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 8002604:	f7ff fd89 	bl	800211a <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8002608:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800260c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 800260e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002612:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002614:	2300      	movs	r3, #0
 8002616:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = (DEAD_TIME_COUNTS) / 2;
 8002618:	2344      	movs	r3, #68	; 0x44
 800261a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800261c:	2300      	movs	r3, #0
 800261e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002620:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002624:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002626:	2300      	movs	r3, #0
 8002628:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800262a:	2300      	movs	r3, #0
 800262c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800262e:	2300      	movs	r3, #0
 8002630:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002632:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002636:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 3;
 8002638:	2303      	movs	r3, #3
 800263a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800263c:	2300      	movs	r3, #0
 800263e:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002640:	2300      	movs	r3, #0
 8002642:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002644:	1d3b      	adds	r3, r7, #4
 8002646:	4619      	mov	r1, r3
 8002648:	4807      	ldr	r0, [pc, #28]	; (8002668 <MX_TIM1_Init+0x1b8>)
 800264a:	f005 f935 	bl	80078b8 <HAL_TIMEx_ConfigBreakDeadTime>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d001      	beq.n	8002658 <MX_TIM1_Init+0x1a8>
  {
    Error_Handler();
 8002654:	f7ff fd61 	bl	800211a <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8002658:	4803      	ldr	r0, [pc, #12]	; (8002668 <MX_TIM1_Init+0x1b8>)
 800265a:	f000 f8d3 	bl	8002804 <HAL_TIM_MspPostInit>

}
 800265e:	bf00      	nop
 8002660:	3770      	adds	r7, #112	; 0x70
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	20000524 	.word	0x20000524
 800266c:	40012c00 	.word	0x40012c00

08002670 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b08c      	sub	sp, #48	; 0x30
 8002674:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8002676:	f107 030c 	add.w	r3, r7, #12
 800267a:	2224      	movs	r2, #36	; 0x24
 800267c:	2100      	movs	r1, #0
 800267e:	4618      	mov	r0, r3
 8002680:	f007 fd18 	bl	800a0b4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002684:	463b      	mov	r3, r7
 8002686:	2200      	movs	r2, #0
 8002688:	601a      	str	r2, [r3, #0]
 800268a:	605a      	str	r2, [r3, #4]
 800268c:	609a      	str	r2, [r3, #8]

  htim4.Instance = TIM4;
 800268e:	4b20      	ldr	r3, [pc, #128]	; (8002710 <MX_TIM4_Init+0xa0>)
 8002690:	4a20      	ldr	r2, [pc, #128]	; (8002714 <MX_TIM4_Init+0xa4>)
 8002692:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002694:	4b1e      	ldr	r3, [pc, #120]	; (8002710 <MX_TIM4_Init+0xa0>)
 8002696:	2200      	movs	r2, #0
 8002698:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800269a:	4b1d      	ldr	r3, [pc, #116]	; (8002710 <MX_TIM4_Init+0xa0>)
 800269c:	2200      	movs	r2, #0
 800269e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0;
 80026a0:	4b1b      	ldr	r3, [pc, #108]	; (8002710 <MX_TIM4_Init+0xa0>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026a6:	4b1a      	ldr	r3, [pc, #104]	; (8002710 <MX_TIM4_Init+0xa0>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026ac:	4b18      	ldr	r3, [pc, #96]	; (8002710 <MX_TIM4_Init+0xa0>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_X1_TI1;
 80026b2:	4b19      	ldr	r3, [pc, #100]	; (8002718 <MX_TIM4_Init+0xa8>)
 80026b4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80026b6:	2300      	movs	r3, #0
 80026b8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80026ba:	2301      	movs	r3, #1
 80026bc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80026be:	2300      	movs	r3, #0
 80026c0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80026c2:	2300      	movs	r3, #0
 80026c4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80026c6:	2300      	movs	r3, #0
 80026c8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80026ca:	2301      	movs	r3, #1
 80026cc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80026ce:	2300      	movs	r3, #0
 80026d0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80026d2:	2300      	movs	r3, #0
 80026d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80026d6:	f107 030c 	add.w	r3, r7, #12
 80026da:	4619      	mov	r1, r3
 80026dc:	480c      	ldr	r0, [pc, #48]	; (8002710 <MX_TIM4_Init+0xa0>)
 80026de:	f004 f87f 	bl	80067e0 <HAL_TIM_Encoder_Init>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d001      	beq.n	80026ec <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80026e8:	f7ff fd17 	bl	800211a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026ec:	2300      	movs	r3, #0
 80026ee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026f0:	2300      	movs	r3, #0
 80026f2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80026f4:	463b      	mov	r3, r7
 80026f6:	4619      	mov	r1, r3
 80026f8:	4805      	ldr	r0, [pc, #20]	; (8002710 <MX_TIM4_Init+0xa0>)
 80026fa:	f005 f85b 	bl	80077b4 <HAL_TIMEx_MasterConfigSynchronization>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d001      	beq.n	8002708 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8002704:	f7ff fd09 	bl	800211a <Error_Handler>
  }

}
 8002708:	bf00      	nop
 800270a:	3730      	adds	r7, #48	; 0x30
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}
 8002710:	200004d8 	.word	0x200004d8
 8002714:	40000800 	.word	0x40000800
 8002718:	00010006 	.word	0x00010006

0800271c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800271c:	b480      	push	{r7}
 800271e:	b085      	sub	sp, #20
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a0a      	ldr	r2, [pc, #40]	; (8002754 <HAL_TIM_Base_MspInit+0x38>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d10b      	bne.n	8002746 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800272e:	4b0a      	ldr	r3, [pc, #40]	; (8002758 <HAL_TIM_Base_MspInit+0x3c>)
 8002730:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002732:	4a09      	ldr	r2, [pc, #36]	; (8002758 <HAL_TIM_Base_MspInit+0x3c>)
 8002734:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002738:	6613      	str	r3, [r2, #96]	; 0x60
 800273a:	4b07      	ldr	r3, [pc, #28]	; (8002758 <HAL_TIM_Base_MspInit+0x3c>)
 800273c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800273e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002742:	60fb      	str	r3, [r7, #12]
 8002744:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002746:	bf00      	nop
 8002748:	3714      	adds	r7, #20
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	40012c00 	.word	0x40012c00
 8002758:	40021000 	.word	0x40021000

0800275c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b08a      	sub	sp, #40	; 0x28
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002764:	f107 0314 	add.w	r3, r7, #20
 8002768:	2200      	movs	r2, #0
 800276a:	601a      	str	r2, [r3, #0]
 800276c:	605a      	str	r2, [r3, #4]
 800276e:	609a      	str	r2, [r3, #8]
 8002770:	60da      	str	r2, [r3, #12]
 8002772:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM4)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a1f      	ldr	r2, [pc, #124]	; (80027f8 <HAL_TIM_Encoder_MspInit+0x9c>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d138      	bne.n	80027f0 <HAL_TIM_Encoder_MspInit+0x94>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800277e:	4b1f      	ldr	r3, [pc, #124]	; (80027fc <HAL_TIM_Encoder_MspInit+0xa0>)
 8002780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002782:	4a1e      	ldr	r2, [pc, #120]	; (80027fc <HAL_TIM_Encoder_MspInit+0xa0>)
 8002784:	f043 0304 	orr.w	r3, r3, #4
 8002788:	6593      	str	r3, [r2, #88]	; 0x58
 800278a:	4b1c      	ldr	r3, [pc, #112]	; (80027fc <HAL_TIM_Encoder_MspInit+0xa0>)
 800278c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800278e:	f003 0304 	and.w	r3, r3, #4
 8002792:	613b      	str	r3, [r7, #16]
 8002794:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002796:	4b19      	ldr	r3, [pc, #100]	; (80027fc <HAL_TIM_Encoder_MspInit+0xa0>)
 8002798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800279a:	4a18      	ldr	r2, [pc, #96]	; (80027fc <HAL_TIM_Encoder_MspInit+0xa0>)
 800279c:	f043 0302 	orr.w	r3, r3, #2
 80027a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027a2:	4b16      	ldr	r3, [pc, #88]	; (80027fc <HAL_TIM_Encoder_MspInit+0xa0>)
 80027a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027a6:	f003 0302 	and.w	r3, r3, #2
 80027aa:	60fb      	str	r3, [r7, #12]
 80027ac:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration    
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8-BOOT0     ------> TIM4_CH3 
    */
    GPIO_InitStruct.Pin = ENCODER_CH1_Pin|ENCODER_CH2_Pin;
 80027ae:	23c0      	movs	r3, #192	; 0xc0
 80027b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027b2:	2302      	movs	r3, #2
 80027b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80027b6:	2302      	movs	r3, #2
 80027b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027ba:	2302      	movs	r3, #2
 80027bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80027be:	2302      	movs	r3, #2
 80027c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027c2:	f107 0314 	add.w	r3, r7, #20
 80027c6:	4619      	mov	r1, r3
 80027c8:	480d      	ldr	r0, [pc, #52]	; (8002800 <HAL_TIM_Encoder_MspInit+0xa4>)
 80027ca:	f002 f927 	bl	8004a1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HALL_V_TIM4_Pin;
 80027ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027d4:	2302      	movs	r3, #2
 80027d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027d8:	2301      	movs	r3, #1
 80027da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027dc:	2302      	movs	r3, #2
 80027de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80027e0:	2302      	movs	r3, #2
 80027e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(HALL_V_TIM4_GPIO_Port, &GPIO_InitStruct);
 80027e4:	f107 0314 	add.w	r3, r7, #20
 80027e8:	4619      	mov	r1, r3
 80027ea:	4805      	ldr	r0, [pc, #20]	; (8002800 <HAL_TIM_Encoder_MspInit+0xa4>)
 80027ec:	f002 f916 	bl	8004a1c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80027f0:	bf00      	nop
 80027f2:	3728      	adds	r7, #40	; 0x28
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	40000800 	.word	0x40000800
 80027fc:	40021000 	.word	0x40021000
 8002800:	48000400 	.word	0x48000400

08002804 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b08a      	sub	sp, #40	; 0x28
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800280c:	f107 0314 	add.w	r3, r7, #20
 8002810:	2200      	movs	r2, #0
 8002812:	601a      	str	r2, [r3, #0]
 8002814:	605a      	str	r2, [r3, #4]
 8002816:	609a      	str	r2, [r3, #8]
 8002818:	60da      	str	r2, [r3, #12]
 800281a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a38      	ldr	r2, [pc, #224]	; (8002904 <HAL_TIM_MspPostInit+0x100>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d169      	bne.n	80028fa <HAL_TIM_MspPostInit+0xf6>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002826:	4b38      	ldr	r3, [pc, #224]	; (8002908 <HAL_TIM_MspPostInit+0x104>)
 8002828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800282a:	4a37      	ldr	r2, [pc, #220]	; (8002908 <HAL_TIM_MspPostInit+0x104>)
 800282c:	f043 0304 	orr.w	r3, r3, #4
 8002830:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002832:	4b35      	ldr	r3, [pc, #212]	; (8002908 <HAL_TIM_MspPostInit+0x104>)
 8002834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002836:	f003 0304 	and.w	r3, r3, #4
 800283a:	613b      	str	r3, [r7, #16]
 800283c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800283e:	4b32      	ldr	r3, [pc, #200]	; (8002908 <HAL_TIM_MspPostInit+0x104>)
 8002840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002842:	4a31      	ldr	r2, [pc, #196]	; (8002908 <HAL_TIM_MspPostInit+0x104>)
 8002844:	f043 0302 	orr.w	r3, r3, #2
 8002848:	64d3      	str	r3, [r2, #76]	; 0x4c
 800284a:	4b2f      	ldr	r3, [pc, #188]	; (8002908 <HAL_TIM_MspPostInit+0x104>)
 800284c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800284e:	f003 0302 	and.w	r3, r3, #2
 8002852:	60fb      	str	r3, [r7, #12]
 8002854:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002856:	4b2c      	ldr	r3, [pc, #176]	; (8002908 <HAL_TIM_MspPostInit+0x104>)
 8002858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800285a:	4a2b      	ldr	r2, [pc, #172]	; (8002908 <HAL_TIM_MspPostInit+0x104>)
 800285c:	f043 0301 	orr.w	r3, r3, #1
 8002860:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002862:	4b29      	ldr	r3, [pc, #164]	; (8002908 <HAL_TIM_MspPostInit+0x104>)
 8002864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002866:	f003 0301 	and.w	r3, r3, #1
 800286a:	60bb      	str	r3, [r7, #8]
 800286c:	68bb      	ldr	r3, [r7, #8]
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    PA12     ------> TIM1_CH2N 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800286e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002872:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002874:	2302      	movs	r3, #2
 8002876:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002878:	2302      	movs	r3, #2
 800287a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800287c:	2300      	movs	r3, #0
 800287e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8002880:	2304      	movs	r3, #4
 8002882:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002884:	f107 0314 	add.w	r3, r7, #20
 8002888:	4619      	mov	r1, r3
 800288a:	4820      	ldr	r0, [pc, #128]	; (800290c <HAL_TIM_MspPostInit+0x108>)
 800288c:	f002 f8c6 	bl	8004a1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002890:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002894:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002896:	2302      	movs	r3, #2
 8002898:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800289a:	2302      	movs	r3, #2
 800289c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800289e:	2302      	movs	r3, #2
 80028a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 80028a2:	2304      	movs	r3, #4
 80028a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028a6:	f107 0314 	add.w	r3, r7, #20
 80028aa:	4619      	mov	r1, r3
 80028ac:	4818      	ldr	r0, [pc, #96]	; (8002910 <HAL_TIM_MspPostInit+0x10c>)
 80028ae:	f002 f8b5 	bl	8004a1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12;
 80028b2:	f44f 53b8 	mov.w	r3, #5888	; 0x1700
 80028b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028b8:	2302      	movs	r3, #2
 80028ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80028bc:	2302      	movs	r3, #2
 80028be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80028c0:	2302      	movs	r3, #2
 80028c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80028c4:	2306      	movs	r3, #6
 80028c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028c8:	f107 0314 	add.w	r3, r7, #20
 80028cc:	4619      	mov	r1, r3
 80028ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028d2:	f002 f8a3 	bl	8004a1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80028d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80028da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028dc:	2302      	movs	r3, #2
 80028de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e0:	2300      	movs	r3, #0
 80028e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028e4:	2300      	movs	r3, #0
 80028e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_TIM1;
 80028e8:	230b      	movs	r3, #11
 80028ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028ec:	f107 0314 	add.w	r3, r7, #20
 80028f0:	4619      	mov	r1, r3
 80028f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028f6:	f002 f891 	bl	8004a1c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80028fa:	bf00      	nop
 80028fc:	3728      	adds	r7, #40	; 0x28
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	40012c00 	.word	0x40012c00
 8002908:	40021000 	.word	0x40021000
 800290c:	48000800 	.word	0x48000800
 8002910:	48000400 	.word	0x48000400

08002914 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8002918:	4b22      	ldr	r3, [pc, #136]	; (80029a4 <MX_USART2_UART_Init+0x90>)
 800291a:	4a23      	ldr	r2, [pc, #140]	; (80029a8 <MX_USART2_UART_Init+0x94>)
 800291c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800291e:	4b21      	ldr	r3, [pc, #132]	; (80029a4 <MX_USART2_UART_Init+0x90>)
 8002920:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002924:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002926:	4b1f      	ldr	r3, [pc, #124]	; (80029a4 <MX_USART2_UART_Init+0x90>)
 8002928:	2200      	movs	r2, #0
 800292a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800292c:	4b1d      	ldr	r3, [pc, #116]	; (80029a4 <MX_USART2_UART_Init+0x90>)
 800292e:	2200      	movs	r2, #0
 8002930:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002932:	4b1c      	ldr	r3, [pc, #112]	; (80029a4 <MX_USART2_UART_Init+0x90>)
 8002934:	2200      	movs	r2, #0
 8002936:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002938:	4b1a      	ldr	r3, [pc, #104]	; (80029a4 <MX_USART2_UART_Init+0x90>)
 800293a:	220c      	movs	r2, #12
 800293c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800293e:	4b19      	ldr	r3, [pc, #100]	; (80029a4 <MX_USART2_UART_Init+0x90>)
 8002940:	2200      	movs	r2, #0
 8002942:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002944:	4b17      	ldr	r3, [pc, #92]	; (80029a4 <MX_USART2_UART_Init+0x90>)
 8002946:	2200      	movs	r2, #0
 8002948:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800294a:	4b16      	ldr	r3, [pc, #88]	; (80029a4 <MX_USART2_UART_Init+0x90>)
 800294c:	2200      	movs	r2, #0
 800294e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002950:	4b14      	ldr	r3, [pc, #80]	; (80029a4 <MX_USART2_UART_Init+0x90>)
 8002952:	2200      	movs	r2, #0
 8002954:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002956:	4b13      	ldr	r3, [pc, #76]	; (80029a4 <MX_USART2_UART_Init+0x90>)
 8002958:	2200      	movs	r2, #0
 800295a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800295c:	4811      	ldr	r0, [pc, #68]	; (80029a4 <MX_USART2_UART_Init+0x90>)
 800295e:	f005 f870 	bl	8007a42 <HAL_UART_Init>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d001      	beq.n	800296c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002968:	f7ff fbd7 	bl	800211a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800296c:	2100      	movs	r1, #0
 800296e:	480d      	ldr	r0, [pc, #52]	; (80029a4 <MX_USART2_UART_Init+0x90>)
 8002970:	f007 f855 	bl	8009a1e <HAL_UARTEx_SetTxFifoThreshold>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d001      	beq.n	800297e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800297a:	f7ff fbce 	bl	800211a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800297e:	2100      	movs	r1, #0
 8002980:	4808      	ldr	r0, [pc, #32]	; (80029a4 <MX_USART2_UART_Init+0x90>)
 8002982:	f007 f88a 	bl	8009a9a <HAL_UARTEx_SetRxFifoThreshold>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d001      	beq.n	8002990 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800298c:	f7ff fbc5 	bl	800211a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002990:	4804      	ldr	r0, [pc, #16]	; (80029a4 <MX_USART2_UART_Init+0x90>)
 8002992:	f007 f80b 	bl	80099ac <HAL_UARTEx_DisableFifoMode>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d001      	beq.n	80029a0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800299c:	f7ff fbbd 	bl	800211a <Error_Handler>
  }

}
 80029a0:	bf00      	nop
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	20000570 	.word	0x20000570
 80029a8:	40004400 	.word	0x40004400

080029ac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b08a      	sub	sp, #40	; 0x28
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029b4:	f107 0314 	add.w	r3, r7, #20
 80029b8:	2200      	movs	r2, #0
 80029ba:	601a      	str	r2, [r3, #0]
 80029bc:	605a      	str	r2, [r3, #4]
 80029be:	609a      	str	r2, [r3, #8]
 80029c0:	60da      	str	r2, [r3, #12]
 80029c2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a1b      	ldr	r2, [pc, #108]	; (8002a38 <HAL_UART_MspInit+0x8c>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d12f      	bne.n	8002a2e <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80029ce:	4b1b      	ldr	r3, [pc, #108]	; (8002a3c <HAL_UART_MspInit+0x90>)
 80029d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029d2:	4a1a      	ldr	r2, [pc, #104]	; (8002a3c <HAL_UART_MspInit+0x90>)
 80029d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029d8:	6593      	str	r3, [r2, #88]	; 0x58
 80029da:	4b18      	ldr	r3, [pc, #96]	; (8002a3c <HAL_UART_MspInit+0x90>)
 80029dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029e2:	613b      	str	r3, [r7, #16]
 80029e4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029e6:	4b15      	ldr	r3, [pc, #84]	; (8002a3c <HAL_UART_MspInit+0x90>)
 80029e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ea:	4a14      	ldr	r2, [pc, #80]	; (8002a3c <HAL_UART_MspInit+0x90>)
 80029ec:	f043 0302 	orr.w	r3, r3, #2
 80029f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029f2:	4b12      	ldr	r3, [pc, #72]	; (8002a3c <HAL_UART_MspInit+0x90>)
 80029f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029f6:	f003 0302 	and.w	r3, r3, #2
 80029fa:	60fb      	str	r3, [r7, #12]
 80029fc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PB3     ------> USART2_TX
    PB4     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80029fe:	2318      	movs	r3, #24
 8002a00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a02:	2302      	movs	r3, #2
 8002a04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a06:	2300      	movs	r3, #0
 8002a08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002a0e:	2307      	movs	r3, #7
 8002a10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a12:	f107 0314 	add.w	r3, r7, #20
 8002a16:	4619      	mov	r1, r3
 8002a18:	4809      	ldr	r0, [pc, #36]	; (8002a40 <HAL_UART_MspInit+0x94>)
 8002a1a:	f001 ffff 	bl	8004a1c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 8, 0);
 8002a1e:	2200      	movs	r2, #0
 8002a20:	2108      	movs	r1, #8
 8002a22:	2026      	movs	r0, #38	; 0x26
 8002a24:	f001 ff5f 	bl	80048e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002a28:	2026      	movs	r0, #38	; 0x26
 8002a2a:	f001 ff76 	bl	800491a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002a2e:	bf00      	nop
 8002a30:	3728      	adds	r7, #40	; 0x28
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	40004400 	.word	0x40004400
 8002a3c:	40021000 	.word	0x40021000
 8002a40:	48000400 	.word	0x48000400

08002a44 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002a44:	480d      	ldr	r0, [pc, #52]	; (8002a7c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002a46:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a48:	480d      	ldr	r0, [pc, #52]	; (8002a80 <LoopForever+0x6>)
  ldr r1, =_edata
 8002a4a:	490e      	ldr	r1, [pc, #56]	; (8002a84 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002a4c:	4a0e      	ldr	r2, [pc, #56]	; (8002a88 <LoopForever+0xe>)
  movs r3, #0
 8002a4e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002a50:	e002      	b.n	8002a58 <LoopCopyDataInit>

08002a52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a56:	3304      	adds	r3, #4

08002a58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a5c:	d3f9      	bcc.n	8002a52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a5e:	4a0b      	ldr	r2, [pc, #44]	; (8002a8c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002a60:	4c0b      	ldr	r4, [pc, #44]	; (8002a90 <LoopForever+0x16>)
  movs r3, #0
 8002a62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a64:	e001      	b.n	8002a6a <LoopFillZerobss>

08002a66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a68:	3204      	adds	r2, #4

08002a6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a6c:	d3fb      	bcc.n	8002a66 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002a6e:	f7ff fd09 	bl	8002484 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a72:	f007 fafb 	bl	800a06c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002a76:	f7ff facf 	bl	8002018 <main>

08002a7a <LoopForever>:

LoopForever:
    b LoopForever
 8002a7a:	e7fe      	b.n	8002a7a <LoopForever>
  ldr   r0, =_estack
 8002a7c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002a80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a84:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002a88:	0800ea24 	.word	0x0800ea24
  ldr r2, =_sbss
 8002a8c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002a90:	20000604 	.word	0x20000604

08002a94 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002a94:	e7fe      	b.n	8002a94 <COMP1_2_3_IRQHandler>

08002a96 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a96:	b580      	push	{r7, lr}
 8002a98:	b082      	sub	sp, #8
 8002a9a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002aa0:	2003      	movs	r0, #3
 8002aa2:	f001 ff15 	bl	80048d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002aa6:	2000      	movs	r0, #0
 8002aa8:	f000 f80e 	bl	8002ac8 <HAL_InitTick>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d002      	beq.n	8002ab8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	71fb      	strb	r3, [r7, #7]
 8002ab6:	e001      	b.n	8002abc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002ab8:	f7ff fc46 	bl	8002348 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002abc:	79fb      	ldrb	r3, [r7, #7]

}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3708      	adds	r7, #8
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
	...

08002ac8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002ad4:	4b16      	ldr	r3, [pc, #88]	; (8002b30 <HAL_InitTick+0x68>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d022      	beq.n	8002b22 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002adc:	4b15      	ldr	r3, [pc, #84]	; (8002b34 <HAL_InitTick+0x6c>)
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	4b13      	ldr	r3, [pc, #76]	; (8002b30 <HAL_InitTick+0x68>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002ae8:	fbb1 f3f3 	udiv	r3, r1, r3
 8002aec:	fbb2 f3f3 	udiv	r3, r2, r3
 8002af0:	4618      	mov	r0, r3
 8002af2:	f001 ff20 	bl	8004936 <HAL_SYSTICK_Config>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d10f      	bne.n	8002b1c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2b0f      	cmp	r3, #15
 8002b00:	d809      	bhi.n	8002b16 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b02:	2200      	movs	r2, #0
 8002b04:	6879      	ldr	r1, [r7, #4]
 8002b06:	f04f 30ff 	mov.w	r0, #4294967295
 8002b0a:	f001 feec 	bl	80048e6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002b0e:	4a0a      	ldr	r2, [pc, #40]	; (8002b38 <HAL_InitTick+0x70>)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6013      	str	r3, [r2, #0]
 8002b14:	e007      	b.n	8002b26 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	73fb      	strb	r3, [r7, #15]
 8002b1a:	e004      	b.n	8002b26 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	73fb      	strb	r3, [r7, #15]
 8002b20:	e001      	b.n	8002b26 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3710      	adds	r7, #16
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	20000008 	.word	0x20000008
 8002b34:	20000000 	.word	0x20000000
 8002b38:	20000004 	.word	0x20000004

08002b3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b40:	4b05      	ldr	r3, [pc, #20]	; (8002b58 <HAL_IncTick+0x1c>)
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	4b05      	ldr	r3, [pc, #20]	; (8002b5c <HAL_IncTick+0x20>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4413      	add	r3, r2
 8002b4a:	4a03      	ldr	r2, [pc, #12]	; (8002b58 <HAL_IncTick+0x1c>)
 8002b4c:	6013      	str	r3, [r2, #0]
}
 8002b4e:	bf00      	nop
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr
 8002b58:	200005fc 	.word	0x200005fc
 8002b5c:	20000008 	.word	0x20000008

08002b60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b60:	b480      	push	{r7}
 8002b62:	af00      	add	r7, sp, #0
  return uwTick;
 8002b64:	4b03      	ldr	r3, [pc, #12]	; (8002b74 <HAL_GetTick+0x14>)
 8002b66:	681b      	ldr	r3, [r3, #0]
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	200005fc 	.word	0x200005fc

08002b78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b084      	sub	sp, #16
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b80:	f7ff ffee 	bl	8002b60 <HAL_GetTick>
 8002b84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b90:	d004      	beq.n	8002b9c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b92:	4b09      	ldr	r3, [pc, #36]	; (8002bb8 <HAL_Delay+0x40>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	68fa      	ldr	r2, [r7, #12]
 8002b98:	4413      	add	r3, r2
 8002b9a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b9c:	bf00      	nop
 8002b9e:	f7ff ffdf 	bl	8002b60 <HAL_GetTick>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	68fa      	ldr	r2, [r7, #12]
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d8f7      	bhi.n	8002b9e <HAL_Delay+0x26>
  {
  }
}
 8002bae:	bf00      	nop
 8002bb0:	3710      	adds	r7, #16
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	20000008 	.word	0x20000008

08002bbc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	431a      	orrs	r2, r3
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	609a      	str	r2, [r3, #8]
}
 8002bd6:	bf00      	nop
 8002bd8:	370c      	adds	r7, #12
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr

08002be2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002be2:	b480      	push	{r7}
 8002be4:	b083      	sub	sp, #12
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	68db      	ldr	r3, [r3, #12]
 8002bee:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d101      	bne.n	8002bfa <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e000      	b.n	8002bfc <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002bfa:	2300      	movs	r3, #0
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	370c      	adds	r7, #12
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr

08002c08 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c14:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d101      	bne.n	8002c20 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e000      	b.n	8002c22 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002c20:	2300      	movs	r3, #0
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	370c      	adds	r7, #12
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr

08002c2e <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002c2e:	b480      	push	{r7}
 8002c30:	b083      	sub	sp, #12
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	f003 031f 	and.w	r3, r3, #31
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	370c      	adds	r7, #12
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr

08002c4a <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002c4a:	b480      	push	{r7}
 8002c4c:	b083      	sub	sp, #12
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	370c      	adds	r7, #12
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr

08002c66 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002c66:	b480      	push	{r7}
 8002c68:	b083      	sub	sp, #12
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002c76:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	6093      	str	r3, [r2, #8]
}
 8002c7e:	bf00      	nop
 8002c80:	370c      	adds	r7, #12
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr

08002c8a <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002c8a:	b480      	push	{r7}
 8002c8c:	b083      	sub	sp, #12
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c9e:	d101      	bne.n	8002ca4 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e000      	b.n	8002ca6 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002ca4:	2300      	movs	r3, #0
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	370c      	adds	r7, #12
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr

08002cb2 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002cb2:	b480      	push	{r7}
 8002cb4:	b083      	sub	sp, #12
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002cc2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002cc6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002cce:	bf00      	nop
 8002cd0:	370c      	adds	r7, #12
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr

08002cda <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002cda:	b480      	push	{r7}
 8002cdc:	b083      	sub	sp, #12
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002cee:	d101      	bne.n	8002cf4 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e000      	b.n	8002cf6 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002cf4:	2300      	movs	r3, #0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	370c      	adds	r7, #12
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr

08002d02 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002d02:	b480      	push	{r7}
 8002d04:	b083      	sub	sp, #12
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002d12:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002d16:	f043 0201 	orr.w	r2, r3, #1
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002d1e:	bf00      	nop
 8002d20:	370c      	adds	r7, #12
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr

08002d2a <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002d2a:	b480      	push	{r7}
 8002d2c:	b083      	sub	sp, #12
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002d3a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002d3e:	f043 0202 	orr.w	r2, r3, #2
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002d46:	bf00      	nop
 8002d48:	370c      	adds	r7, #12
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr

08002d52 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002d52:	b480      	push	{r7}
 8002d54:	b083      	sub	sp, #12
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	f003 0301 	and.w	r3, r3, #1
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d101      	bne.n	8002d6a <LL_ADC_IsEnabled+0x18>
 8002d66:	2301      	movs	r3, #1
 8002d68:	e000      	b.n	8002d6c <LL_ADC_IsEnabled+0x1a>
 8002d6a:	2300      	movs	r3, #0
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	370c      	adds	r7, #12
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr

08002d78 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	f003 0302 	and.w	r3, r3, #2
 8002d88:	2b02      	cmp	r3, #2
 8002d8a:	d101      	bne.n	8002d90 <LL_ADC_IsDisableOngoing+0x18>
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e000      	b.n	8002d92 <LL_ADC_IsDisableOngoing+0x1a>
 8002d90:	2300      	movs	r3, #0
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	370c      	adds	r7, #12
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr

08002d9e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002d9e:	b480      	push	{r7}
 8002da0:	b083      	sub	sp, #12
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	f003 0304 	and.w	r3, r3, #4
 8002dae:	2b04      	cmp	r3, #4
 8002db0:	d101      	bne.n	8002db6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002db2:	2301      	movs	r3, #1
 8002db4:	e000      	b.n	8002db8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002db6:	2300      	movs	r3, #0
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	370c      	adds	r7, #12
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr

08002dc4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	f003 0308 	and.w	r3, r3, #8
 8002dd4:	2b08      	cmp	r3, #8
 8002dd6:	d101      	bne.n	8002ddc <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e000      	b.n	8002dde <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002ddc:	2300      	movs	r3, #0
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	370c      	adds	r7, #12
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr
	...

08002dec <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002dec:	b590      	push	{r4, r7, lr}
 8002dee:	b089      	sub	sp, #36	; 0x24
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002df4:	2300      	movs	r3, #0
 8002df6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d101      	bne.n	8002e06 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e16b      	b.n	80030de <HAL_ADC_Init+0x2f2>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	695b      	ldr	r3, [r3, #20]
 8002e0a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d109      	bne.n	8002e28 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f7fe f9f3 	bl	8001200 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2200      	movs	r2, #0
 8002e24:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f7ff ff2c 	bl	8002c8a <LL_ADC_IsDeepPowerDownEnabled>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d004      	beq.n	8002e42 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7ff ff12 	bl	8002c66 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4618      	mov	r0, r3
 8002e48:	f7ff ff47 	bl	8002cda <LL_ADC_IsInternalRegulatorEnabled>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d113      	bne.n	8002e7a <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7ff ff2b 	bl	8002cb2 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002e5c:	4ba2      	ldr	r3, [pc, #648]	; (80030e8 <HAL_ADC_Init+0x2fc>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	099b      	lsrs	r3, r3, #6
 8002e62:	4aa2      	ldr	r2, [pc, #648]	; (80030ec <HAL_ADC_Init+0x300>)
 8002e64:	fba2 2303 	umull	r2, r3, r2, r3
 8002e68:	099b      	lsrs	r3, r3, #6
 8002e6a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002e6c:	e002      	b.n	8002e74 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	3b01      	subs	r3, #1
 8002e72:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d1f9      	bne.n	8002e6e <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f7ff ff2b 	bl	8002cda <LL_ADC_IsInternalRegulatorEnabled>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d10d      	bne.n	8002ea6 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e8e:	f043 0210 	orr.w	r2, r3, #16
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e9a:	f043 0201 	orr.w	r2, r3, #1
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f7ff ff77 	bl	8002d9e <LL_ADC_REG_IsConversionOngoing>
 8002eb0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eb6:	f003 0310 	and.w	r3, r3, #16
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	f040 8106 	bne.w	80030cc <HAL_ADC_Init+0x2e0>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	f040 8102 	bne.w	80030cc <HAL_ADC_Init+0x2e0>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ecc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002ed0:	f043 0202 	orr.w	r2, r3, #2
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4618      	mov	r0, r3
 8002ede:	f7ff ff38 	bl	8002d52 <LL_ADC_IsEnabled>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d111      	bne.n	8002f0c <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ee8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002eec:	f7ff ff31 	bl	8002d52 <LL_ADC_IsEnabled>
 8002ef0:	4604      	mov	r4, r0
 8002ef2:	487f      	ldr	r0, [pc, #508]	; (80030f0 <HAL_ADC_Init+0x304>)
 8002ef4:	f7ff ff2d 	bl	8002d52 <LL_ADC_IsEnabled>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	4323      	orrs	r3, r4
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d105      	bne.n	8002f0c <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	4619      	mov	r1, r3
 8002f06:	487b      	ldr	r0, [pc, #492]	; (80030f4 <HAL_ADC_Init+0x308>)
 8002f08:	f7ff fe58 	bl	8002bbc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	7f5b      	ldrb	r3, [r3, #29]
 8002f10:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002f16:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002f1c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002f22:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f2a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d106      	bne.n	8002f48 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f3e:	3b01      	subs	r3, #1
 8002f40:	045b      	lsls	r3, r3, #17
 8002f42:	69ba      	ldr	r2, [r7, #24]
 8002f44:	4313      	orrs	r3, r2
 8002f46:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d009      	beq.n	8002f64 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f54:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002f5e:	69ba      	ldr	r2, [r7, #24]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	68da      	ldr	r2, [r3, #12]
 8002f6a:	4b63      	ldr	r3, [pc, #396]	; (80030f8 <HAL_ADC_Init+0x30c>)
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	6812      	ldr	r2, [r2, #0]
 8002f72:	69b9      	ldr	r1, [r7, #24]
 8002f74:	430b      	orrs	r3, r1
 8002f76:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	430a      	orrs	r2, r1
 8002f8c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4618      	mov	r0, r3
 8002f94:	f7ff ff03 	bl	8002d9e <LL_ADC_REG_IsConversionOngoing>
 8002f98:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f7ff ff10 	bl	8002dc4 <LL_ADC_INJ_IsConversionOngoing>
 8002fa4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d16d      	bne.n	8003088 <HAL_ADC_Init+0x29c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d16a      	bne.n	8003088 <HAL_ADC_Init+0x29c>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002fb6:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002fbe:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002fce:	f023 0302 	bic.w	r3, r3, #2
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	6812      	ldr	r2, [r2, #0]
 8002fd6:	69b9      	ldr	r1, [r7, #24]
 8002fd8:	430b      	orrs	r3, r1
 8002fda:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	691b      	ldr	r3, [r3, #16]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d017      	beq.n	8003014 <HAL_ADC_Init+0x228>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	691a      	ldr	r2, [r3, #16]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002ff2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002ffc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003000:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003004:	687a      	ldr	r2, [r7, #4]
 8003006:	6911      	ldr	r1, [r2, #16]
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	6812      	ldr	r2, [r2, #0]
 800300c:	430b      	orrs	r3, r1
 800300e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8003012:	e013      	b.n	800303c <HAL_ADC_Init+0x250>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	691a      	ldr	r2, [r3, #16]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003022:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800302c:	687a      	ldr	r2, [r7, #4]
 800302e:	6812      	ldr	r2, [r2, #0]
 8003030:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003034:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003038:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003042:	2b01      	cmp	r3, #1
 8003044:	d118      	bne.n	8003078 <HAL_ADC_Init+0x28c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	691b      	ldr	r3, [r3, #16]
 800304c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003050:	f023 0304 	bic.w	r3, r3, #4
 8003054:	687a      	ldr	r2, [r7, #4]
 8003056:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800305c:	4311      	orrs	r1, r2
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003062:	4311      	orrs	r1, r2
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003068:	430a      	orrs	r2, r1
 800306a:	431a      	orrs	r2, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f042 0201 	orr.w	r2, r2, #1
 8003074:	611a      	str	r2, [r3, #16]
 8003076:	e007      	b.n	8003088 <HAL_ADC_Init+0x29c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	691a      	ldr	r2, [r3, #16]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f022 0201 	bic.w	r2, r2, #1
 8003086:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	695b      	ldr	r3, [r3, #20]
 800308c:	2b01      	cmp	r3, #1
 800308e:	d10c      	bne.n	80030aa <HAL_ADC_Init+0x2be>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003096:	f023 010f 	bic.w	r1, r3, #15
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6a1b      	ldr	r3, [r3, #32]
 800309e:	1e5a      	subs	r2, r3, #1
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	430a      	orrs	r2, r1
 80030a6:	631a      	str	r2, [r3, #48]	; 0x30
 80030a8:	e007      	b.n	80030ba <HAL_ADC_Init+0x2ce>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f022 020f 	bic.w	r2, r2, #15
 80030b8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030be:	f023 0303 	bic.w	r3, r3, #3
 80030c2:	f043 0201 	orr.w	r2, r3, #1
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	65da      	str	r2, [r3, #92]	; 0x5c
 80030ca:	e007      	b.n	80030dc <HAL_ADC_Init+0x2f0>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030d0:	f043 0210 	orr.w	r2, r3, #16
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80030dc:	7ffb      	ldrb	r3, [r7, #31]
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3724      	adds	r7, #36	; 0x24
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd90      	pop	{r4, r7, pc}
 80030e6:	bf00      	nop
 80030e8:	20000000 	.word	0x20000000
 80030ec:	053e2d63 	.word	0x053e2d63
 80030f0:	50000100 	.word	0x50000100
 80030f4:	50000300 	.word	0x50000300
 80030f8:	fff04007 	.word	0xfff04007

080030fc <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b08a      	sub	sp, #40	; 0x28
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003104:	2300      	movs	r3, #0
 8003106:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003118:	4883      	ldr	r0, [pc, #524]	; (8003328 <HAL_ADC_IRQHandler+0x22c>)
 800311a:	f7ff fd88 	bl	8002c2e <LL_ADC_GetMultimode>
 800311e:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	f003 0302 	and.w	r3, r3, #2
 8003126:	2b00      	cmp	r3, #0
 8003128:	d017      	beq.n	800315a <HAL_ADC_IRQHandler+0x5e>
 800312a:	69bb      	ldr	r3, [r7, #24]
 800312c:	f003 0302 	and.w	r3, r3, #2
 8003130:	2b00      	cmp	r3, #0
 8003132:	d012      	beq.n	800315a <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003138:	f003 0310 	and.w	r3, r3, #16
 800313c:	2b00      	cmp	r3, #0
 800313e:	d105      	bne.n	800314c <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003144:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	f000 fded 	bl	8003d2c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	2202      	movs	r2, #2
 8003158:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	f003 0304 	and.w	r3, r3, #4
 8003160:	2b00      	cmp	r3, #0
 8003162:	d004      	beq.n	800316e <HAL_ADC_IRQHandler+0x72>
 8003164:	69bb      	ldr	r3, [r7, #24]
 8003166:	f003 0304 	and.w	r3, r3, #4
 800316a:	2b00      	cmp	r3, #0
 800316c:	d10a      	bne.n	8003184 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003174:	2b00      	cmp	r3, #0
 8003176:	f000 8085 	beq.w	8003284 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800317a:	69bb      	ldr	r3, [r7, #24]
 800317c:	f003 0308 	and.w	r3, r3, #8
 8003180:	2b00      	cmp	r3, #0
 8003182:	d07f      	beq.n	8003284 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003188:	f003 0310 	and.w	r3, r3, #16
 800318c:	2b00      	cmp	r3, #0
 800318e:	d105      	bne.n	800319c <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003194:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4618      	mov	r0, r3
 80031a2:	f7ff fd1e 	bl	8002be2 <LL_ADC_REG_IsTriggerSourceSWStart>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d064      	beq.n	8003276 <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a5e      	ldr	r2, [pc, #376]	; (800332c <HAL_ADC_IRQHandler+0x230>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d002      	beq.n	80031bc <HAL_ADC_IRQHandler+0xc0>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	e001      	b.n	80031c0 <HAL_ADC_IRQHandler+0xc4>
 80031bc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80031c0:	687a      	ldr	r2, [r7, #4]
 80031c2:	6812      	ldr	r2, [r2, #0]
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d008      	beq.n	80031da <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d005      	beq.n	80031da <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	2b05      	cmp	r3, #5
 80031d2:	d002      	beq.n	80031da <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	2b09      	cmp	r3, #9
 80031d8:	d104      	bne.n	80031e4 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	623b      	str	r3, [r7, #32]
 80031e2:	e00d      	b.n	8003200 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a50      	ldr	r2, [pc, #320]	; (800332c <HAL_ADC_IRQHandler+0x230>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d002      	beq.n	80031f4 <HAL_ADC_IRQHandler+0xf8>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	e001      	b.n	80031f8 <HAL_ADC_IRQHandler+0xfc>
 80031f4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80031f8:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003200:	6a3b      	ldr	r3, [r7, #32]
 8003202:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d135      	bne.n	8003276 <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0308 	and.w	r3, r3, #8
 8003214:	2b08      	cmp	r3, #8
 8003216:	d12e      	bne.n	8003276 <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4618      	mov	r0, r3
 800321e:	f7ff fdbe 	bl	8002d9e <LL_ADC_REG_IsConversionOngoing>
 8003222:	4603      	mov	r3, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d11a      	bne.n	800325e <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	685a      	ldr	r2, [r3, #4]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f022 020c 	bic.w	r2, r2, #12
 8003236:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800323c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003248:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800324c:	2b00      	cmp	r3, #0
 800324e:	d112      	bne.n	8003276 <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003254:	f043 0201 	orr.w	r2, r3, #1
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	65da      	str	r2, [r3, #92]	; 0x5c
 800325c:	e00b      	b.n	8003276 <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003262:	f043 0210 	orr.w	r2, r3, #16
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800326e:	f043 0201 	orr.w	r2, r3, #1
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f000 f95a 	bl	8003530 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	220c      	movs	r2, #12
 8003282:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	f003 0320 	and.w	r3, r3, #32
 800328a:	2b00      	cmp	r3, #0
 800328c:	d004      	beq.n	8003298 <HAL_ADC_IRQHandler+0x19c>
 800328e:	69bb      	ldr	r3, [r7, #24]
 8003290:	f003 0320 	and.w	r3, r3, #32
 8003294:	2b00      	cmp	r3, #0
 8003296:	d10b      	bne.n	80032b0 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800329e:	2b00      	cmp	r3, #0
 80032a0:	f000 809e 	beq.w	80033e0 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80032a4:	69bb      	ldr	r3, [r7, #24]
 80032a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	f000 8098 	beq.w	80033e0 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032b4:	f003 0310 	and.w	r3, r3, #16
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d105      	bne.n	80032c8 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032c0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4618      	mov	r0, r3
 80032ce:	f7ff fc9b 	bl	8002c08 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80032d2:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4618      	mov	r0, r3
 80032da:	f7ff fc82 	bl	8002be2 <LL_ADC_REG_IsTriggerSourceSWStart>
 80032de:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a11      	ldr	r2, [pc, #68]	; (800332c <HAL_ADC_IRQHandler+0x230>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d002      	beq.n	80032f0 <HAL_ADC_IRQHandler+0x1f4>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	e001      	b.n	80032f4 <HAL_ADC_IRQHandler+0x1f8>
 80032f0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	6812      	ldr	r2, [r2, #0]
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d008      	beq.n	800330e <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d005      	beq.n	800330e <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	2b06      	cmp	r3, #6
 8003306:	d002      	beq.n	800330e <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	2b07      	cmp	r3, #7
 800330c:	d104      	bne.n	8003318 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	623b      	str	r3, [r7, #32]
 8003316:	e011      	b.n	800333c <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a03      	ldr	r2, [pc, #12]	; (800332c <HAL_ADC_IRQHandler+0x230>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d006      	beq.n	8003330 <HAL_ADC_IRQHandler+0x234>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	e005      	b.n	8003334 <HAL_ADC_IRQHandler+0x238>
 8003328:	50000300 	.word	0x50000300
 800332c:	50000100 	.word	0x50000100
 8003330:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003334:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	68db      	ldr	r3, [r3, #12]
 800333a:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d10c      	bne.n	800335c <HAL_ADC_IRQHandler+0x260>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8003342:	6a3b      	ldr	r3, [r7, #32]
 8003344:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8003348:	2b00      	cmp	r3, #0
 800334a:	d142      	bne.n	80033d2 <HAL_ADC_IRQHandler+0x2d6>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d03f      	beq.n	80033d2 <HAL_ADC_IRQHandler+0x2d6>
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
          (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
 8003352:	6a3b      	ldr	r3, [r7, #32]
 8003354:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 8003358:	2b00      	cmp	r3, #0
 800335a:	d13a      	bne.n	80033d2 <HAL_ADC_IRQHandler+0x2d6>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003366:	2b40      	cmp	r3, #64	; 0x40
 8003368:	d133      	bne.n	80033d2 <HAL_ADC_IRQHandler+0x2d6>
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800336a:	6a3b      	ldr	r3, [r7, #32]
 800336c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003370:	2b00      	cmp	r3, #0
 8003372:	d12e      	bne.n	80033d2 <HAL_ADC_IRQHandler+0x2d6>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4618      	mov	r0, r3
 800337a:	f7ff fd23 	bl	8002dc4 <LL_ADC_INJ_IsConversionOngoing>
 800337e:	4603      	mov	r3, r0
 8003380:	2b00      	cmp	r3, #0
 8003382:	d11a      	bne.n	80033ba <HAL_ADC_IRQHandler+0x2be>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	685a      	ldr	r2, [r3, #4]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003392:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003398:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d112      	bne.n	80033d2 <HAL_ADC_IRQHandler+0x2d6>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033b0:	f043 0201 	orr.w	r2, r3, #1
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	65da      	str	r2, [r3, #92]	; 0x5c
 80033b8:	e00b      	b.n	80033d2 <HAL_ADC_IRQHandler+0x2d6>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033be:	f043 0210 	orr.w	r2, r3, #16
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033ca:	f043 0201 	orr.w	r2, r3, #1
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f7fe fb94 	bl	8001b00 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	2260      	movs	r2, #96	; 0x60
 80033de:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d011      	beq.n	800340e <HAL_ADC_IRQHandler+0x312>
 80033ea:	69bb      	ldr	r3, [r7, #24]
 80033ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d00c      	beq.n	800340e <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033f8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f000 f89f 	bl	8003544 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	2280      	movs	r2, #128	; 0x80
 800340c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003414:	2b00      	cmp	r3, #0
 8003416:	d012      	beq.n	800343e <HAL_ADC_IRQHandler+0x342>
 8003418:	69bb      	ldr	r3, [r7, #24]
 800341a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800341e:	2b00      	cmp	r3, #0
 8003420:	d00d      	beq.n	800343e <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003426:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f000 fc68 	bl	8003d04 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f44f 7280 	mov.w	r2, #256	; 0x100
 800343c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003444:	2b00      	cmp	r3, #0
 8003446:	d012      	beq.n	800346e <HAL_ADC_IRQHandler+0x372>
 8003448:	69bb      	ldr	r3, [r7, #24]
 800344a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800344e:	2b00      	cmp	r3, #0
 8003450:	d00d      	beq.n	800346e <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003456:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f000 fc5a 	bl	8003d18 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f44f 7200 	mov.w	r2, #512	; 0x200
 800346c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	f003 0310 	and.w	r3, r3, #16
 8003474:	2b00      	cmp	r3, #0
 8003476:	d036      	beq.n	80034e6 <HAL_ADC_IRQHandler+0x3ea>
 8003478:	69bb      	ldr	r3, [r7, #24]
 800347a:	f003 0310 	and.w	r3, r3, #16
 800347e:	2b00      	cmp	r3, #0
 8003480:	d031      	beq.n	80034e6 <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003486:	2b00      	cmp	r3, #0
 8003488:	d102      	bne.n	8003490 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 800348a:	2301      	movs	r3, #1
 800348c:	627b      	str	r3, [r7, #36]	; 0x24
 800348e:	e014      	b.n	80034ba <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d008      	beq.n	80034a8 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003496:	4825      	ldr	r0, [pc, #148]	; (800352c <HAL_ADC_IRQHandler+0x430>)
 8003498:	f7ff fbd7 	bl	8002c4a <LL_ADC_GetMultiDMATransfer>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d00b      	beq.n	80034ba <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 80034a2:	2301      	movs	r3, #1
 80034a4:	627b      	str	r3, [r7, #36]	; 0x24
 80034a6:	e008      	b.n	80034ba <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	f003 0301 	and.w	r3, r3, #1
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d001      	beq.n	80034ba <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 80034b6:	2301      	movs	r3, #1
 80034b8:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80034ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d10e      	bne.n	80034de <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034c4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034d0:	f043 0202 	orr.w	r2, r3, #2
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f000 f83d 	bl	8003558 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	2210      	movs	r2, #16
 80034e4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d018      	beq.n	8003522 <HAL_ADC_IRQHandler+0x426>
 80034f0:	69bb      	ldr	r3, [r7, #24]
 80034f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d013      	beq.n	8003522 <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034fe:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800350a:	f043 0208 	orr.w	r2, r3, #8
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800351a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	f000 fbe7 	bl	8003cf0 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003522:	bf00      	nop
 8003524:	3728      	adds	r7, #40	; 0x28
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	50000300 	.word	0x50000300

08003530 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003538:	bf00      	nop
 800353a:	370c      	adds	r7, #12
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr

08003544 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800354c:	bf00      	nop
 800354e:	370c      	adds	r7, #12
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr

08003558 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003560:	bf00      	nop
 8003562:	370c      	adds	r7, #12
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr

0800356c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b084      	sub	sp, #16
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4618      	mov	r0, r3
 800357a:	f7ff fbea 	bl	8002d52 <LL_ADC_IsEnabled>
 800357e:	4603      	mov	r3, r0
 8003580:	2b00      	cmp	r3, #0
 8003582:	d146      	bne.n	8003612 <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	689a      	ldr	r2, [r3, #8]
 800358a:	4b24      	ldr	r3, [pc, #144]	; (800361c <ADC_Enable+0xb0>)
 800358c:	4013      	ands	r3, r2
 800358e:	2b00      	cmp	r3, #0
 8003590:	d00d      	beq.n	80035ae <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003596:	f043 0210 	orr.w	r2, r3, #16
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035a2:	f043 0201 	orr.w	r2, r3, #1
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e032      	b.n	8003614 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4618      	mov	r0, r3
 80035b4:	f7ff fba5 	bl	8002d02 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80035b8:	f7ff fad2 	bl	8002b60 <HAL_GetTick>
 80035bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80035be:	e021      	b.n	8003604 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4618      	mov	r0, r3
 80035c6:	f7ff fbc4 	bl	8002d52 <LL_ADC_IsEnabled>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d104      	bne.n	80035da <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4618      	mov	r0, r3
 80035d6:	f7ff fb94 	bl	8002d02 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80035da:	f7ff fac1 	bl	8002b60 <HAL_GetTick>
 80035de:	4602      	mov	r2, r0
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	1ad3      	subs	r3, r2, r3
 80035e4:	2b02      	cmp	r3, #2
 80035e6:	d90d      	bls.n	8003604 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ec:	f043 0210 	orr.w	r2, r3, #16
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035f8:	f043 0201 	orr.w	r2, r3, #1
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e007      	b.n	8003614 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0301 	and.w	r3, r3, #1
 800360e:	2b01      	cmp	r3, #1
 8003610:	d1d6      	bne.n	80035c0 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003612:	2300      	movs	r3, #0
}
 8003614:	4618      	mov	r0, r3
 8003616:	3710      	adds	r7, #16
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}
 800361c:	8000003f 	.word	0x8000003f

08003620 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4618      	mov	r0, r3
 800362e:	f7ff fba3 	bl	8002d78 <LL_ADC_IsDisableOngoing>
 8003632:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4618      	mov	r0, r3
 800363a:	f7ff fb8a 	bl	8002d52 <LL_ADC_IsEnabled>
 800363e:	4603      	mov	r3, r0
 8003640:	2b00      	cmp	r3, #0
 8003642:	d040      	beq.n	80036c6 <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d13d      	bne.n	80036c6 <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	f003 030d 	and.w	r3, r3, #13
 8003654:	2b01      	cmp	r3, #1
 8003656:	d10c      	bne.n	8003672 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4618      	mov	r0, r3
 800365e:	f7ff fb64 	bl	8002d2a <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	2203      	movs	r2, #3
 8003668:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800366a:	f7ff fa79 	bl	8002b60 <HAL_GetTick>
 800366e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003670:	e022      	b.n	80036b8 <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003676:	f043 0210 	orr.w	r2, r3, #16
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003682:	f043 0201 	orr.w	r2, r3, #1
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e01c      	b.n	80036c8 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800368e:	f7ff fa67 	bl	8002b60 <HAL_GetTick>
 8003692:	4602      	mov	r2, r0
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	2b02      	cmp	r3, #2
 800369a:	d90d      	bls.n	80036b8 <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036a0:	f043 0210 	orr.w	r2, r3, #16
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036ac:	f043 0201 	orr.w	r2, r3, #1
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e007      	b.n	80036c8 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	f003 0301 	and.w	r3, r3, #1
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d1e3      	bne.n	800368e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80036c6:	2300      	movs	r3, #0
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3710      	adds	r7, #16
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}

080036d0 <LL_ADC_SetCommonPathInternalCh>:
{
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	431a      	orrs	r2, r3
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	609a      	str	r2, [r3, #8]
}
 80036ea:	bf00      	nop
 80036ec:	370c      	adds	r7, #12
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr

080036f6 <LL_ADC_GetCommonPathInternalCh>:
{
 80036f6:	b480      	push	{r7}
 80036f8:	b083      	sub	sp, #12
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003706:	4618      	mov	r0, r3
 8003708:	370c      	adds	r7, #12
 800370a:	46bd      	mov	sp, r7
 800370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003710:	4770      	bx	lr
	...

08003714 <LL_ADC_SetOffset>:
{
 8003714:	b490      	push	{r4, r7}
 8003716:	b084      	sub	sp, #16
 8003718:	af00      	add	r7, sp, #0
 800371a:	60f8      	str	r0, [r7, #12]
 800371c:	60b9      	str	r1, [r7, #8]
 800371e:	607a      	str	r2, [r7, #4]
 8003720:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	3360      	adds	r3, #96	; 0x60
 8003726:	461a      	mov	r2, r3
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	4413      	add	r3, r2
 800372e:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 8003730:	6822      	ldr	r2, [r4, #0]
 8003732:	4b08      	ldr	r3, [pc, #32]	; (8003754 <LL_ADC_SetOffset+0x40>)
 8003734:	4013      	ands	r3, r2
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800373c:	683a      	ldr	r2, [r7, #0]
 800373e:	430a      	orrs	r2, r1
 8003740:	4313      	orrs	r3, r2
 8003742:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003746:	6023      	str	r3, [r4, #0]
}
 8003748:	bf00      	nop
 800374a:	3710      	adds	r7, #16
 800374c:	46bd      	mov	sp, r7
 800374e:	bc90      	pop	{r4, r7}
 8003750:	4770      	bx	lr
 8003752:	bf00      	nop
 8003754:	03fff000 	.word	0x03fff000

08003758 <LL_ADC_GetOffsetChannel>:
{
 8003758:	b490      	push	{r4, r7}
 800375a:	b082      	sub	sp, #8
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	3360      	adds	r3, #96	; 0x60
 8003766:	461a      	mov	r2, r3
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	4413      	add	r3, r2
 800376e:	461c      	mov	r4, r3
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003770:	6823      	ldr	r3, [r4, #0]
 8003772:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003776:	4618      	mov	r0, r3
 8003778:	3708      	adds	r7, #8
 800377a:	46bd      	mov	sp, r7
 800377c:	bc90      	pop	{r4, r7}
 800377e:	4770      	bx	lr

08003780 <LL_ADC_SetOffsetState>:
{
 8003780:	b490      	push	{r4, r7}
 8003782:	b084      	sub	sp, #16
 8003784:	af00      	add	r7, sp, #0
 8003786:	60f8      	str	r0, [r7, #12]
 8003788:	60b9      	str	r1, [r7, #8]
 800378a:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	3360      	adds	r3, #96	; 0x60
 8003790:	461a      	mov	r2, r3
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	4413      	add	r3, r2
 8003798:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 800379a:	6823      	ldr	r3, [r4, #0]
 800379c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	6023      	str	r3, [r4, #0]
}
 80037a6:	bf00      	nop
 80037a8:	3710      	adds	r7, #16
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bc90      	pop	{r4, r7}
 80037ae:	4770      	bx	lr

080037b0 <LL_ADC_SetOffsetSign>:
{
 80037b0:	b490      	push	{r4, r7}
 80037b2:	b084      	sub	sp, #16
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	60f8      	str	r0, [r7, #12]
 80037b8:	60b9      	str	r1, [r7, #8]
 80037ba:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	3360      	adds	r3, #96	; 0x60
 80037c0:	461a      	mov	r2, r3
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	4413      	add	r3, r2
 80037c8:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 80037ca:	6823      	ldr	r3, [r4, #0]
 80037cc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	4313      	orrs	r3, r2
 80037d4:	6023      	str	r3, [r4, #0]
}
 80037d6:	bf00      	nop
 80037d8:	3710      	adds	r7, #16
 80037da:	46bd      	mov	sp, r7
 80037dc:	bc90      	pop	{r4, r7}
 80037de:	4770      	bx	lr

080037e0 <LL_ADC_SetOffsetSaturation>:
{
 80037e0:	b490      	push	{r4, r7}
 80037e2:	b084      	sub	sp, #16
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	60f8      	str	r0, [r7, #12]
 80037e8:	60b9      	str	r1, [r7, #8]
 80037ea:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	3360      	adds	r3, #96	; 0x60
 80037f0:	461a      	mov	r2, r3
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	4413      	add	r3, r2
 80037f8:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 80037fa:	6823      	ldr	r3, [r4, #0]
 80037fc:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	4313      	orrs	r3, r2
 8003804:	6023      	str	r3, [r4, #0]
}
 8003806:	bf00      	nop
 8003808:	3710      	adds	r7, #16
 800380a:	46bd      	mov	sp, r7
 800380c:	bc90      	pop	{r4, r7}
 800380e:	4770      	bx	lr

08003810 <LL_ADC_SetSamplingTimeCommonConfig>:
{
 8003810:	b480      	push	{r7}
 8003812:	b083      	sub	sp, #12
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
 8003818:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	695b      	ldr	r3, [r3, #20]
 800381e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	431a      	orrs	r2, r3
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	615a      	str	r2, [r3, #20]
}
 800382a:	bf00      	nop
 800382c:	370c      	adds	r7, #12
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr

08003836 <LL_ADC_INJ_GetTrigAuto>:
{
 8003836:	b480      	push	{r7}
 8003838:	b083      	sub	sp, #12
 800383a:	af00      	add	r7, sp, #0
 800383c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JAUTO));
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
}
 8003846:	4618      	mov	r0, r3
 8003848:	370c      	adds	r7, #12
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr

08003852 <LL_ADC_SetChannelSamplingTime>:
{
 8003852:	b490      	push	{r4, r7}
 8003854:	b084      	sub	sp, #16
 8003856:	af00      	add	r7, sp, #0
 8003858:	60f8      	str	r0, [r7, #12]
 800385a:	60b9      	str	r1, [r7, #8]
 800385c:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	3314      	adds	r3, #20
 8003862:	461a      	mov	r2, r3
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	0e5b      	lsrs	r3, r3, #25
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	f003 0304 	and.w	r3, r3, #4
 800386e:	4413      	add	r3, r2
 8003870:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 8003872:	6822      	ldr	r2, [r4, #0]
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	0d1b      	lsrs	r3, r3, #20
 8003878:	f003 031f 	and.w	r3, r3, #31
 800387c:	2107      	movs	r1, #7
 800387e:	fa01 f303 	lsl.w	r3, r1, r3
 8003882:	43db      	mvns	r3, r3
 8003884:	401a      	ands	r2, r3
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	0d1b      	lsrs	r3, r3, #20
 800388a:	f003 031f 	and.w	r3, r3, #31
 800388e:	6879      	ldr	r1, [r7, #4]
 8003890:	fa01 f303 	lsl.w	r3, r1, r3
 8003894:	4313      	orrs	r3, r2
 8003896:	6023      	str	r3, [r4, #0]
}
 8003898:	bf00      	nop
 800389a:	3710      	adds	r7, #16
 800389c:	46bd      	mov	sp, r7
 800389e:	bc90      	pop	{r4, r7}
 80038a0:	4770      	bx	lr
	...

080038a4 <LL_ADC_SetChannelSingleDiff>:
{
 80038a4:	b480      	push	{r7}
 80038a6:	b085      	sub	sp, #20
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	60f8      	str	r0, [r7, #12]
 80038ac:	60b9      	str	r1, [r7, #8]
 80038ae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->DIFSEL,
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038bc:	43db      	mvns	r3, r3
 80038be:	401a      	ands	r2, r3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f003 0318 	and.w	r3, r3, #24
 80038c6:	4908      	ldr	r1, [pc, #32]	; (80038e8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80038c8:	40d9      	lsrs	r1, r3
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	400b      	ands	r3, r1
 80038ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038d2:	431a      	orrs	r2, r3
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80038da:	bf00      	nop
 80038dc:	3714      	adds	r7, #20
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
 80038e6:	bf00      	nop
 80038e8:	0007ffff 	.word	0x0007ffff

080038ec <LL_ADC_GetMultimode>:
{
 80038ec:	b480      	push	{r7}
 80038ee:	b083      	sub	sp, #12
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	f003 031f 	and.w	r3, r3, #31
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	370c      	adds	r7, #12
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr

08003908 <LL_ADC_IsEnabled>:
{
 8003908:	b480      	push	{r7}
 800390a:	b083      	sub	sp, #12
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	f003 0301 	and.w	r3, r3, #1
 8003918:	2b01      	cmp	r3, #1
 800391a:	d101      	bne.n	8003920 <LL_ADC_IsEnabled+0x18>
 800391c:	2301      	movs	r3, #1
 800391e:	e000      	b.n	8003922 <LL_ADC_IsEnabled+0x1a>
 8003920:	2300      	movs	r3, #0
}
 8003922:	4618      	mov	r0, r3
 8003924:	370c      	adds	r7, #12
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr

0800392e <LL_ADC_StartCalibration>:
{
 800392e:	b480      	push	{r7}
 8003930:	b083      	sub	sp, #12
 8003932:	af00      	add	r7, sp, #0
 8003934:	6078      	str	r0, [r7, #4]
 8003936:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003940:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003944:	683a      	ldr	r2, [r7, #0]
 8003946:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800394a:	4313      	orrs	r3, r2
 800394c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	609a      	str	r2, [r3, #8]
}
 8003954:	bf00      	nop
 8003956:	370c      	adds	r7, #12
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr

08003960 <LL_ADC_IsCalibrationOnGoing>:
{
 8003960:	b480      	push	{r7}
 8003962:	b083      	sub	sp, #12
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003970:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003974:	d101      	bne.n	800397a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003976:	2301      	movs	r3, #1
 8003978:	e000      	b.n	800397c <LL_ADC_IsCalibrationOnGoing+0x1c>
 800397a:	2300      	movs	r3, #0
}
 800397c:	4618      	mov	r0, r3
 800397e:	370c      	adds	r7, #12
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr

08003988 <LL_ADC_REG_IsConversionOngoing>:
{
 8003988:	b480      	push	{r7}
 800398a:	b083      	sub	sp, #12
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	f003 0304 	and.w	r3, r3, #4
 8003998:	2b04      	cmp	r3, #4
 800399a:	d101      	bne.n	80039a0 <LL_ADC_REG_IsConversionOngoing+0x18>
 800399c:	2301      	movs	r3, #1
 800399e:	e000      	b.n	80039a2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80039a0:	2300      	movs	r3, #0
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	370c      	adds	r7, #12
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr

080039ae <LL_ADC_INJ_StartConversion>:
{
 80039ae:	b480      	push	{r7}
 80039b0:	b083      	sub	sp, #12
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80039be:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80039c2:	f043 0208 	orr.w	r2, r3, #8
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	609a      	str	r2, [r3, #8]
}
 80039ca:	bf00      	nop
 80039cc:	370c      	adds	r7, #12
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr

080039d6 <LL_ADC_INJ_IsConversionOngoing>:
{
 80039d6:	b480      	push	{r7}
 80039d8:	b083      	sub	sp, #12
 80039da:	af00      	add	r7, sp, #0
 80039dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	f003 0308 	and.w	r3, r3, #8
 80039e6:	2b08      	cmp	r3, #8
 80039e8:	d101      	bne.n	80039ee <LL_ADC_INJ_IsConversionOngoing+0x18>
 80039ea:	2301      	movs	r3, #1
 80039ec:	e000      	b.n	80039f0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80039ee:	2300      	movs	r3, #0
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	370c      	adds	r7, #12
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr

080039fc <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003a06:	2300      	movs	r3, #0
 8003a08:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d101      	bne.n	8003a18 <HAL_ADCEx_Calibration_Start+0x1c>
 8003a14:	2302      	movs	r3, #2
 8003a16:	e04d      	b.n	8003ab4 <HAL_ADCEx_Calibration_Start+0xb8>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f7ff fdfd 	bl	8003620 <ADC_Disable>
 8003a26:	4603      	mov	r3, r0
 8003a28:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003a2a:	7bfb      	ldrb	r3, [r7, #15]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d136      	bne.n	8003a9e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a34:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003a38:	f023 0302 	bic.w	r3, r3, #2
 8003a3c:	f043 0202 	orr.w	r2, r3, #2
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	6839      	ldr	r1, [r7, #0]
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f7ff ff6f 	bl	800392e <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003a50:	e014      	b.n	8003a7c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	3301      	adds	r3, #1
 8003a56:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	4a18      	ldr	r2, [pc, #96]	; (8003abc <HAL_ADCEx_Calibration_Start+0xc0>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d90d      	bls.n	8003a7c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a64:	f023 0312 	bic.w	r3, r3, #18
 8003a68:	f043 0210 	orr.w	r2, r3, #16
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e01b      	b.n	8003ab4 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4618      	mov	r0, r3
 8003a82:	f7ff ff6d 	bl	8003960 <LL_ADC_IsCalibrationOnGoing>
 8003a86:	4603      	mov	r3, r0
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d1e2      	bne.n	8003a52 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a90:	f023 0303 	bic.w	r3, r3, #3
 8003a94:	f043 0201 	orr.w	r2, r3, #1
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	65da      	str	r2, [r3, #92]	; 0x5c
 8003a9c:	e005      	b.n	8003aaa <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aa2:	f043 0210 	orr.w	r2, r3, #16
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003ab2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3710      	adds	r7, #16
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}
 8003abc:	0004de01 	.word	0x0004de01

08003ac0 <HAL_ADCEx_InjectedStart_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef *hadc)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b086      	sub	sp, #24
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_config_injected_queue;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003ac8:	486e      	ldr	r0, [pc, #440]	; (8003c84 <HAL_ADCEx_InjectedStart_IT+0x1c4>)
 8003aca:	f7ff ff0f 	bl	80038ec <LL_ADC_GetMultimode>
 8003ace:	6178      	str	r0, [r7, #20]
#endif

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f7ff ff7e 	bl	80039d6 <LL_ADC_INJ_IsConversionOngoing>
 8003ada:	4603      	mov	r3, r0
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d001      	beq.n	8003ae4 <HAL_ADCEx_InjectedStart_IT+0x24>
  {
    return HAL_BUSY;
 8003ae0:	2302      	movs	r3, #2
 8003ae2:	e0ca      	b.n	8003c7a <HAL_ADCEx_InjectedStart_IT+0x1ba>
       If JQDIS is not set at that point, returns an error
       - since software trigger detection is disabled. User needs to
       resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
       - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
         the queue is empty */
    tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003aee:	613b      	str	r3, [r7, #16]

    if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003af6:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d10a      	bne.n	8003b14 <HAL_ADCEx_InjectedStart_IT+0x54>
        && (tmp_config_injected_queue == 0UL)
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d107      	bne.n	8003b14 <HAL_ADCEx_InjectedStart_IT+0x54>
       )
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b08:	f043 0220 	orr.w	r2, r3, #32
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	e0b2      	b.n	8003c7a <HAL_ADCEx_InjectedStart_IT+0x1ba>
    }

    /* Process locked */
    __HAL_LOCK(hadc);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d101      	bne.n	8003b22 <HAL_ADCEx_InjectedStart_IT+0x62>
 8003b1e:	2302      	movs	r3, #2
 8003b20:	e0ab      	b.n	8003c7a <HAL_ADCEx_InjectedStart_IT+0x1ba>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2201      	movs	r2, #1
 8003b26:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f7ff fd1e 	bl	800356c <ADC_Enable>
 8003b30:	4603      	mov	r3, r0
 8003b32:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003b34:	7bfb      	ldrb	r3, [r7, #15]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	f040 809a 	bne.w	8003c70 <HAL_ADCEx_InjectedStart_IT+0x1b0>
    {
      /* Check if a regular conversion is ongoing */
      if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d006      	beq.n	8003b56 <HAL_ADCEx_InjectedStart_IT+0x96>
      {
        /* Reset ADC error code field related to injected conversions only */
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b4c:	f023 0208 	bic.w	r2, r3, #8
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	661a      	str	r2, [r3, #96]	; 0x60
 8003b54:	e002      	b.n	8003b5c <HAL_ADCEx_InjectedStart_IT+0x9c>
      }
      else
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b60:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003b64:	f023 0301 	bic.w	r3, r3, #1
 8003b68:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a44      	ldr	r2, [pc, #272]	; (8003c88 <HAL_ADCEx_InjectedStart_IT+0x1c8>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d002      	beq.n	8003b80 <HAL_ADCEx_InjectedStart_IT+0xc0>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	e001      	b.n	8003b84 <HAL_ADCEx_InjectedStart_IT+0xc4>
 8003b80:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003b84:	687a      	ldr	r2, [r7, #4]
 8003b86:	6812      	ldr	r2, [r2, #0]
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d002      	beq.n	8003b92 <HAL_ADCEx_InjectedStart_IT+0xd2>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d105      	bne.n	8003b9e <HAL_ADCEx_InjectedStart_IT+0xde>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b96:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Clear ADC group injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	2260      	movs	r2, #96	; 0x60
 8003ba4:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* Enable ADC Injected context queue overflow interrupt if this feature   */
      /* is enabled.                                                            */
      if ((hadc->Instance->CFGR & ADC_CFGR_JQM) != 0UL)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d007      	beq.n	8003bcc <HAL_ADCEx_InjectedStart_IT+0x10c>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_FLAG_JQOVF);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	685a      	ldr	r2, [r3, #4]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003bca:	605a      	str	r2, [r3, #4]
      }

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	699b      	ldr	r3, [r3, #24]
 8003bd0:	2b08      	cmp	r3, #8
 8003bd2:	d110      	bne.n	8003bf6 <HAL_ADCEx_InjectedStart_IT+0x136>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	685a      	ldr	r2, [r3, #4]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f022 0220 	bic.w	r2, r2, #32
 8003be2:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	685a      	ldr	r2, [r3, #4]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003bf2:	605a      	str	r2, [r3, #4]
          break;
 8003bf4:	e010      	b.n	8003c18 <HAL_ADCEx_InjectedStart_IT+0x158>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	685a      	ldr	r2, [r3, #4]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c04:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	685a      	ldr	r2, [r3, #4]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f042 0220 	orr.w	r2, r2, #32
 8003c14:	605a      	str	r2, [r3, #4]
          break;
 8003c16:	bf00      	nop
      /*    - if multimode only concerns regular conversion, ADC is enabled     */
      /*     and conversion is started.                                         */
      /* If ADC is master or independent,                                       */
      /*    - ADC is enabled and conversion is started.                         */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a1a      	ldr	r2, [pc, #104]	; (8003c88 <HAL_ADCEx_InjectedStart_IT+0x1c8>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d002      	beq.n	8003c28 <HAL_ADCEx_InjectedStart_IT+0x168>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	e001      	b.n	8003c2c <HAL_ADCEx_InjectedStart_IT+0x16c>
 8003c28:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003c2c:	687a      	ldr	r2, [r7, #4]
 8003c2e:	6812      	ldr	r2, [r2, #0]
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d008      	beq.n	8003c46 <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d005      	beq.n	8003c46 <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	2b06      	cmp	r3, #6
 8003c3e:	d002      	beq.n	8003c46 <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	2b07      	cmp	r3, #7
 8003c44:	d10d      	bne.n	8003c62 <HAL_ADCEx_InjectedStart_IT+0x1a2>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f7ff fdf3 	bl	8003836 <LL_ADC_INJ_GetTrigAuto>
 8003c50:	4603      	mov	r3, r0
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d110      	bne.n	8003c78 <HAL_ADCEx_InjectedStart_IT+0x1b8>
        {
          LL_ADC_INJ_StartConversion(hadc->Instance);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f7ff fea7 	bl	80039ae <LL_ADC_INJ_StartConversion>
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8003c60:	e00a      	b.n	8003c78 <HAL_ADCEx_InjectedStart_IT+0x1b8>
        }
      }
      else
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c66:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	65da      	str	r2, [r3, #92]	; 0x5c
 8003c6e:	e003      	b.n	8003c78 <HAL_ADCEx_InjectedStart_IT+0x1b8>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 8003c78:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3718      	adds	r7, #24
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	50000300 	.word	0x50000300
 8003c88:	50000100 	.word	0x50000100

08003c8c <HAL_ADCEx_InjectedGetValue>:
  *            @arg @ref ADC_INJECTED_RANK_3 ADC group injected rank 3
  *            @arg @ref ADC_INJECTED_RANK_4 ADC group injected rank 4
  * @retval ADC group injected conversion data
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef *hadc, uint32_t InjectedRank)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b085      	sub	sp, #20
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));

  /* Get ADC converted value */
  switch (InjectedRank)
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	f240 2215 	movw	r2, #533	; 0x215
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d00e      	beq.n	8003cbe <HAL_ADCEx_InjectedGetValue+0x32>
 8003ca0:	f240 321b 	movw	r2, #795	; 0x31b
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d004      	beq.n	8003cb2 <HAL_ADCEx_InjectedGetValue+0x26>
 8003ca8:	f240 120f 	movw	r2, #271	; 0x10f
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d00c      	beq.n	8003cca <HAL_ADCEx_InjectedGetValue+0x3e>
 8003cb0:	e011      	b.n	8003cd6 <HAL_ADCEx_InjectedGetValue+0x4a>
  {
    case ADC_INJECTED_RANK_4:
      tmp_jdr = hadc->Instance->JDR4;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cba:	60fb      	str	r3, [r7, #12]
      break;
 8003cbc:	e011      	b.n	8003ce2 <HAL_ADCEx_InjectedGetValue+0x56>
    case ADC_INJECTED_RANK_3:
      tmp_jdr = hadc->Instance->JDR3;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cc6:	60fb      	str	r3, [r7, #12]
      break;
 8003cc8:	e00b      	b.n	8003ce2 <HAL_ADCEx_InjectedGetValue+0x56>
    case ADC_INJECTED_RANK_2:
      tmp_jdr = hadc->Instance->JDR2;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cd2:	60fb      	str	r3, [r7, #12]
      break;
 8003cd4:	e005      	b.n	8003ce2 <HAL_ADCEx_InjectedGetValue+0x56>
    case ADC_INJECTED_RANK_1:
    default:
      tmp_jdr = hadc->Instance->JDR1;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cde:	60fb      	str	r3, [r7, #12]
      break;
 8003ce0:	bf00      	nop
  }

  /* Return ADC converted value */
  return tmp_jdr;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	3714      	adds	r7, #20
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr

08003cf0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003cf8:	bf00      	nop
 8003cfa:	370c      	adds	r7, #12
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr

08003d04 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b083      	sub	sp, #12
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003d0c:	bf00      	nop
 8003d0e:	370c      	adds	r7, #12
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr

08003d18 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b083      	sub	sp, #12
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003d20:	bf00      	nop
 8003d22:	370c      	adds	r7, #12
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr

08003d2c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b083      	sub	sp, #12
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003d34:	bf00      	nop
 8003d36:	370c      	adds	r7, #12
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr

08003d40 <HAL_ADCEx_InjectedConfigChannel>:
  * @param sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b0a8      	sub	sp, #160	; 0xa0
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0;
 8003d50:	2300      	movs	r3, #0
 8003d52:	60fb      	str	r3, [r7, #12]

  uint32_t tmp_JSQR_ContextQueueBeingBuilt = 0U;
 8003d54:	2300      	movs	r3, #0
 8003d56:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d102      	bne.n	8003d6a <HAL_ADCEx_InjectedConfigChannel+0x2a>
 8003d64:	2302      	movs	r3, #2
 8003d66:	f000 bc39 	b.w	80045dc <HAL_ADCEx_InjectedConfigChannel+0x89c>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	695b      	ldr	r3, [r3, #20]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d003      	beq.n	8003d82 <HAL_ADCEx_InjectedConfigChannel+0x42>
      (sConfigInjected->InjectedNbrOfConversion == 1U))
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	6a1b      	ldr	r3, [r3, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	d130      	bne.n	8003de4 <HAL_ADCEx_InjectedConfigChannel+0xa4>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 can be used) */

    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	2b09      	cmp	r3, #9
 8003d88:	d179      	bne.n	8003e7e <HAL_ADCEx_InjectedConfigChannel+0x13e>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d010      	beq.n	8003db4 <HAL_ADCEx_InjectedConfigChannel+0x74>
      {
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	0e9b      	lsrs	r3, r3, #26
 8003d98:	025b      	lsls	r3, r3, #9
 8003d9a:	f403 5278 	and.w	r2, r3, #15872	; 0x3e00
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003da2:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8003da6:	431a      	orrs	r2, r3
                                           | sConfigInjected->ExternalTrigInjecConvEdge
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8003dac:	4313      	orrs	r3, r2
 8003dae:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003db2:	e007      	b.n	8003dc4 <HAL_ADCEx_InjectedConfigChannel+0x84>
                                          );
      }
      else
      {
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	0e9b      	lsrs	r3, r3, #26
 8003dba:	025b      	lsls	r3, r3, #9
 8003dbc:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 8003dc0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
      }

      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_JSQR_ContextQueueBeingBuilt);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003dca:	4ba3      	ldr	r3, [pc, #652]	; (8004058 <HAL_ADCEx_InjectedConfigChannel+0x318>)
 8003dcc:	4013      	ands	r3, r2
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	6812      	ldr	r2, [r2, #0]
 8003dd2:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8003dd6:	430b      	orrs	r3, r1
 8003dd8:	64d3      	str	r3, [r2, #76]	; 0x4c
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8003de0:	665a      	str	r2, [r3, #100]	; 0x64
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8003de2:	e04c      	b.n	8003e7e <HAL_ADCEx_InjectedConfigChannel+0x13e>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d11d      	bne.n	8003e28 <HAL_ADCEx_InjectedConfigChannel+0xe8>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = sConfigInjected->InjectedNbrOfConversion;
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	6a1a      	ldr	r2, [r3, #32]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	669a      	str	r2, [r3, #104]	; 0x68
      /* Handle hadc saves the context under build up over each HAL_ADCEx_InjectedConfigChannel()
         call, this context will be written in JSQR register at the last call.
         At this point, the context is merely reset  */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2200      	movs	r2, #0
 8003df8:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d00d      	beq.n	8003e1e <HAL_ADCEx_InjectedConfigChannel+0xde>
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	6a1b      	ldr	r3, [r3, #32]
 8003e06:	1e5a      	subs	r2, r3, #1
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e0c:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8003e10:	431a      	orrs	r2, r3
                                           | sConfigInjected->ExternalTrigInjecConvEdge
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8003e16:	4313      	orrs	r3, r2
 8003e18:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003e1c:	e004      	b.n	8003e28 <HAL_ADCEx_InjectedConfigChannel+0xe8>
                                          );
      }
      else
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U));
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	6a1b      	ldr	r3, [r3, #32]
 8003e22:	3b01      	subs	r3, #1
 8003e24:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	0e9b      	lsrs	r3, r3, #26
 8003e2e:	f003 021f 	and.w	r2, r3, #31
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	f003 031f 	and.w	r3, r3, #31
 8003e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e3e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8003e42:	4313      	orrs	r3, r2
 8003e44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e4c:	1e5a      	subs	r2, r3, #1
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	669a      	str	r2, [r3, #104]	; 0x68

    /* 3. tmp_JSQR_ContextQueueBeingBuilt is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003e56:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003e5a:	431a      	orrs	r2, r3
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	665a      	str	r2, [r3, #100]	; 0x64

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d10a      	bne.n	8003e7e <HAL_ADCEx_InjectedConfigChannel+0x13e>
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003e6e:	4b7a      	ldr	r3, [pc, #488]	; (8004058 <HAL_ADCEx_InjectedConfigChannel+0x318>)
 8003e70:	4013      	ands	r3, r2
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	6e51      	ldr	r1, [r2, #100]	; 0x64
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	6812      	ldr	r2, [r2, #0]
 8003e7a:	430b      	orrs	r3, r1
 8003e7c:	64d3      	str	r3, [r2, #76]	; 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4618      	mov	r0, r3
 8003e84:	f7ff fda7 	bl	80039d6 <LL_ADC_INJ_IsConversionOngoing>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d124      	bne.n	8003ed8 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d112      	bne.n	8003ebe <HAL_ADCEx_InjectedConfigChannel+0x17e>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	68db      	ldr	r3, [r3, #12]
 8003e9e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003ea8:	055a      	lsls	r2, r3, #21
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003eb0:	051b      	lsls	r3, r3, #20
 8003eb2:	431a      	orrs	r2, r3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	430a      	orrs	r2, r1
 8003eba:	60da      	str	r2, [r3, #12]
 8003ebc:	e00c      	b.n	8003ed8 <HAL_ADCEx_InjectedConfigChannel+0x198>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003ece:	055a      	lsls	r2, r3, #21
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	430a      	orrs	r2, r1
 8003ed6:	60da      	str	r2, [r3, #12]
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4618      	mov	r0, r3
 8003ede:	f7ff fd53 	bl	8003988 <LL_ADC_REG_IsConversionOngoing>
 8003ee2:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4618      	mov	r0, r3
 8003eec:	f7ff fd73 	bl	80039d6 <LL_ADC_INJ_IsConversionOngoing>
 8003ef0:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003ef4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	f040 81d4 	bne.w	80042a6 <HAL_ADCEx_InjectedConfigChannel+0x566>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003efe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	f040 81cf 	bne.w	80042a6 <HAL_ADCEx_InjectedConfigChannel+0x566>
     )
  {
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if ((sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d003      	beq.n	8003f18 <HAL_ADCEx_InjectedConfigChannel+0x1d8>
        || (sConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d116      	bne.n	8003f46 <HAL_ADCEx_InjectedConfigChannel+0x206>
    {
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d108      	bne.n	8003f34 <HAL_ADCEx_InjectedConfigChannel+0x1f4>
      {
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	68da      	ldr	r2, [r3, #12]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8003f30:	60da      	str	r2, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8003f32:	e01f      	b.n	8003f74 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	68da      	ldr	r2, [r3, #12]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8003f42:	60da      	str	r2, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8003f44:	e016      	b.n	8003f74 <HAL_ADCEx_InjectedConfigChannel+0x234>
    }
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d109      	bne.n	8003f64 <HAL_ADCEx_InjectedConfigChannel+0x224>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f54:	f043 0220 	orr.w	r2, r3, #32
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	65da      	str	r2, [r3, #92]	; 0x5c

        tmp_hal_status = HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 8003f62:	e007      	b.n	8003f74 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	68da      	ldr	r2, [r3, #12]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8003f72:	60da      	str	r2, [r3, #12]
      }
    }

    if (sConfigInjected->InjecOversamplingMode == ENABLE)
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d110      	bne.n	8003fa0 <HAL_ADCEx_InjectedConfigChannel+0x260>
      /* Configuration of Injected Oversampler:                                 */
      /*  - Oversampling Ratio                                                  */
      /*  - Right bit shift                                                     */

      /* Enable OverSampling mode */
      MODIFY_REG(hadc->Instance->CFGR2,
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	691b      	ldr	r3, [r3, #16]
 8003f84:	f423 72ff 	bic.w	r2, r3, #510	; 0x1fe
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f90:	430b      	orrs	r3, r1
 8003f92:	431a      	orrs	r2, r3
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f042 0202 	orr.w	r2, r2, #2
 8003f9c:	611a      	str	r2, [r3, #16]
 8003f9e:	e007      	b.n	8003fb0 <HAL_ADCEx_InjectedConfigChannel+0x270>
                );
    }
    else
    {
      /* Disable Regular OverSampling */
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	691a      	ldr	r2, [r3, #16]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f022 0202 	bic.w	r2, r2, #2
 8003fae:	611a      	str	r2, [r3, #16]
    }

    /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
    if (sConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003fb8:	d10f      	bne.n	8003fda <HAL_ADCEx_InjectedConfigChannel+0x29a>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfigInjected->InjectedChannel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6818      	ldr	r0, [r3, #0]
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	4619      	mov	r1, r3
 8003fc6:	f7ff fc44 	bl	8003852 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f7ff fc1c 	bl	8003810 <LL_ADC_SetSamplingTimeCommonConfig>
 8003fd8:	e00e      	b.n	8003ff8 <HAL_ADCEx_InjectedConfigChannel+0x2b8>
    }
    else
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSamplingTime);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6818      	ldr	r0, [r3, #0]
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	6819      	ldr	r1, [r3, #0]
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	f7ff fc33 	bl	8003852 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	2100      	movs	r1, #0
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f7ff fc0c 	bl	8003810 <LL_ADC_SetSamplingTimeCommonConfig>

    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset with respect to the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	695a      	ldr	r2, [r3, #20]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	08db      	lsrs	r3, r3, #3
 8004004:	f003 0303 	and.w	r3, r3, #3
 8004008:	005b      	lsls	r3, r3, #1
 800400a:	fa02 f303 	lsl.w	r3, r2, r3
 800400e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	691b      	ldr	r3, [r3, #16]
 8004016:	2b04      	cmp	r3, #4
 8004018:	d025      	beq.n	8004066 <HAL_ADCEx_InjectedConfigChannel+0x326>
    {
      /* Set ADC selected offset number */
      LL_ADC_SetOffset(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedChannel,
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6818      	ldr	r0, [r3, #0]
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	6919      	ldr	r1, [r3, #16]
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800402a:	f7ff fb73 	bl	8003714 <LL_ADC_SetOffset>
                       tmpOffsetShifted);

      /* Set ADC selected offset sign & saturation */
      LL_ADC_SetOffsetSign(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedOffsetSign);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6818      	ldr	r0, [r3, #0]
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	6919      	ldr	r1, [r3, #16]
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	699b      	ldr	r3, [r3, #24]
 800403a:	461a      	mov	r2, r3
 800403c:	f7ff fbb8 	bl	80037b0 <LL_ADC_SetOffsetSign>
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6818      	ldr	r0, [r3, #0]
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	6919      	ldr	r1, [r3, #16]
                                 (sConfigInjected->InjectedOffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	7f1b      	ldrb	r3, [r3, #28]
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 800404c:	2b01      	cmp	r3, #1
 800404e:	d105      	bne.n	800405c <HAL_ADCEx_InjectedConfigChannel+0x31c>
 8004050:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004054:	e003      	b.n	800405e <HAL_ADCEx_InjectedConfigChannel+0x31e>
 8004056:	bf00      	nop
 8004058:	04104000 	.word	0x04104000
 800405c:	2300      	movs	r3, #0
 800405e:	461a      	mov	r2, r3
 8004060:	f7ff fbbe 	bl	80037e0 <LL_ADC_SetOffsetSaturation>
 8004064:	e11f      	b.n	80042a6 <HAL_ADCEx_InjectedConfigChannel+0x566>
    }
    else
    {
      /* Scan each offset register to check if the selected channel is targeted. */
      /* If this is the case, the corresponding offset number is disabled.       */
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	2100      	movs	r1, #0
 800406c:	4618      	mov	r0, r3
 800406e:	f7ff fb73 	bl	8003758 <LL_ADC_GetOffsetChannel>
 8004072:	4603      	mov	r3, r0
 8004074:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004078:	2b00      	cmp	r3, #0
 800407a:	d10a      	bne.n	8004092 <HAL_ADCEx_InjectedConfigChannel+0x352>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	2100      	movs	r1, #0
 8004082:	4618      	mov	r0, r3
 8004084:	f7ff fb68 	bl	8003758 <LL_ADC_GetOffsetChannel>
 8004088:	4603      	mov	r3, r0
 800408a:	0e9b      	lsrs	r3, r3, #26
 800408c:	f003 021f 	and.w	r2, r3, #31
 8004090:	e014      	b.n	80040bc <HAL_ADCEx_InjectedConfigChannel+0x37c>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	2100      	movs	r1, #0
 8004098:	4618      	mov	r0, r3
 800409a:	f7ff fb5d 	bl	8003758 <LL_ADC_GetOffsetChannel>
 800409e:	4603      	mov	r3, r0
 80040a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80040a8:	fa93 f3a3 	rbit	r3, r3
 80040ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80040b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80040b4:	fab3 f383 	clz	r3, r3
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	461a      	mov	r2, r3
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d105      	bne.n	80040d4 <HAL_ADCEx_InjectedConfigChannel+0x394>
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	0e9b      	lsrs	r3, r3, #26
 80040ce:	f003 031f 	and.w	r3, r3, #31
 80040d2:	e00a      	b.n	80040ea <HAL_ADCEx_InjectedConfigChannel+0x3aa>
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040da:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80040dc:	fa93 f3a3 	rbit	r3, r3
 80040e0:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 80040e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040e4:	fab3 f383 	clz	r3, r3
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	429a      	cmp	r2, r3
 80040ec:	d106      	bne.n	80040fc <HAL_ADCEx_InjectedConfigChannel+0x3bc>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	2200      	movs	r2, #0
 80040f4:	2100      	movs	r1, #0
 80040f6:	4618      	mov	r0, r3
 80040f8:	f7ff fb42 	bl	8003780 <LL_ADC_SetOffsetState>
      }
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	2101      	movs	r1, #1
 8004102:	4618      	mov	r0, r3
 8004104:	f7ff fb28 	bl	8003758 <LL_ADC_GetOffsetChannel>
 8004108:	4603      	mov	r3, r0
 800410a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800410e:	2b00      	cmp	r3, #0
 8004110:	d10a      	bne.n	8004128 <HAL_ADCEx_InjectedConfigChannel+0x3e8>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	2101      	movs	r1, #1
 8004118:	4618      	mov	r0, r3
 800411a:	f7ff fb1d 	bl	8003758 <LL_ADC_GetOffsetChannel>
 800411e:	4603      	mov	r3, r0
 8004120:	0e9b      	lsrs	r3, r3, #26
 8004122:	f003 021f 	and.w	r2, r3, #31
 8004126:	e010      	b.n	800414a <HAL_ADCEx_InjectedConfigChannel+0x40a>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	2101      	movs	r1, #1
 800412e:	4618      	mov	r0, r3
 8004130:	f7ff fb12 	bl	8003758 <LL_ADC_GetOffsetChannel>
 8004134:	4603      	mov	r3, r0
 8004136:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004138:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800413a:	fa93 f3a3 	rbit	r3, r3
 800413e:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8004140:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004142:	fab3 f383 	clz	r3, r3
 8004146:	b2db      	uxtb	r3, r3
 8004148:	461a      	mov	r2, r3
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004152:	2b00      	cmp	r3, #0
 8004154:	d105      	bne.n	8004162 <HAL_ADCEx_InjectedConfigChannel+0x422>
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	0e9b      	lsrs	r3, r3, #26
 800415c:	f003 031f 	and.w	r3, r3, #31
 8004160:	e00a      	b.n	8004178 <HAL_ADCEx_InjectedConfigChannel+0x438>
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004168:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800416a:	fa93 f3a3 	rbit	r3, r3
 800416e:	66bb      	str	r3, [r7, #104]	; 0x68
  return result;
 8004170:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004172:	fab3 f383 	clz	r3, r3
 8004176:	b2db      	uxtb	r3, r3
 8004178:	429a      	cmp	r2, r3
 800417a:	d106      	bne.n	800418a <HAL_ADCEx_InjectedConfigChannel+0x44a>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	2200      	movs	r2, #0
 8004182:	2101      	movs	r1, #1
 8004184:	4618      	mov	r0, r3
 8004186:	f7ff fafb 	bl	8003780 <LL_ADC_SetOffsetState>
      }
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	2102      	movs	r1, #2
 8004190:	4618      	mov	r0, r3
 8004192:	f7ff fae1 	bl	8003758 <LL_ADC_GetOffsetChannel>
 8004196:	4603      	mov	r3, r0
 8004198:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800419c:	2b00      	cmp	r3, #0
 800419e:	d10a      	bne.n	80041b6 <HAL_ADCEx_InjectedConfigChannel+0x476>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	2102      	movs	r1, #2
 80041a6:	4618      	mov	r0, r3
 80041a8:	f7ff fad6 	bl	8003758 <LL_ADC_GetOffsetChannel>
 80041ac:	4603      	mov	r3, r0
 80041ae:	0e9b      	lsrs	r3, r3, #26
 80041b0:	f003 021f 	and.w	r2, r3, #31
 80041b4:	e010      	b.n	80041d8 <HAL_ADCEx_InjectedConfigChannel+0x498>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	2102      	movs	r1, #2
 80041bc:	4618      	mov	r0, r3
 80041be:	f7ff facb 	bl	8003758 <LL_ADC_GetOffsetChannel>
 80041c2:	4603      	mov	r3, r0
 80041c4:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80041c8:	fa93 f3a3 	rbit	r3, r3
 80041cc:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80041ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80041d0:	fab3 f383 	clz	r3, r3
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	461a      	mov	r2, r3
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d105      	bne.n	80041f0 <HAL_ADCEx_InjectedConfigChannel+0x4b0>
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	0e9b      	lsrs	r3, r3, #26
 80041ea:	f003 031f 	and.w	r3, r3, #31
 80041ee:	e00a      	b.n	8004206 <HAL_ADCEx_InjectedConfigChannel+0x4c6>
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041f8:	fa93 f3a3 	rbit	r3, r3
 80041fc:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80041fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004200:	fab3 f383 	clz	r3, r3
 8004204:	b2db      	uxtb	r3, r3
 8004206:	429a      	cmp	r2, r3
 8004208:	d106      	bne.n	8004218 <HAL_ADCEx_InjectedConfigChannel+0x4d8>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	2200      	movs	r2, #0
 8004210:	2102      	movs	r1, #2
 8004212:	4618      	mov	r0, r3
 8004214:	f7ff fab4 	bl	8003780 <LL_ADC_SetOffsetState>
      }
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	2103      	movs	r1, #3
 800421e:	4618      	mov	r0, r3
 8004220:	f7ff fa9a 	bl	8003758 <LL_ADC_GetOffsetChannel>
 8004224:	4603      	mov	r3, r0
 8004226:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800422a:	2b00      	cmp	r3, #0
 800422c:	d10a      	bne.n	8004244 <HAL_ADCEx_InjectedConfigChannel+0x504>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	2103      	movs	r1, #3
 8004234:	4618      	mov	r0, r3
 8004236:	f7ff fa8f 	bl	8003758 <LL_ADC_GetOffsetChannel>
 800423a:	4603      	mov	r3, r0
 800423c:	0e9b      	lsrs	r3, r3, #26
 800423e:	f003 021f 	and.w	r2, r3, #31
 8004242:	e010      	b.n	8004266 <HAL_ADCEx_InjectedConfigChannel+0x526>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	2103      	movs	r1, #3
 800424a:	4618      	mov	r0, r3
 800424c:	f7ff fa84 	bl	8003758 <LL_ADC_GetOffsetChannel>
 8004250:	4603      	mov	r3, r0
 8004252:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004254:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004256:	fa93 f3a3 	rbit	r3, r3
 800425a:	653b      	str	r3, [r7, #80]	; 0x50
  return result;
 800425c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800425e:	fab3 f383 	clz	r3, r3
 8004262:	b2db      	uxtb	r3, r3
 8004264:	461a      	mov	r2, r3
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800426e:	2b00      	cmp	r3, #0
 8004270:	d105      	bne.n	800427e <HAL_ADCEx_InjectedConfigChannel+0x53e>
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	0e9b      	lsrs	r3, r3, #26
 8004278:	f003 031f 	and.w	r3, r3, #31
 800427c:	e00a      	b.n	8004294 <HAL_ADCEx_InjectedConfigChannel+0x554>
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004284:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004286:	fa93 f3a3 	rbit	r3, r3
 800428a:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800428c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800428e:	fab3 f383 	clz	r3, r3
 8004292:	b2db      	uxtb	r3, r3
 8004294:	429a      	cmp	r2, r3
 8004296:	d106      	bne.n	80042a6 <HAL_ADCEx_InjectedConfigChannel+0x566>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	2200      	movs	r2, #0
 800429e:	2103      	movs	r1, #3
 80042a0:	4618      	mov	r0, r3
 80042a2:	f7ff fa6d 	bl	8003780 <LL_ADC_SetOffsetState>
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4618      	mov	r0, r3
 80042ac:	f7ff fb2c 	bl	8003908 <LL_ADC_IsEnabled>
 80042b0:	4603      	mov	r3, r0
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	f040 810c 	bne.w	80044d0 <HAL_ADCEx_InjectedConfigChannel+0x790>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6818      	ldr	r0, [r3, #0]
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	6819      	ldr	r1, [r3, #0]
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	461a      	mov	r2, r3
 80042c6:	f7ff faed 	bl	80038a4 <LL_ADC_SetChannelSingleDiff>

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (sConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	68db      	ldr	r3, [r3, #12]
 80042ce:	4aab      	ldr	r2, [pc, #684]	; (800457c <HAL_ADCEx_InjectedConfigChannel+0x83c>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	f040 80fd 	bne.w	80044d0 <HAL_ADCEx_InjectedConfigChannel+0x790>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel) + 1UL) & 0x1FUL)), sConfigInjected->InjectedSamplingTime);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6818      	ldr	r0, [r3, #0]
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d10b      	bne.n	80042fe <HAL_ADCEx_InjectedConfigChannel+0x5be>
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	0e9b      	lsrs	r3, r3, #26
 80042ec:	3301      	adds	r3, #1
 80042ee:	f003 031f 	and.w	r3, r3, #31
 80042f2:	2b09      	cmp	r3, #9
 80042f4:	bf94      	ite	ls
 80042f6:	2301      	movls	r3, #1
 80042f8:	2300      	movhi	r3, #0
 80042fa:	b2db      	uxtb	r3, r3
 80042fc:	e012      	b.n	8004324 <HAL_ADCEx_InjectedConfigChannel+0x5e4>
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004304:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004306:	fa93 f3a3 	rbit	r3, r3
 800430a:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800430c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800430e:	fab3 f383 	clz	r3, r3
 8004312:	b2db      	uxtb	r3, r3
 8004314:	3301      	adds	r3, #1
 8004316:	f003 031f 	and.w	r3, r3, #31
 800431a:	2b09      	cmp	r3, #9
 800431c:	bf94      	ite	ls
 800431e:	2301      	movls	r3, #1
 8004320:	2300      	movhi	r3, #0
 8004322:	b2db      	uxtb	r3, r3
 8004324:	2b00      	cmp	r3, #0
 8004326:	d064      	beq.n	80043f2 <HAL_ADCEx_InjectedConfigChannel+0x6b2>
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004330:	2b00      	cmp	r3, #0
 8004332:	d107      	bne.n	8004344 <HAL_ADCEx_InjectedConfigChannel+0x604>
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	0e9b      	lsrs	r3, r3, #26
 800433a:	3301      	adds	r3, #1
 800433c:	069b      	lsls	r3, r3, #26
 800433e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004342:	e00e      	b.n	8004362 <HAL_ADCEx_InjectedConfigChannel+0x622>
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800434a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800434c:	fa93 f3a3 	rbit	r3, r3
 8004350:	63bb      	str	r3, [r7, #56]	; 0x38
  return result;
 8004352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004354:	fab3 f383 	clz	r3, r3
 8004358:	b2db      	uxtb	r3, r3
 800435a:	3301      	adds	r3, #1
 800435c:	069b      	lsls	r3, r3, #26
 800435e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800436a:	2b00      	cmp	r3, #0
 800436c:	d109      	bne.n	8004382 <HAL_ADCEx_InjectedConfigChannel+0x642>
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	0e9b      	lsrs	r3, r3, #26
 8004374:	3301      	adds	r3, #1
 8004376:	f003 031f 	and.w	r3, r3, #31
 800437a:	2101      	movs	r1, #1
 800437c:	fa01 f303 	lsl.w	r3, r1, r3
 8004380:	e010      	b.n	80043a4 <HAL_ADCEx_InjectedConfigChannel+0x664>
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800438a:	fa93 f3a3 	rbit	r3, r3
 800438e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004392:	fab3 f383 	clz	r3, r3
 8004396:	b2db      	uxtb	r3, r3
 8004398:	3301      	adds	r3, #1
 800439a:	f003 031f 	and.w	r3, r3, #31
 800439e:	2101      	movs	r1, #1
 80043a0:	fa01 f303 	lsl.w	r3, r1, r3
 80043a4:	ea42 0103 	orr.w	r1, r2, r3
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d10a      	bne.n	80043ca <HAL_ADCEx_InjectedConfigChannel+0x68a>
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	0e9b      	lsrs	r3, r3, #26
 80043ba:	3301      	adds	r3, #1
 80043bc:	f003 021f 	and.w	r2, r3, #31
 80043c0:	4613      	mov	r3, r2
 80043c2:	005b      	lsls	r3, r3, #1
 80043c4:	4413      	add	r3, r2
 80043c6:	051b      	lsls	r3, r3, #20
 80043c8:	e011      	b.n	80043ee <HAL_ADCEx_InjectedConfigChannel+0x6ae>
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043d2:	fa93 f3a3 	rbit	r3, r3
 80043d6:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80043d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043da:	fab3 f383 	clz	r3, r3
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	3301      	adds	r3, #1
 80043e2:	f003 021f 	and.w	r2, r3, #31
 80043e6:	4613      	mov	r3, r2
 80043e8:	005b      	lsls	r3, r3, #1
 80043ea:	4413      	add	r3, r2
 80043ec:	051b      	lsls	r3, r3, #20
 80043ee:	430b      	orrs	r3, r1
 80043f0:	e069      	b.n	80044c6 <HAL_ADCEx_InjectedConfigChannel+0x786>
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d107      	bne.n	800440e <HAL_ADCEx_InjectedConfigChannel+0x6ce>
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	0e9b      	lsrs	r3, r3, #26
 8004404:	3301      	adds	r3, #1
 8004406:	069b      	lsls	r3, r3, #26
 8004408:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800440c:	e00e      	b.n	800442c <HAL_ADCEx_InjectedConfigChannel+0x6ec>
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004416:	fa93 f3a3 	rbit	r3, r3
 800441a:	623b      	str	r3, [r7, #32]
  return result;
 800441c:	6a3b      	ldr	r3, [r7, #32]
 800441e:	fab3 f383 	clz	r3, r3
 8004422:	b2db      	uxtb	r3, r3
 8004424:	3301      	adds	r3, #1
 8004426:	069b      	lsls	r3, r3, #26
 8004428:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004434:	2b00      	cmp	r3, #0
 8004436:	d109      	bne.n	800444c <HAL_ADCEx_InjectedConfigChannel+0x70c>
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	0e9b      	lsrs	r3, r3, #26
 800443e:	3301      	adds	r3, #1
 8004440:	f003 031f 	and.w	r3, r3, #31
 8004444:	2101      	movs	r1, #1
 8004446:	fa01 f303 	lsl.w	r3, r1, r3
 800444a:	e010      	b.n	800446e <HAL_ADCEx_InjectedConfigChannel+0x72e>
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004452:	69fb      	ldr	r3, [r7, #28]
 8004454:	fa93 f3a3 	rbit	r3, r3
 8004458:	61bb      	str	r3, [r7, #24]
  return result;
 800445a:	69bb      	ldr	r3, [r7, #24]
 800445c:	fab3 f383 	clz	r3, r3
 8004460:	b2db      	uxtb	r3, r3
 8004462:	3301      	adds	r3, #1
 8004464:	f003 031f 	and.w	r3, r3, #31
 8004468:	2101      	movs	r1, #1
 800446a:	fa01 f303 	lsl.w	r3, r1, r3
 800446e:	ea42 0103 	orr.w	r1, r2, r3
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800447a:	2b00      	cmp	r3, #0
 800447c:	d10d      	bne.n	800449a <HAL_ADCEx_InjectedConfigChannel+0x75a>
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	0e9b      	lsrs	r3, r3, #26
 8004484:	3301      	adds	r3, #1
 8004486:	f003 021f 	and.w	r2, r3, #31
 800448a:	4613      	mov	r3, r2
 800448c:	005b      	lsls	r3, r3, #1
 800448e:	4413      	add	r3, r2
 8004490:	3b1e      	subs	r3, #30
 8004492:	051b      	lsls	r3, r3, #20
 8004494:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004498:	e014      	b.n	80044c4 <HAL_ADCEx_InjectedConfigChannel+0x784>
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	fa93 f3a3 	rbit	r3, r3
 80044a6:	613b      	str	r3, [r7, #16]
  return result;
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	fab3 f383 	clz	r3, r3
 80044ae:	b2db      	uxtb	r3, r3
 80044b0:	3301      	adds	r3, #1
 80044b2:	f003 021f 	and.w	r2, r3, #31
 80044b6:	4613      	mov	r3, r2
 80044b8:	005b      	lsls	r3, r3, #1
 80044ba:	4413      	add	r3, r2
 80044bc:	3b1e      	subs	r3, #30
 80044be:	051b      	lsls	r3, r3, #20
 80044c0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80044c4:	430b      	orrs	r3, r1
 80044c6:	683a      	ldr	r2, [r7, #0]
 80044c8:	6892      	ldr	r2, [r2, #8]
 80044ca:	4619      	mov	r1, r3
 80044cc:	f7ff f9c1 	bl	8003852 <LL_ADC_SetChannelSamplingTime>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	4b2a      	ldr	r3, [pc, #168]	; (8004580 <HAL_ADCEx_InjectedConfigChannel+0x840>)
 80044d6:	4013      	ands	r3, r2
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d079      	beq.n	80045d0 <HAL_ADCEx_InjectedConfigChannel+0x890>
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80044dc:	4829      	ldr	r0, [pc, #164]	; (8004584 <HAL_ADCEx_InjectedConfigChannel+0x844>)
 80044de:	f7ff f90a 	bl	80036f6 <LL_ADC_GetCommonPathInternalCh>
 80044e2:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a27      	ldr	r2, [pc, #156]	; (8004588 <HAL_ADCEx_InjectedConfigChannel+0x848>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d004      	beq.n	80044fa <HAL_ADCEx_InjectedConfigChannel+0x7ba>
         || (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a25      	ldr	r2, [pc, #148]	; (800458c <HAL_ADCEx_InjectedConfigChannel+0x84c>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d126      	bne.n	8004548 <HAL_ADCEx_InjectedConfigChannel+0x808>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80044fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80044fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004502:	2b00      	cmp	r3, #0
 8004504:	d120      	bne.n	8004548 <HAL_ADCEx_InjectedConfigChannel+0x808>
    {
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800450e:	d15f      	bne.n	80045d0 <HAL_ADCEx_InjectedConfigChannel+0x890>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004510:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004514:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004518:	4619      	mov	r1, r3
 800451a:	481a      	ldr	r0, [pc, #104]	; (8004584 <HAL_ADCEx_InjectedConfigChannel+0x844>)
 800451c:	f7ff f8d8 	bl	80036d0 <LL_ADC_SetCommonPathInternalCh>
        /* Delay for temperature sensor stabilization time */
        /* Wait loop initialization and execution */
        /* Note: Variable divided by 2 to compensate partially              */
        /*       CPU processing cycles, scaling in us split to not          */
        /*       exceed 32 bits register capacity and handle low frequency. */
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8004520:	4b1b      	ldr	r3, [pc, #108]	; (8004590 <HAL_ADCEx_InjectedConfigChannel+0x850>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	099b      	lsrs	r3, r3, #6
 8004526:	4a1b      	ldr	r2, [pc, #108]	; (8004594 <HAL_ADCEx_InjectedConfigChannel+0x854>)
 8004528:	fba2 2303 	umull	r2, r3, r2, r3
 800452c:	099a      	lsrs	r2, r3, #6
 800452e:	4613      	mov	r3, r2
 8004530:	005b      	lsls	r3, r3, #1
 8004532:	4413      	add	r3, r2
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	60fb      	str	r3, [r7, #12]
        while (wait_loop_index != 0UL)
 8004538:	e002      	b.n	8004540 <HAL_ADCEx_InjectedConfigChannel+0x800>
        {
          wait_loop_index--;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	3b01      	subs	r3, #1
 800453e:	60fb      	str	r3, [r7, #12]
        while (wait_loop_index != 0UL)
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d1f9      	bne.n	800453a <HAL_ADCEx_InjectedConfigChannel+0x7fa>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004546:	e043      	b.n	80045d0 <HAL_ADCEx_InjectedConfigChannel+0x890>
        }
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a12      	ldr	r2, [pc, #72]	; (8004598 <HAL_ADCEx_InjectedConfigChannel+0x858>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d126      	bne.n	80045a0 <HAL_ADCEx_InjectedConfigChannel+0x860>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004552:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004556:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800455a:	2b00      	cmp	r3, #0
 800455c:	d120      	bne.n	80045a0 <HAL_ADCEx_InjectedConfigChannel+0x860>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a0e      	ldr	r2, [pc, #56]	; (800459c <HAL_ADCEx_InjectedConfigChannel+0x85c>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d033      	beq.n	80045d0 <HAL_ADCEx_InjectedConfigChannel+0x890>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004568:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800456c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004570:	4619      	mov	r1, r3
 8004572:	4804      	ldr	r0, [pc, #16]	; (8004584 <HAL_ADCEx_InjectedConfigChannel+0x844>)
 8004574:	f7ff f8ac 	bl	80036d0 <LL_ADC_SetCommonPathInternalCh>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004578:	e02a      	b.n	80045d0 <HAL_ADCEx_InjectedConfigChannel+0x890>
 800457a:	bf00      	nop
 800457c:	407f0000 	.word	0x407f0000
 8004580:	80080000 	.word	0x80080000
 8004584:	50000300 	.word	0x50000300
 8004588:	c3210000 	.word	0xc3210000
 800458c:	90c00010 	.word	0x90c00010
 8004590:	20000000 	.word	0x20000000
 8004594:	053e2d63 	.word	0x053e2d63
 8004598:	c7520000 	.word	0xc7520000
 800459c:	50000100 	.word	0x50000100
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a0f      	ldr	r2, [pc, #60]	; (80045e4 <HAL_ADCEx_InjectedConfigChannel+0x8a4>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d112      	bne.n	80045d0 <HAL_ADCEx_InjectedConfigChannel+0x890>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80045aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80045ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d10c      	bne.n	80045d0 <HAL_ADCEx_InjectedConfigChannel+0x890>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a0b      	ldr	r2, [pc, #44]	; (80045e8 <HAL_ADCEx_InjectedConfigChannel+0x8a8>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d007      	beq.n	80045d0 <HAL_ADCEx_InjectedConfigChannel+0x890>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80045c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80045c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80045c8:	4619      	mov	r1, r3
 80045ca:	4808      	ldr	r0, [pc, #32]	; (80045ec <HAL_ADCEx_InjectedConfigChannel+0x8ac>)
 80045cc:	f7ff f880 	bl	80036d0 <LL_ADC_SetCommonPathInternalCh>
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2200      	movs	r2, #0
 80045d4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80045d8:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
}
 80045dc:	4618      	mov	r0, r3
 80045de:	37a0      	adds	r7, #160	; 0xa0
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}
 80045e4:	cb840000 	.word	0xcb840000
 80045e8:	50000100 	.word	0x50000100
 80045ec:	50000300 	.word	0x50000300

080045f0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80045f0:	b590      	push	{r4, r7, lr}
 80045f2:	b0a1      	sub	sp, #132	; 0x84
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
 80045f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80045fa:	2300      	movs	r3, #0
 80045fc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004606:	2b01      	cmp	r3, #1
 8004608:	d101      	bne.n	800460e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800460a:	2302      	movs	r3, #2
 800460c:	e087      	b.n	800471e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2201      	movs	r2, #1
 8004612:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800461e:	d102      	bne.n	8004626 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8004620:	4b41      	ldr	r3, [pc, #260]	; (8004728 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8004622:	60bb      	str	r3, [r7, #8]
 8004624:	e001      	b.n	800462a <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8004626:	2300      	movs	r3, #0
 8004628:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d10b      	bne.n	8004648 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004634:	f043 0220 	orr.w	r2, r3, #32
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2200      	movs	r2, #0
 8004640:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	e06a      	b.n	800471e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	4618      	mov	r0, r3
 800464c:	f7ff f99c 	bl	8003988 <LL_ADC_REG_IsConversionOngoing>
 8004650:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4618      	mov	r0, r3
 8004658:	f7ff f996 	bl	8003988 <LL_ADC_REG_IsConversionOngoing>
 800465c:	4603      	mov	r3, r0
 800465e:	2b00      	cmp	r3, #0
 8004660:	d14c      	bne.n	80046fc <HAL_ADCEx_MultiModeConfigChannel+0x10c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004662:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004664:	2b00      	cmp	r3, #0
 8004666:	d149      	bne.n	80046fc <HAL_ADCEx_MultiModeConfigChannel+0x10c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004668:	4b30      	ldr	r3, [pc, #192]	; (800472c <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 800466a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d028      	beq.n	80046c6 <HAL_ADCEx_MultiModeConfigChannel+0xd6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004674:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	6859      	ldr	r1, [r3, #4]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004686:	035b      	lsls	r3, r3, #13
 8004688:	430b      	orrs	r3, r1
 800468a:	431a      	orrs	r2, r3
 800468c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800468e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004690:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004694:	f7ff f938 	bl	8003908 <LL_ADC_IsEnabled>
 8004698:	4604      	mov	r4, r0
 800469a:	4823      	ldr	r0, [pc, #140]	; (8004728 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 800469c:	f7ff f934 	bl	8003908 <LL_ADC_IsEnabled>
 80046a0:	4603      	mov	r3, r0
 80046a2:	4323      	orrs	r3, r4
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d133      	bne.n	8004710 <HAL_ADCEx_MultiModeConfigChannel+0x120>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80046a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80046b0:	f023 030f 	bic.w	r3, r3, #15
 80046b4:	683a      	ldr	r2, [r7, #0]
 80046b6:	6811      	ldr	r1, [r2, #0]
 80046b8:	683a      	ldr	r2, [r7, #0]
 80046ba:	6892      	ldr	r2, [r2, #8]
 80046bc:	430a      	orrs	r2, r1
 80046be:	431a      	orrs	r2, r3
 80046c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046c2:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80046c4:	e024      	b.n	8004710 <HAL_ADCEx_MultiModeConfigChannel+0x120>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80046c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80046ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046d0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80046d2:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80046d6:	f7ff f917 	bl	8003908 <LL_ADC_IsEnabled>
 80046da:	4604      	mov	r4, r0
 80046dc:	4812      	ldr	r0, [pc, #72]	; (8004728 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 80046de:	f7ff f913 	bl	8003908 <LL_ADC_IsEnabled>
 80046e2:	4603      	mov	r3, r0
 80046e4:	4323      	orrs	r3, r4
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d112      	bne.n	8004710 <HAL_ADCEx_MultiModeConfigChannel+0x120>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80046ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80046f2:	f023 030f 	bic.w	r3, r3, #15
 80046f6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80046f8:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80046fa:	e009      	b.n	8004710 <HAL_ADCEx_MultiModeConfigChannel+0x120>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004700:	f043 0220 	orr.w	r2, r3, #32
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800470e:	e000      	b.n	8004712 <HAL_ADCEx_MultiModeConfigChannel+0x122>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004710:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2200      	movs	r2, #0
 8004716:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800471a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800471e:	4618      	mov	r0, r3
 8004720:	3784      	adds	r7, #132	; 0x84
 8004722:	46bd      	mov	sp, r7
 8004724:	bd90      	pop	{r4, r7, pc}
 8004726:	bf00      	nop
 8004728:	50000100 	.word	0x50000100
 800472c:	50000300 	.word	0x50000300

08004730 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004730:	b480      	push	{r7}
 8004732:	b085      	sub	sp, #20
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f003 0307 	and.w	r3, r3, #7
 800473e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004740:	4b0c      	ldr	r3, [pc, #48]	; (8004774 <__NVIC_SetPriorityGrouping+0x44>)
 8004742:	68db      	ldr	r3, [r3, #12]
 8004744:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004746:	68ba      	ldr	r2, [r7, #8]
 8004748:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800474c:	4013      	ands	r3, r2
 800474e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004758:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800475c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004760:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004762:	4a04      	ldr	r2, [pc, #16]	; (8004774 <__NVIC_SetPriorityGrouping+0x44>)
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	60d3      	str	r3, [r2, #12]
}
 8004768:	bf00      	nop
 800476a:	3714      	adds	r7, #20
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr
 8004774:	e000ed00 	.word	0xe000ed00

08004778 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004778:	b480      	push	{r7}
 800477a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800477c:	4b04      	ldr	r3, [pc, #16]	; (8004790 <__NVIC_GetPriorityGrouping+0x18>)
 800477e:	68db      	ldr	r3, [r3, #12]
 8004780:	0a1b      	lsrs	r3, r3, #8
 8004782:	f003 0307 	and.w	r3, r3, #7
}
 8004786:	4618      	mov	r0, r3
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr
 8004790:	e000ed00 	.word	0xe000ed00

08004794 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004794:	b480      	push	{r7}
 8004796:	b083      	sub	sp, #12
 8004798:	af00      	add	r7, sp, #0
 800479a:	4603      	mov	r3, r0
 800479c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800479e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	db0b      	blt.n	80047be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80047a6:	79fb      	ldrb	r3, [r7, #7]
 80047a8:	f003 021f 	and.w	r2, r3, #31
 80047ac:	4907      	ldr	r1, [pc, #28]	; (80047cc <__NVIC_EnableIRQ+0x38>)
 80047ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047b2:	095b      	lsrs	r3, r3, #5
 80047b4:	2001      	movs	r0, #1
 80047b6:	fa00 f202 	lsl.w	r2, r0, r2
 80047ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80047be:	bf00      	nop
 80047c0:	370c      	adds	r7, #12
 80047c2:	46bd      	mov	sp, r7
 80047c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c8:	4770      	bx	lr
 80047ca:	bf00      	nop
 80047cc:	e000e100 	.word	0xe000e100

080047d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b083      	sub	sp, #12
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	4603      	mov	r3, r0
 80047d8:	6039      	str	r1, [r7, #0]
 80047da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	db0a      	blt.n	80047fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	b2da      	uxtb	r2, r3
 80047e8:	490c      	ldr	r1, [pc, #48]	; (800481c <__NVIC_SetPriority+0x4c>)
 80047ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047ee:	0112      	lsls	r2, r2, #4
 80047f0:	b2d2      	uxtb	r2, r2
 80047f2:	440b      	add	r3, r1
 80047f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80047f8:	e00a      	b.n	8004810 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	b2da      	uxtb	r2, r3
 80047fe:	4908      	ldr	r1, [pc, #32]	; (8004820 <__NVIC_SetPriority+0x50>)
 8004800:	79fb      	ldrb	r3, [r7, #7]
 8004802:	f003 030f 	and.w	r3, r3, #15
 8004806:	3b04      	subs	r3, #4
 8004808:	0112      	lsls	r2, r2, #4
 800480a:	b2d2      	uxtb	r2, r2
 800480c:	440b      	add	r3, r1
 800480e:	761a      	strb	r2, [r3, #24]
}
 8004810:	bf00      	nop
 8004812:	370c      	adds	r7, #12
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr
 800481c:	e000e100 	.word	0xe000e100
 8004820:	e000ed00 	.word	0xe000ed00

08004824 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004824:	b480      	push	{r7}
 8004826:	b089      	sub	sp, #36	; 0x24
 8004828:	af00      	add	r7, sp, #0
 800482a:	60f8      	str	r0, [r7, #12]
 800482c:	60b9      	str	r1, [r7, #8]
 800482e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f003 0307 	and.w	r3, r3, #7
 8004836:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004838:	69fb      	ldr	r3, [r7, #28]
 800483a:	f1c3 0307 	rsb	r3, r3, #7
 800483e:	2b04      	cmp	r3, #4
 8004840:	bf28      	it	cs
 8004842:	2304      	movcs	r3, #4
 8004844:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004846:	69fb      	ldr	r3, [r7, #28]
 8004848:	3304      	adds	r3, #4
 800484a:	2b06      	cmp	r3, #6
 800484c:	d902      	bls.n	8004854 <NVIC_EncodePriority+0x30>
 800484e:	69fb      	ldr	r3, [r7, #28]
 8004850:	3b03      	subs	r3, #3
 8004852:	e000      	b.n	8004856 <NVIC_EncodePriority+0x32>
 8004854:	2300      	movs	r3, #0
 8004856:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004858:	f04f 32ff 	mov.w	r2, #4294967295
 800485c:	69bb      	ldr	r3, [r7, #24]
 800485e:	fa02 f303 	lsl.w	r3, r2, r3
 8004862:	43da      	mvns	r2, r3
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	401a      	ands	r2, r3
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800486c:	f04f 31ff 	mov.w	r1, #4294967295
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	fa01 f303 	lsl.w	r3, r1, r3
 8004876:	43d9      	mvns	r1, r3
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800487c:	4313      	orrs	r3, r2
         );
}
 800487e:	4618      	mov	r0, r3
 8004880:	3724      	adds	r7, #36	; 0x24
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr
	...

0800488c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b082      	sub	sp, #8
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	3b01      	subs	r3, #1
 8004898:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800489c:	d301      	bcc.n	80048a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800489e:	2301      	movs	r3, #1
 80048a0:	e00f      	b.n	80048c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80048a2:	4a0a      	ldr	r2, [pc, #40]	; (80048cc <SysTick_Config+0x40>)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	3b01      	subs	r3, #1
 80048a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80048aa:	210f      	movs	r1, #15
 80048ac:	f04f 30ff 	mov.w	r0, #4294967295
 80048b0:	f7ff ff8e 	bl	80047d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80048b4:	4b05      	ldr	r3, [pc, #20]	; (80048cc <SysTick_Config+0x40>)
 80048b6:	2200      	movs	r2, #0
 80048b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80048ba:	4b04      	ldr	r3, [pc, #16]	; (80048cc <SysTick_Config+0x40>)
 80048bc:	2207      	movs	r2, #7
 80048be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80048c0:	2300      	movs	r3, #0
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3708      	adds	r7, #8
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}
 80048ca:	bf00      	nop
 80048cc:	e000e010 	.word	0xe000e010

080048d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b082      	sub	sp, #8
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	f7ff ff29 	bl	8004730 <__NVIC_SetPriorityGrouping>
}
 80048de:	bf00      	nop
 80048e0:	3708      	adds	r7, #8
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}

080048e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80048e6:	b580      	push	{r7, lr}
 80048e8:	b086      	sub	sp, #24
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	4603      	mov	r3, r0
 80048ee:	60b9      	str	r1, [r7, #8]
 80048f0:	607a      	str	r2, [r7, #4]
 80048f2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80048f4:	f7ff ff40 	bl	8004778 <__NVIC_GetPriorityGrouping>
 80048f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	68b9      	ldr	r1, [r7, #8]
 80048fe:	6978      	ldr	r0, [r7, #20]
 8004900:	f7ff ff90 	bl	8004824 <NVIC_EncodePriority>
 8004904:	4602      	mov	r2, r0
 8004906:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800490a:	4611      	mov	r1, r2
 800490c:	4618      	mov	r0, r3
 800490e:	f7ff ff5f 	bl	80047d0 <__NVIC_SetPriority>
}
 8004912:	bf00      	nop
 8004914:	3718      	adds	r7, #24
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}

0800491a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800491a:	b580      	push	{r7, lr}
 800491c:	b082      	sub	sp, #8
 800491e:	af00      	add	r7, sp, #0
 8004920:	4603      	mov	r3, r0
 8004922:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004924:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004928:	4618      	mov	r0, r3
 800492a:	f7ff ff33 	bl	8004794 <__NVIC_EnableIRQ>
}
 800492e:	bf00      	nop
 8004930:	3708      	adds	r7, #8
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}

08004936 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004936:	b580      	push	{r7, lr}
 8004938:	b082      	sub	sp, #8
 800493a:	af00      	add	r7, sp, #0
 800493c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f7ff ffa4 	bl	800488c <SysTick_Config>
 8004944:	4603      	mov	r3, r0
}
 8004946:	4618      	mov	r0, r3
 8004948:	3708      	adds	r7, #8
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}

0800494e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800494e:	b580      	push	{r7, lr}
 8004950:	b084      	sub	sp, #16
 8004952:	af00      	add	r7, sp, #0
 8004954:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004956:	2300      	movs	r3, #0
 8004958:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004960:	b2db      	uxtb	r3, r3
 8004962:	2b02      	cmp	r3, #2
 8004964:	d00d      	beq.n	8004982 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2204      	movs	r2, #4
 800496a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2200      	movs	r2, #0
 8004978:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	73fb      	strb	r3, [r7, #15]
 8004980:	e047      	b.n	8004a12 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f022 020e 	bic.w	r2, r2, #14
 8004990:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f022 0201 	bic.w	r2, r2, #1
 80049a0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80049b0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049b6:	f003 021f 	and.w	r2, r3, #31
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049be:	2101      	movs	r1, #1
 80049c0:	fa01 f202 	lsl.w	r2, r1, r2
 80049c4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80049ce:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d00c      	beq.n	80049f2 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80049e6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049ec:	687a      	ldr	r2, [r7, #4]
 80049ee:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80049f0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2201      	movs	r2, #1
 80049f6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2200      	movs	r2, #0
 80049fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d003      	beq.n	8004a12 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	4798      	blx	r3
    }
  }
  return status;
 8004a12:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	3710      	adds	r7, #16
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}

08004a1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b087      	sub	sp, #28
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
 8004a24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004a26:	2300      	movs	r3, #0
 8004a28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004a2a:	e15a      	b.n	8004ce2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	2101      	movs	r1, #1
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	fa01 f303 	lsl.w	r3, r1, r3
 8004a38:	4013      	ands	r3, r2
 8004a3a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	f000 814c 	beq.w	8004cdc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d00b      	beq.n	8004a64 <HAL_GPIO_Init+0x48>
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	2b02      	cmp	r3, #2
 8004a52:	d007      	beq.n	8004a64 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004a58:	2b11      	cmp	r3, #17
 8004a5a:	d003      	beq.n	8004a64 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	2b12      	cmp	r3, #18
 8004a62:	d130      	bne.n	8004ac6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	005b      	lsls	r3, r3, #1
 8004a6e:	2203      	movs	r2, #3
 8004a70:	fa02 f303 	lsl.w	r3, r2, r3
 8004a74:	43db      	mvns	r3, r3
 8004a76:	693a      	ldr	r2, [r7, #16]
 8004a78:	4013      	ands	r3, r2
 8004a7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	68da      	ldr	r2, [r3, #12]
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	005b      	lsls	r3, r3, #1
 8004a84:	fa02 f303 	lsl.w	r3, r2, r3
 8004a88:	693a      	ldr	r2, [r7, #16]
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	693a      	ldr	r2, [r7, #16]
 8004a92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa2:	43db      	mvns	r3, r3
 8004aa4:	693a      	ldr	r2, [r7, #16]
 8004aa6:	4013      	ands	r3, r2
 8004aa8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	091b      	lsrs	r3, r3, #4
 8004ab0:	f003 0201 	and.w	r2, r3, #1
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8004aba:	693a      	ldr	r2, [r7, #16]
 8004abc:	4313      	orrs	r3, r2
 8004abe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	693a      	ldr	r2, [r7, #16]
 8004ac4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	68db      	ldr	r3, [r3, #12]
 8004aca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	005b      	lsls	r3, r3, #1
 8004ad0:	2203      	movs	r2, #3
 8004ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad6:	43db      	mvns	r3, r3
 8004ad8:	693a      	ldr	r2, [r7, #16]
 8004ada:	4013      	ands	r3, r2
 8004adc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	689a      	ldr	r2, [r3, #8]
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	005b      	lsls	r3, r3, #1
 8004ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8004aea:	693a      	ldr	r2, [r7, #16]
 8004aec:	4313      	orrs	r3, r2
 8004aee:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	693a      	ldr	r2, [r7, #16]
 8004af4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	2b02      	cmp	r3, #2
 8004afc:	d003      	beq.n	8004b06 <HAL_GPIO_Init+0xea>
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	2b12      	cmp	r3, #18
 8004b04:	d123      	bne.n	8004b4e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	08da      	lsrs	r2, r3, #3
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	3208      	adds	r2, #8
 8004b0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b12:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	f003 0307 	and.w	r3, r3, #7
 8004b1a:	009b      	lsls	r3, r3, #2
 8004b1c:	220f      	movs	r2, #15
 8004b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b22:	43db      	mvns	r3, r3
 8004b24:	693a      	ldr	r2, [r7, #16]
 8004b26:	4013      	ands	r3, r2
 8004b28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	691a      	ldr	r2, [r3, #16]
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	f003 0307 	and.w	r3, r3, #7
 8004b34:	009b      	lsls	r3, r3, #2
 8004b36:	fa02 f303 	lsl.w	r3, r2, r3
 8004b3a:	693a      	ldr	r2, [r7, #16]
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	08da      	lsrs	r2, r3, #3
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	3208      	adds	r2, #8
 8004b48:	6939      	ldr	r1, [r7, #16]
 8004b4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	005b      	lsls	r3, r3, #1
 8004b58:	2203      	movs	r2, #3
 8004b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b5e:	43db      	mvns	r3, r3
 8004b60:	693a      	ldr	r2, [r7, #16]
 8004b62:	4013      	ands	r3, r2
 8004b64:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	f003 0203 	and.w	r2, r3, #3
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	005b      	lsls	r3, r3, #1
 8004b72:	fa02 f303 	lsl.w	r3, r2, r3
 8004b76:	693a      	ldr	r2, [r7, #16]
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	693a      	ldr	r2, [r7, #16]
 8004b80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	f000 80a6 	beq.w	8004cdc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b90:	4b5b      	ldr	r3, [pc, #364]	; (8004d00 <HAL_GPIO_Init+0x2e4>)
 8004b92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b94:	4a5a      	ldr	r2, [pc, #360]	; (8004d00 <HAL_GPIO_Init+0x2e4>)
 8004b96:	f043 0301 	orr.w	r3, r3, #1
 8004b9a:	6613      	str	r3, [r2, #96]	; 0x60
 8004b9c:	4b58      	ldr	r3, [pc, #352]	; (8004d00 <HAL_GPIO_Init+0x2e4>)
 8004b9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ba0:	f003 0301 	and.w	r3, r3, #1
 8004ba4:	60bb      	str	r3, [r7, #8]
 8004ba6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004ba8:	4a56      	ldr	r2, [pc, #344]	; (8004d04 <HAL_GPIO_Init+0x2e8>)
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	089b      	lsrs	r3, r3, #2
 8004bae:	3302      	adds	r3, #2
 8004bb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bb4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	f003 0303 	and.w	r3, r3, #3
 8004bbc:	009b      	lsls	r3, r3, #2
 8004bbe:	220f      	movs	r2, #15
 8004bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc4:	43db      	mvns	r3, r3
 8004bc6:	693a      	ldr	r2, [r7, #16]
 8004bc8:	4013      	ands	r3, r2
 8004bca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004bd2:	d01f      	beq.n	8004c14 <HAL_GPIO_Init+0x1f8>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	4a4c      	ldr	r2, [pc, #304]	; (8004d08 <HAL_GPIO_Init+0x2ec>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d019      	beq.n	8004c10 <HAL_GPIO_Init+0x1f4>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	4a4b      	ldr	r2, [pc, #300]	; (8004d0c <HAL_GPIO_Init+0x2f0>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d013      	beq.n	8004c0c <HAL_GPIO_Init+0x1f0>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	4a4a      	ldr	r2, [pc, #296]	; (8004d10 <HAL_GPIO_Init+0x2f4>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d00d      	beq.n	8004c08 <HAL_GPIO_Init+0x1ec>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	4a49      	ldr	r2, [pc, #292]	; (8004d14 <HAL_GPIO_Init+0x2f8>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d007      	beq.n	8004c04 <HAL_GPIO_Init+0x1e8>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	4a48      	ldr	r2, [pc, #288]	; (8004d18 <HAL_GPIO_Init+0x2fc>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d101      	bne.n	8004c00 <HAL_GPIO_Init+0x1e4>
 8004bfc:	2305      	movs	r3, #5
 8004bfe:	e00a      	b.n	8004c16 <HAL_GPIO_Init+0x1fa>
 8004c00:	2306      	movs	r3, #6
 8004c02:	e008      	b.n	8004c16 <HAL_GPIO_Init+0x1fa>
 8004c04:	2304      	movs	r3, #4
 8004c06:	e006      	b.n	8004c16 <HAL_GPIO_Init+0x1fa>
 8004c08:	2303      	movs	r3, #3
 8004c0a:	e004      	b.n	8004c16 <HAL_GPIO_Init+0x1fa>
 8004c0c:	2302      	movs	r3, #2
 8004c0e:	e002      	b.n	8004c16 <HAL_GPIO_Init+0x1fa>
 8004c10:	2301      	movs	r3, #1
 8004c12:	e000      	b.n	8004c16 <HAL_GPIO_Init+0x1fa>
 8004c14:	2300      	movs	r3, #0
 8004c16:	697a      	ldr	r2, [r7, #20]
 8004c18:	f002 0203 	and.w	r2, r2, #3
 8004c1c:	0092      	lsls	r2, r2, #2
 8004c1e:	4093      	lsls	r3, r2
 8004c20:	693a      	ldr	r2, [r7, #16]
 8004c22:	4313      	orrs	r3, r2
 8004c24:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004c26:	4937      	ldr	r1, [pc, #220]	; (8004d04 <HAL_GPIO_Init+0x2e8>)
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	089b      	lsrs	r3, r3, #2
 8004c2c:	3302      	adds	r3, #2
 8004c2e:	693a      	ldr	r2, [r7, #16]
 8004c30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004c34:	4b39      	ldr	r3, [pc, #228]	; (8004d1c <HAL_GPIO_Init+0x300>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	43db      	mvns	r3, r3
 8004c3e:	693a      	ldr	r2, [r7, #16]
 8004c40:	4013      	ands	r3, r2
 8004c42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d003      	beq.n	8004c58 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004c50:	693a      	ldr	r2, [r7, #16]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	4313      	orrs	r3, r2
 8004c56:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004c58:	4a30      	ldr	r2, [pc, #192]	; (8004d1c <HAL_GPIO_Init+0x300>)
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8004c5e:	4b2f      	ldr	r3, [pc, #188]	; (8004d1c <HAL_GPIO_Init+0x300>)
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	43db      	mvns	r3, r3
 8004c68:	693a      	ldr	r2, [r7, #16]
 8004c6a:	4013      	ands	r3, r2
 8004c6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d003      	beq.n	8004c82 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004c7a:	693a      	ldr	r2, [r7, #16]
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004c82:	4a26      	ldr	r2, [pc, #152]	; (8004d1c <HAL_GPIO_Init+0x300>)
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004c88:	4b24      	ldr	r3, [pc, #144]	; (8004d1c <HAL_GPIO_Init+0x300>)
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	43db      	mvns	r3, r3
 8004c92:	693a      	ldr	r2, [r7, #16]
 8004c94:	4013      	ands	r3, r2
 8004c96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d003      	beq.n	8004cac <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004ca4:	693a      	ldr	r2, [r7, #16]
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004cac:	4a1b      	ldr	r2, [pc, #108]	; (8004d1c <HAL_GPIO_Init+0x300>)
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004cb2:	4b1a      	ldr	r3, [pc, #104]	; (8004d1c <HAL_GPIO_Init+0x300>)
 8004cb4:	68db      	ldr	r3, [r3, #12]
 8004cb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	43db      	mvns	r3, r3
 8004cbc:	693a      	ldr	r2, [r7, #16]
 8004cbe:	4013      	ands	r3, r2
 8004cc0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d003      	beq.n	8004cd6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004cce:	693a      	ldr	r2, [r7, #16]
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004cd6:	4a11      	ldr	r2, [pc, #68]	; (8004d1c <HAL_GPIO_Init+0x300>)
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	3301      	adds	r3, #1
 8004ce0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	fa22 f303 	lsr.w	r3, r2, r3
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	f47f ae9d 	bne.w	8004a2c <HAL_GPIO_Init+0x10>
  }
}
 8004cf2:	bf00      	nop
 8004cf4:	371c      	adds	r7, #28
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr
 8004cfe:	bf00      	nop
 8004d00:	40021000 	.word	0x40021000
 8004d04:	40010000 	.word	0x40010000
 8004d08:	48000400 	.word	0x48000400
 8004d0c:	48000800 	.word	0x48000800
 8004d10:	48000c00 	.word	0x48000c00
 8004d14:	48001000 	.word	0x48001000
 8004d18:	48001400 	.word	0x48001400
 8004d1c:	40010400 	.word	0x40010400

08004d20 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b082      	sub	sp, #8
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	4603      	mov	r3, r0
 8004d28:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004d2a:	4b08      	ldr	r3, [pc, #32]	; (8004d4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004d2c:	695a      	ldr	r2, [r3, #20]
 8004d2e:	88fb      	ldrh	r3, [r7, #6]
 8004d30:	4013      	ands	r3, r2
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d006      	beq.n	8004d44 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004d36:	4a05      	ldr	r2, [pc, #20]	; (8004d4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004d38:	88fb      	ldrh	r3, [r7, #6]
 8004d3a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004d3c:	88fb      	ldrh	r3, [r7, #6]
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f7fd f8e0 	bl	8001f04 <HAL_GPIO_EXTI_Callback>
  }
}
 8004d44:	bf00      	nop
 8004d46:	3708      	adds	r7, #8
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}
 8004d4c:	40010400 	.word	0x40010400

08004d50 <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b084      	sub	sp, #16
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d101      	bne.n	8004d66 <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	e0bb      	b.n	8004ede <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	2b05      	cmp	r3, #5
 8004d70:	d101      	bne.n	8004d76 <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	e0b3      	b.n	8004ede <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	2b02      	cmp	r3, #2
 8004d80:	d101      	bne.n	8004d86 <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	e0ab      	b.n	8004ede <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d86:	4b58      	ldr	r3, [pc, #352]	; (8004ee8 <HAL_OPAMP_Init+0x198>)
 8004d88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d8a:	4a57      	ldr	r2, [pc, #348]	; (8004ee8 <HAL_OPAMP_Init+0x198>)
 8004d8c:	f043 0301 	orr.w	r3, r3, #1
 8004d90:	6613      	str	r3, [r2, #96]	; 0x60
 8004d92:	4b55      	ldr	r3, [pc, #340]	; (8004ee8 <HAL_OPAMP_Init+0x198>)
 8004d94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d96:	f003 0301 	and.w	r3, r3, #1
 8004d9a:	60bb      	str	r3, [r7, #8]
 8004d9c:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d103      	bne.n	8004db2 <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2200      	movs	r2, #0
 8004dae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f7fd fa42 	bl	800223c <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	2b40      	cmp	r3, #64	; 0x40
 8004dbe:	d003      	beq.n	8004dc8 <HAL_OPAMP_Init+0x78>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	2b60      	cmp	r3, #96	; 0x60
 8004dc6:	d133      	bne.n	8004e30 <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f023 0110 	bic.w	r1, r3, #16
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	430a      	orrs	r2, r1
 8004ddc:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	4b41      	ldr	r3, [pc, #260]	; (8004eec <HAL_OPAMP_Init+0x19c>)
 8004de6:	4013      	ands	r3, r2
 8004de8:	687a      	ldr	r2, [r7, #4]
 8004dea:	6851      	ldr	r1, [r2, #4]
 8004dec:	687a      	ldr	r2, [r7, #4]
 8004dee:	6892      	ldr	r2, [r2, #8]
 8004df0:	4311      	orrs	r1, r2
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	6912      	ldr	r2, [r2, #16]
 8004df6:	430a      	orrs	r2, r1
 8004df8:	6879      	ldr	r1, [r7, #4]
 8004dfa:	7d09      	ldrb	r1, [r1, #20]
 8004dfc:	2901      	cmp	r1, #1
 8004dfe:	d102      	bne.n	8004e06 <HAL_OPAMP_Init+0xb6>
 8004e00:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004e04:	e000      	b.n	8004e08 <HAL_OPAMP_Init+0xb8>
 8004e06:	2100      	movs	r1, #0
 8004e08:	4311      	orrs	r1, r2
 8004e0a:	687a      	ldr	r2, [r7, #4]
 8004e0c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004e0e:	4311      	orrs	r1, r2
 8004e10:	687a      	ldr	r2, [r7, #4]
 8004e12:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004e14:	4311      	orrs	r1, r2
 8004e16:	687a      	ldr	r2, [r7, #4]
 8004e18:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004e1a:	04d2      	lsls	r2, r2, #19
 8004e1c:	4311      	orrs	r1, r2
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004e22:	0612      	lsls	r2, r2, #24
 8004e24:	4311      	orrs	r1, r2
 8004e26:	687a      	ldr	r2, [r7, #4]
 8004e28:	6812      	ldr	r2, [r2, #0]
 8004e2a:	430b      	orrs	r3, r1
 8004e2c:	6013      	str	r3, [r2, #0]
 8004e2e:	e035      	b.n	8004e9c <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f023 0110 	bic.w	r1, r3, #16
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	430a      	orrs	r2, r1
 8004e44:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	4b27      	ldr	r3, [pc, #156]	; (8004eec <HAL_OPAMP_Init+0x19c>)
 8004e4e:	4013      	ands	r3, r2
 8004e50:	687a      	ldr	r2, [r7, #4]
 8004e52:	6851      	ldr	r1, [r2, #4]
 8004e54:	687a      	ldr	r2, [r7, #4]
 8004e56:	6892      	ldr	r2, [r2, #8]
 8004e58:	4311      	orrs	r1, r2
 8004e5a:	687a      	ldr	r2, [r7, #4]
 8004e5c:	68d2      	ldr	r2, [r2, #12]
 8004e5e:	4311      	orrs	r1, r2
 8004e60:	687a      	ldr	r2, [r7, #4]
 8004e62:	6912      	ldr	r2, [r2, #16]
 8004e64:	430a      	orrs	r2, r1
 8004e66:	6879      	ldr	r1, [r7, #4]
 8004e68:	7d09      	ldrb	r1, [r1, #20]
 8004e6a:	2901      	cmp	r1, #1
 8004e6c:	d102      	bne.n	8004e74 <HAL_OPAMP_Init+0x124>
 8004e6e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004e72:	e000      	b.n	8004e76 <HAL_OPAMP_Init+0x126>
 8004e74:	2100      	movs	r1, #0
 8004e76:	4311      	orrs	r1, r2
 8004e78:	687a      	ldr	r2, [r7, #4]
 8004e7a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004e7c:	4311      	orrs	r1, r2
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004e82:	4311      	orrs	r1, r2
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004e88:	04d2      	lsls	r2, r2, #19
 8004e8a:	4311      	orrs	r1, r2
 8004e8c:	687a      	ldr	r2, [r7, #4]
 8004e8e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004e90:	0612      	lsls	r2, r2, #24
 8004e92:	4311      	orrs	r1, r2
 8004e94:	687a      	ldr	r2, [r7, #4]
 8004e96:	6812      	ldr	r2, [r2, #0]
 8004e98:	430b      	orrs	r3, r1
 8004e9a:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	699b      	ldr	r3, [r3, #24]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	db10      	blt.n	8004ec8 <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	699b      	ldr	r3, [r3, #24]
 8004eac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	699a      	ldr	r2, [r3, #24]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	69db      	ldr	r3, [r3, #28]
 8004eb8:	431a      	orrs	r2, r3
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6a1b      	ldr	r3, [r3, #32]
 8004ebe:	431a      	orrs	r2, r3
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	430a      	orrs	r2, r1
 8004ec6:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d103      	bne.n	8004edc <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 8004edc:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3710      	adds	r7, #16
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}
 8004ee6:	bf00      	nop
 8004ee8:	40021000 	.word	0x40021000
 8004eec:	e0003e11 	.word	0xe0003e11

08004ef0 <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b085      	sub	sp, #20
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d102      	bne.n	8004f08 <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	73fb      	strb	r3, [r7, #15]
 8004f06:	e01d      	b.n	8004f44 <HAL_OPAMP_Start+0x54>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004f0e:	b2db      	uxtb	r3, r3
 8004f10:	2b05      	cmp	r3, #5
 8004f12:	d102      	bne.n	8004f1a <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 8004f14:	2301      	movs	r3, #1
 8004f16:	73fb      	strb	r3, [r7, #15]
 8004f18:	e014      	b.n	8004f44 <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	2b01      	cmp	r3, #1
 8004f24:	d10c      	bne.n	8004f40 <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f042 0201 	orr.w	r2, r2, #1
 8004f34:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2204      	movs	r2, #4
 8004f3a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8004f3e:	e001      	b.n	8004f44 <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 8004f40:	2301      	movs	r3, #1
 8004f42:	73fb      	strb	r3, [r7, #15]
    }


  }
  return status;
 8004f44:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3714      	adds	r7, #20
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f50:	4770      	bx	lr

08004f52 <HAL_OPAMPEx_SelfCalibrateAll>:
                                               OPAMP_HandleTypeDef *hopamp3, OPAMP_HandleTypeDef *hopamp4, OPAMP_HandleTypeDef *hopamp5, OPAMP_HandleTypeDef *hopamp6)
#elif defined(STM32GBK1CB) || defined(STM32G431xx) || defined(STM32G441xx) || defined(STM32G471xx)
HAL_StatusTypeDef HAL_OPAMPEx_SelfCalibrateAll(OPAMP_HandleTypeDef *hopamp1, OPAMP_HandleTypeDef *hopamp2,
                                               OPAMP_HandleTypeDef *hopamp3)
#endif
{
 8004f52:	b580      	push	{r7, lr}
 8004f54:	b08c      	sub	sp, #48	; 0x30
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	60f8      	str	r0, [r7, #12]
 8004f5a:	60b9      	str	r1, [r7, #8]
 8004f5c:	607a      	str	r2, [r7, #4]
  uint32_t trimmingvaluep6;
#endif

  uint32_t delta;

  if ((hopamp1 == NULL) || (hopamp2 == NULL) || (hopamp3 == NULL)
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d005      	beq.n	8004f70 <HAL_OPAMPEx_SelfCalibrateAll+0x1e>
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d002      	beq.n	8004f70 <HAL_OPAMPEx_SelfCalibrateAll+0x1e>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d101      	bne.n	8004f74 <HAL_OPAMPEx_SelfCalibrateAll+0x22>
#if defined(STM32G473xx) || defined(STM32G474xx) || defined(STM32G483xx) || defined(STM32G483xx)
      || (hopamp4 == NULL) || (hopamp5 == NULL) || (hopamp6 == NULL)
#endif
     )
  {
    return HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	e2df      	b.n	8005534 <HAL_OPAMPEx_SelfCalibrateAll+0x5e2>
  }
  else if (hopamp1->State != HAL_OPAMP_STATE_READY)
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d001      	beq.n	8004f84 <HAL_OPAMPEx_SelfCalibrateAll+0x32>
  {
    return HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	e2d7      	b.n	8005534 <HAL_OPAMPEx_SelfCalibrateAll+0x5e2>
  }
  else if (hopamp2->State != HAL_OPAMP_STATE_READY)
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004f8a:	b2db      	uxtb	r3, r3
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d001      	beq.n	8004f94 <HAL_OPAMPEx_SelfCalibrateAll+0x42>
  {
    return HAL_ERROR;
 8004f90:	2301      	movs	r3, #1
 8004f92:	e2cf      	b.n	8005534 <HAL_OPAMPEx_SelfCalibrateAll+0x5e2>
  }
  else if (hopamp3->State != HAL_OPAMP_STATE_READY)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004f9a:	b2db      	uxtb	r3, r3
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	d001      	beq.n	8004fa4 <HAL_OPAMPEx_SelfCalibrateAll+0x52>
  {
    return HAL_ERROR;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	e2c7      	b.n	8005534 <HAL_OPAMPEx_SelfCalibrateAll+0x5e2>
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp6->Instance));
#endif

    /* Set Calibration mode */
    /* Non-inverting input connected to calibration reference voltage. */
    SET_BIT(hopamp1->Instance->CSR, OPAMP_CSR_FORCEVP);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f042 0202 	orr.w	r2, r2, #2
 8004fb2:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp2->Instance->CSR, OPAMP_CSR_FORCEVP);
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f042 0202 	orr.w	r2, r2, #2
 8004fc2:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp3->Instance->CSR, OPAMP_CSR_FORCEVP);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f042 0202 	orr.w	r2, r2, #2
 8004fd2:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp5->Instance->CSR, OPAMP_CSR_FORCEVP);
    SET_BIT(hopamp6->Instance->CSR, OPAMP_CSR_FORCEVP);
#endif

    /*  user trimming values are used for offset calibration */
    SET_BIT(hopamp1->Instance->CSR, OPAMP_CSR_USERTRIM);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f042 0210 	orr.w	r2, r2, #16
 8004fe2:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp2->Instance->CSR, OPAMP_CSR_USERTRIM);
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	681a      	ldr	r2, [r3, #0]
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f042 0210 	orr.w	r2, r2, #16
 8004ff2:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp3->Instance->CSR, OPAMP_CSR_USERTRIM);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	681a      	ldr	r2, [r3, #0]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f042 0210 	orr.w	r2, r2, #16
 8005002:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp5->Instance->CSR, OPAMP_CSR_USERTRIM);
    SET_BIT(hopamp6->Instance->CSR, OPAMP_CSR_USERTRIM);
#endif

    /* Enable calibration */
    SET_BIT(hopamp1->Instance->CSR, OPAMP_CSR_CALON);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005012:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp2->Instance->CSR, OPAMP_CSR_CALON);
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005022:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp3->Instance->CSR, OPAMP_CSR_CALON);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005032:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp6->Instance->CSR, OPAMP_CSR_CALON);
#endif

    /* 1st calibration - N */
    /* Select 90% VREF */
    MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_90VDDA);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8005042:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_90VDDA);
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8005052:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_90VDDA);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8005062:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp5->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_90VDDA);
    MODIFY_REG(hopamp6->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_90VDDA);
#endif

    /* Enable the opamps */
    SET_BIT(hopamp1->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f042 0201 	orr.w	r2, r2, #1
 8005072:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp2->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f042 0201 	orr.w	r2, r2, #1
 8005082:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp3->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f042 0201 	orr.w	r2, r2, #1
 8005092:	601a      	str	r2, [r3, #0]
    SET_BIT(hopamp6->Instance->CSR, OPAMP_CSR_OPAMPxEN);
#endif

    /* Init trimming counter */
    /* Medium value */
    trimmingvaluen1 = 16UL;
 8005094:	2310      	movs	r3, #16
 8005096:	62fb      	str	r3, [r7, #44]	; 0x2c
    trimmingvaluen2 = 16UL;
 8005098:	2310      	movs	r3, #16
 800509a:	627b      	str	r3, [r7, #36]	; 0x24
    trimmingvaluen3 = 16UL;
 800509c:	2310      	movs	r3, #16
 800509e:	61fb      	str	r3, [r7, #28]
#if defined(STM32G473xx) || defined(STM32G474xx) || defined(STM32G483xx) || defined(STM32G483xx)
    trimmingvaluen4 = 16UL;
    trimmingvaluen5 = 16UL;
    trimmingvaluen6 = 16UL;
#endif
    delta = 8UL;
 80050a0:	2308      	movs	r3, #8
 80050a2:	617b      	str	r3, [r7, #20]

    while (delta != 0UL)
 80050a4:	e056      	b.n	8005154 <HAL_OPAMPEx_SelfCalibrateAll+0x202>
    {
      /* Set candidate trimming */
      MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen1 << OPAMP_INPUT_INVERTING);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 80050b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050b2:	061a      	lsls	r2, r3, #24
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	430a      	orrs	r2, r1
 80050ba:	601a      	str	r2, [r3, #0]
      MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen2 << OPAMP_INPUT_INVERTING);
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 80050c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c8:	061a      	lsls	r2, r3, #24
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	430a      	orrs	r2, r1
 80050d0:	601a      	str	r2, [r3, #0]
      MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen3 << OPAMP_INPUT_INVERTING);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 80050dc:	69fb      	ldr	r3, [r7, #28]
 80050de:	061a      	lsls	r2, r3, #24
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	430a      	orrs	r2, r1
 80050e6:	601a      	str	r2, [r3, #0]
#endif

      /* OFFTRIMmax delay 2 ms as per datasheet (electrical characteristics */
      /* Offset trim time: during calibration, minimum time needed between */
      /* two steps to have 1 mV accuracy */
      HAL_Delay(2);
 80050e8:	2002      	movs	r0, #2
 80050ea:	f7fd fd45 	bl	8002b78 <HAL_Delay>

      if ((hopamp1->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d004      	beq.n	8005106 <HAL_OPAMPEx_SelfCalibrateAll+0x1b4>
      {
        /* OPAMP_CSR_OUTCAL is HIGH try higher trimming */
        trimmingvaluen1 += delta;
 80050fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	4413      	add	r3, r2
 8005102:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005104:	e003      	b.n	800510e <HAL_OPAMPEx_SelfCalibrateAll+0x1bc>
      }
      else
      {
        /* OPAMP_CSR_OUTCAL is LOW try lower trimming */
        trimmingvaluen1 -= delta;
 8005106:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	1ad3      	subs	r3, r2, r3
 800510c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((hopamp2->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005118:	2b00      	cmp	r3, #0
 800511a:	d004      	beq.n	8005126 <HAL_OPAMPEx_SelfCalibrateAll+0x1d4>
      {
        /* OPAMP_CSR_OUTCAL is HIGH try higher trimming */
        trimmingvaluen2 += delta;
 800511c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	4413      	add	r3, r2
 8005122:	627b      	str	r3, [r7, #36]	; 0x24
 8005124:	e003      	b.n	800512e <HAL_OPAMPEx_SelfCalibrateAll+0x1dc>
      }
      else
      {
        /* OPAMP_CSR_OUTCAL is LOW try lower trimming */
        trimmingvaluen2 -= delta;
 8005126:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	1ad3      	subs	r3, r2, r3
 800512c:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((hopamp3->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005138:	2b00      	cmp	r3, #0
 800513a:	d004      	beq.n	8005146 <HAL_OPAMPEx_SelfCalibrateAll+0x1f4>
      {
        /* OPAMP_CSR_OUTCAL is HIGH try higher trimming */
        trimmingvaluen3 += delta;
 800513c:	69fa      	ldr	r2, [r7, #28]
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	4413      	add	r3, r2
 8005142:	61fb      	str	r3, [r7, #28]
 8005144:	e003      	b.n	800514e <HAL_OPAMPEx_SelfCalibrateAll+0x1fc>
      }
      else
      {
        /* OPAMP_CSR_OUTCAL is LOW try lower trimming */
        trimmingvaluen3 -= delta;
 8005146:	69fa      	ldr	r2, [r7, #28]
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	1ad3      	subs	r3, r2, r3
 800514c:	61fb      	str	r3, [r7, #28]
        /* OPAMP_CSR_OUTCAL is LOW try lower trimming */
        trimmingvaluen6 -= delta;
      }
#endif

      delta >>= 1;
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	085b      	lsrs	r3, r3, #1
 8005152:	617b      	str	r3, [r7, #20]
    while (delta != 0UL)
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d1a5      	bne.n	80050a6 <HAL_OPAMPEx_SelfCalibrateAll+0x154>
    }

    /* Still need to check if righ calibration is current value or un step below */
    /* Indeed the first value that causes the OUTCAL bit to change from 1 to 0 */
    MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen1 << OPAMP_INPUT_INVERTING);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 8005164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005166:	061a      	lsls	r2, r3, #24
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	430a      	orrs	r2, r1
 800516e:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen2 << OPAMP_INPUT_INVERTING);
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 800517a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800517c:	061a      	lsls	r2, r3, #24
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	430a      	orrs	r2, r1
 8005184:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen3 << OPAMP_INPUT_INVERTING);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 8005190:	69fb      	ldr	r3, [r7, #28]
 8005192:	061a      	lsls	r2, r3, #24
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	430a      	orrs	r2, r1
 800519a:	601a      	str	r2, [r3, #0]
#endif

    /* OFFTRIMmax delay 2 ms as per datasheet (electrical characteristics */
    /* Offset trim time: during calibration, minimum time needed between */
    /* two steps to have 1 mV accuracy */
    HAL_Delay(2);
 800519c:	2002      	movs	r0, #2
 800519e:	f7fd fceb 	bl	8002b78 <HAL_Delay>

    if ((hopamp1->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d00d      	beq.n	80051cc <HAL_OPAMPEx_SelfCalibrateAll+0x27a>
    {
      /* OPAMP_CSR_OUTCAL is actually one value more */
      trimmingvaluen1++;
 80051b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051b2:	3301      	adds	r3, #1
 80051b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      /* Set right trimming */
      MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen1 << OPAMP_INPUT_INVERTING);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 80051c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051c2:	061a      	lsls	r2, r3, #24
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	430a      	orrs	r2, r1
 80051ca:	601a      	str	r2, [r3, #0]
    }

    if ((hopamp2->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d00d      	beq.n	80051f6 <HAL_OPAMPEx_SelfCalibrateAll+0x2a4>
    {
      /* OPAMP_CSR_OUTCAL is actually one value more */
      trimmingvaluen2++;
 80051da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051dc:	3301      	adds	r3, #1
 80051de:	627b      	str	r3, [r7, #36]	; 0x24
      /* Set right trimming */
      MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen2 << OPAMP_INPUT_INVERTING);
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 80051ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ec:	061a      	lsls	r2, r3, #24
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	430a      	orrs	r2, r1
 80051f4:	601a      	str	r2, [r3, #0]
    }

    if ((hopamp3->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005200:	2b00      	cmp	r3, #0
 8005202:	d00d      	beq.n	8005220 <HAL_OPAMPEx_SelfCalibrateAll+0x2ce>
    {
      /* OPAMP_CSR_OUTCAL is actually one value more */
      trimmingvaluen3++;
 8005204:	69fb      	ldr	r3, [r7, #28]
 8005206:	3301      	adds	r3, #1
 8005208:	61fb      	str	r3, [r7, #28]
      /* Set right trimming */
      MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen3 << OPAMP_INPUT_INVERTING);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 8005214:	69fb      	ldr	r3, [r7, #28]
 8005216:	061a      	lsls	r2, r3, #24
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	430a      	orrs	r2, r1
 800521e:	601a      	str	r2, [r3, #0]
    }
#endif

    /* 2nd calibration - P */
    /* Select 10% VREF */
    MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_10VDDA);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005232:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_10VDDA);
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005246:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_10VDDA);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800525a:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp6->Instance->CSR, OPAMP_CSR_CALSEL, OPAMP_VREF_10VDDA);
#endif

    /* Init trimming counter */
    /* Medium value */
    trimmingvaluep1 = 16UL;
 800525c:	2310      	movs	r3, #16
 800525e:	62bb      	str	r3, [r7, #40]	; 0x28
    trimmingvaluep2 = 16UL;
 8005260:	2310      	movs	r3, #16
 8005262:	623b      	str	r3, [r7, #32]
    trimmingvaluep3 = 16UL;
 8005264:	2310      	movs	r3, #16
 8005266:	61bb      	str	r3, [r7, #24]
    trimmingvaluep4 = 16UL;
    trimmingvaluep5 = 16UL;
    trimmingvaluep6 = 16UL;
#endif

    delta = 8UL;
 8005268:	2308      	movs	r3, #8
 800526a:	617b      	str	r3, [r7, #20]

    while (delta != 0UL)
 800526c:	e056      	b.n	800531c <HAL_OPAMPEx_SelfCalibrateAll+0x3ca>
    {
      /* Set candidate trimming */
      MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep1 << OPAMP_INPUT_NONINVERTING);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 8005278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800527a:	04da      	lsls	r2, r3, #19
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	430a      	orrs	r2, r1
 8005282:	601a      	str	r2, [r3, #0]
      MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep2 << OPAMP_INPUT_NONINVERTING);
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 800528e:	6a3b      	ldr	r3, [r7, #32]
 8005290:	04da      	lsls	r2, r3, #19
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	430a      	orrs	r2, r1
 8005298:	601a      	str	r2, [r3, #0]
      MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep3 << OPAMP_INPUT_NONINVERTING);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 80052a4:	69bb      	ldr	r3, [r7, #24]
 80052a6:	04da      	lsls	r2, r3, #19
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	430a      	orrs	r2, r1
 80052ae:	601a      	str	r2, [r3, #0]
#endif

      /* OFFTRIMmax delay 2 ms as per datasheet (electrical characteristics */
      /* Offset trim time: during calibration, minimum time needed between */
      /* two steps to have 1 mV accuracy */
      HAL_Delay(2);
 80052b0:	2002      	movs	r0, #2
 80052b2:	f7fd fc61 	bl	8002b78 <HAL_Delay>

      if ((hopamp1->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d004      	beq.n	80052ce <HAL_OPAMPEx_SelfCalibrateAll+0x37c>
      {
        /* OPAMP_CSR_OUTCAL is HIGH try higher trimming */
        trimmingvaluep1 += delta;
 80052c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	4413      	add	r3, r2
 80052ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80052cc:	e003      	b.n	80052d6 <HAL_OPAMPEx_SelfCalibrateAll+0x384>
      }
      else
      {
        trimmingvaluep1 -= delta;
 80052ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	1ad3      	subs	r3, r2, r3
 80052d4:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((hopamp2->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d004      	beq.n	80052ee <HAL_OPAMPEx_SelfCalibrateAll+0x39c>
      {
        /* OPAMP_CSR_OUTCAL is HIGH try higher trimming */
        trimmingvaluep2 += delta;
 80052e4:	6a3a      	ldr	r2, [r7, #32]
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	4413      	add	r3, r2
 80052ea:	623b      	str	r3, [r7, #32]
 80052ec:	e003      	b.n	80052f6 <HAL_OPAMPEx_SelfCalibrateAll+0x3a4>
      }
      else
      {
        trimmingvaluep2 -= delta;
 80052ee:	6a3a      	ldr	r2, [r7, #32]
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	1ad3      	subs	r3, r2, r3
 80052f4:	623b      	str	r3, [r7, #32]
      }

      if ((hopamp3->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005300:	2b00      	cmp	r3, #0
 8005302:	d004      	beq.n	800530e <HAL_OPAMPEx_SelfCalibrateAll+0x3bc>
      {
        /* OPAMP_CSR_OUTCAL is HIGH try higher trimming */
        trimmingvaluep3 += delta;
 8005304:	69ba      	ldr	r2, [r7, #24]
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	4413      	add	r3, r2
 800530a:	61bb      	str	r3, [r7, #24]
 800530c:	e003      	b.n	8005316 <HAL_OPAMPEx_SelfCalibrateAll+0x3c4>
      }
      else
      {
        trimmingvaluep3 -= delta;
 800530e:	69ba      	ldr	r2, [r7, #24]
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	1ad3      	subs	r3, r2, r3
 8005314:	61bb      	str	r3, [r7, #24]
      {
        trimmingvaluep6 -= delta;
      }
#endif

      delta >>= 1;
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	085b      	lsrs	r3, r3, #1
 800531a:	617b      	str	r3, [r7, #20]
    while (delta != 0UL)
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d1a5      	bne.n	800526e <HAL_OPAMPEx_SelfCalibrateAll+0x31c>
    }

    /* Still need to check if righ calibration is current value or un step below */
    /* Indeed the first value that causes the OUTCAL bit to change from 1 to 0 */
    /* Set candidate trimming */
    MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep1 << OPAMP_INPUT_NONINVERTING);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 800532c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800532e:	04da      	lsls	r2, r3, #19
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	430a      	orrs	r2, r1
 8005336:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep2 << OPAMP_INPUT_NONINVERTING);
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 8005342:	6a3b      	ldr	r3, [r7, #32]
 8005344:	04da      	lsls	r2, r3, #19
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	430a      	orrs	r2, r1
 800534c:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep3 << OPAMP_INPUT_NONINVERTING);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 8005358:	69bb      	ldr	r3, [r7, #24]
 800535a:	04da      	lsls	r2, r3, #19
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	430a      	orrs	r2, r1
 8005362:	601a      	str	r2, [r3, #0]
#endif

    /* OFFTRIMmax delay 2 ms as per datasheet (electrical characteristics */
    /* Offset trim time: during calibration, minimum time needed between */
    /* two steps to have 1 mV accuracy */
    HAL_Delay(2);
 8005364:	2002      	movs	r0, #2
 8005366:	f7fd fc07 	bl	8002b78 <HAL_Delay>

    if ((hopamp1->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005374:	2b00      	cmp	r3, #0
 8005376:	d00d      	beq.n	8005394 <HAL_OPAMPEx_SelfCalibrateAll+0x442>
    {
      /* Trimming value is actually one value more */
      trimmingvaluep1++;
 8005378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800537a:	3301      	adds	r3, #1
 800537c:	62bb      	str	r3, [r7, #40]	; 0x28
      /* Set right trimming */
      MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep1 << OPAMP_INPUT_NONINVERTING);
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 8005388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800538a:	04da      	lsls	r2, r3, #19
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	430a      	orrs	r2, r1
 8005392:	601a      	str	r2, [r3, #0]
    }

    if ((hopamp2->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d00d      	beq.n	80053be <HAL_OPAMPEx_SelfCalibrateAll+0x46c>
    {
      /* Trimming value is actually one value more */
      trimmingvaluep2++;
 80053a2:	6a3b      	ldr	r3, [r7, #32]
 80053a4:	3301      	adds	r3, #1
 80053a6:	623b      	str	r3, [r7, #32]
      /* Set right trimming */
      MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep2 << OPAMP_INPUT_NONINVERTING);
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 80053b2:	6a3b      	ldr	r3, [r7, #32]
 80053b4:	04da      	lsls	r2, r3, #19
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	430a      	orrs	r2, r1
 80053bc:	601a      	str	r2, [r3, #0]
    }

    if ((hopamp3->Instance->CSR & OPAMP_CSR_OUTCAL) != 0UL)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d00d      	beq.n	80053e8 <HAL_OPAMPEx_SelfCalibrateAll+0x496>
    {
      /* Trimming value is actually one value more */
      trimmingvaluep3++;
 80053cc:	69bb      	ldr	r3, [r7, #24]
 80053ce:	3301      	adds	r3, #1
 80053d0:	61bb      	str	r3, [r7, #24]
      /* Set right trimming */
      MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep3 << OPAMP_INPUT_NONINVERTING);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 80053dc:	69bb      	ldr	r3, [r7, #24]
 80053de:	04da      	lsls	r2, r3, #19
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	430a      	orrs	r2, r1
 80053e6:	601a      	str	r2, [r3, #0]
      MODIFY_REG(hopamp6->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep6 << OPAMP_INPUT_NONINVERTING);
    }
#endif

    /* Disable calibration */
    CLEAR_BIT(hopamp1->Instance->CSR, OPAMP_CSR_CALON);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80053f6:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hopamp2->Instance->CSR, OPAMP_CSR_CALON);
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005406:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hopamp3->Instance->CSR, OPAMP_CSR_CALON);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	681a      	ldr	r2, [r3, #0]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005416:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hopamp5->Instance->CSR, OPAMP_CSR_CALON);
    CLEAR_BIT(hopamp6->Instance->CSR, OPAMP_CSR_CALON);
#endif

    /* Disable the OPAMPs */
    CLEAR_BIT(hopamp1->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	681a      	ldr	r2, [r3, #0]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f022 0201 	bic.w	r2, r2, #1
 8005426:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hopamp2->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	681a      	ldr	r2, [r3, #0]
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f022 0201 	bic.w	r2, r2, #1
 8005436:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hopamp3->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f022 0201 	bic.w	r2, r2, #1
 8005446:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hopamp5->Instance->CSR, OPAMP_CSR_OPAMPxEN);
    CLEAR_BIT(hopamp6->Instance->CSR, OPAMP_CSR_OPAMPxEN);
#endif

    /* Set normal operating mode back */
    CLEAR_BIT(hopamp1->Instance->CSR, OPAMP_CSR_FORCEVP);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f022 0202 	bic.w	r2, r2, #2
 8005456:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hopamp2->Instance->CSR, OPAMP_CSR_FORCEVP);
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f022 0202 	bic.w	r2, r2, #2
 8005466:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hopamp3->Instance->CSR, OPAMP_CSR_FORCEVP);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	681a      	ldr	r2, [r3, #0]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f022 0202 	bic.w	r2, r2, #2
 8005476:	601a      	str	r2, [r3, #0]
    /* Self calibration is successful  */
    /* Store calibration(user timming) results in init structure. */
    /* Select user timming mode */

    /* Write calibration result N */
    hopamp1->Init.TrimmingValueN = trimmingvaluen1;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800547c:	635a      	str	r2, [r3, #52]	; 0x34
    hopamp2->Init.TrimmingValueN = trimmingvaluen2;
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005482:	635a      	str	r2, [r3, #52]	; 0x34
    hopamp3->Init.TrimmingValueN = trimmingvaluen3;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	69fa      	ldr	r2, [r7, #28]
 8005488:	635a      	str	r2, [r3, #52]	; 0x34
    hopamp5->Init.TrimmingValueN = trimmingvaluen5;
    hopamp6->Init.TrimmingValueN = trimmingvaluen6;
#endif

    /* Write calibration result P */
    hopamp1->Init.TrimmingValueP = trimmingvaluep1;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800548e:	631a      	str	r2, [r3, #48]	; 0x30
    hopamp2->Init.TrimmingValueP = trimmingvaluep2;
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	6a3a      	ldr	r2, [r7, #32]
 8005494:	631a      	str	r2, [r3, #48]	; 0x30
    hopamp3->Init.TrimmingValueP = trimmingvaluep3;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	69ba      	ldr	r2, [r7, #24]
 800549a:	631a      	str	r2, [r3, #48]	; 0x30
    hopamp6->Init.TrimmingValueP = trimmingvaluep6;
#endif

    /* Select user timming mode */
    /* And updated with calibrated settings */
    hopamp1->Init.UserTrimming = OPAMP_TRIMMING_USER;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2210      	movs	r2, #16
 80054a0:	62da      	str	r2, [r3, #44]	; 0x2c
    hopamp2->Init.UserTrimming = OPAMP_TRIMMING_USER;
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	2210      	movs	r2, #16
 80054a6:	62da      	str	r2, [r3, #44]	; 0x2c
    hopamp3->Init.UserTrimming = OPAMP_TRIMMING_USER;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2210      	movs	r2, #16
 80054ac:	62da      	str	r2, [r3, #44]	; 0x2c
    hopamp4->Init.UserTrimming = OPAMP_TRIMMING_USER;
    hopamp5->Init.UserTrimming = OPAMP_TRIMMING_USER;
    hopamp6->Init.UserTrimming = OPAMP_TRIMMING_USER;
#endif

    MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen1 << OPAMP_INPUT_INVERTING);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 80054b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ba:	061a      	lsls	r2, r3, #24
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	430a      	orrs	r2, r1
 80054c2:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen2 << OPAMP_INPUT_INVERTING);
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 80054ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d0:	061a      	lsls	r2, r3, #24
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	430a      	orrs	r2, r1
 80054d8:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen3 << OPAMP_INPUT_INVERTING);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 80054e4:	69fb      	ldr	r3, [r7, #28]
 80054e6:	061a      	lsls	r2, r3, #24
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	430a      	orrs	r2, r1
 80054ee:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp4->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen4 << OPAMP_INPUT_INVERTING);
    MODIFY_REG(hopamp5->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen5 << OPAMP_INPUT_INVERTING);
    MODIFY_REG(hopamp6->Instance->CSR, OPAMP_CSR_TRIMOFFSETN, trimmingvaluen6 << OPAMP_INPUT_INVERTING);
#endif

    MODIFY_REG(hopamp1->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep1 << OPAMP_INPUT_NONINVERTING);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 80054fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054fc:	04da      	lsls	r2, r3, #19
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	430a      	orrs	r2, r1
 8005504:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp2->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep2 << OPAMP_INPUT_NONINVERTING);
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 8005510:	6a3b      	ldr	r3, [r7, #32]
 8005512:	04da      	lsls	r2, r3, #19
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	430a      	orrs	r2, r1
 800551a:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp3->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep3 << OPAMP_INPUT_NONINVERTING);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f423 0178 	bic.w	r1, r3, #16252928	; 0xf80000
 8005526:	69bb      	ldr	r3, [r7, #24]
 8005528:	04da      	lsls	r2, r3, #19
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	430a      	orrs	r2, r1
 8005530:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hopamp6->Instance->CSR, OPAMP_CSR_TRIMOFFSETP, trimmingvaluep4 << OPAMP_INPUT_NONINVERTING);
#endif

  }

  return HAL_OK;
 8005532:	2300      	movs	r3, #0
}
 8005534:	4618      	mov	r0, r3
 8005536:	3730      	adds	r7, #48	; 0x30
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}

0800553c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800553c:	b480      	push	{r7}
 800553e:	b085      	sub	sp, #20
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d141      	bne.n	80055ce <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800554a:	4b4b      	ldr	r3, [pc, #300]	; (8005678 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005552:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005556:	d131      	bne.n	80055bc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005558:	4b47      	ldr	r3, [pc, #284]	; (8005678 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800555a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800555e:	4a46      	ldr	r2, [pc, #280]	; (8005678 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005560:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005564:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005568:	4b43      	ldr	r3, [pc, #268]	; (8005678 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005570:	4a41      	ldr	r2, [pc, #260]	; (8005678 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005572:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005576:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005578:	4b40      	ldr	r3, [pc, #256]	; (800567c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	2232      	movs	r2, #50	; 0x32
 800557e:	fb02 f303 	mul.w	r3, r2, r3
 8005582:	4a3f      	ldr	r2, [pc, #252]	; (8005680 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005584:	fba2 2303 	umull	r2, r3, r2, r3
 8005588:	0c9b      	lsrs	r3, r3, #18
 800558a:	3301      	adds	r3, #1
 800558c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800558e:	e002      	b.n	8005596 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	3b01      	subs	r3, #1
 8005594:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005596:	4b38      	ldr	r3, [pc, #224]	; (8005678 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005598:	695b      	ldr	r3, [r3, #20]
 800559a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800559e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055a2:	d102      	bne.n	80055aa <HAL_PWREx_ControlVoltageScaling+0x6e>
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d1f2      	bne.n	8005590 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80055aa:	4b33      	ldr	r3, [pc, #204]	; (8005678 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055ac:	695b      	ldr	r3, [r3, #20]
 80055ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055b6:	d158      	bne.n	800566a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80055b8:	2303      	movs	r3, #3
 80055ba:	e057      	b.n	800566c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80055bc:	4b2e      	ldr	r3, [pc, #184]	; (8005678 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055c2:	4a2d      	ldr	r2, [pc, #180]	; (8005678 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055c8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80055cc:	e04d      	b.n	800566a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055d4:	d141      	bne.n	800565a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80055d6:	4b28      	ldr	r3, [pc, #160]	; (8005678 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80055de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055e2:	d131      	bne.n	8005648 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80055e4:	4b24      	ldr	r3, [pc, #144]	; (8005678 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055ea:	4a23      	ldr	r2, [pc, #140]	; (8005678 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055f0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80055f4:	4b20      	ldr	r3, [pc, #128]	; (8005678 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80055fc:	4a1e      	ldr	r2, [pc, #120]	; (8005678 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005602:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005604:	4b1d      	ldr	r3, [pc, #116]	; (800567c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	2232      	movs	r2, #50	; 0x32
 800560a:	fb02 f303 	mul.w	r3, r2, r3
 800560e:	4a1c      	ldr	r2, [pc, #112]	; (8005680 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005610:	fba2 2303 	umull	r2, r3, r2, r3
 8005614:	0c9b      	lsrs	r3, r3, #18
 8005616:	3301      	adds	r3, #1
 8005618:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800561a:	e002      	b.n	8005622 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	3b01      	subs	r3, #1
 8005620:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005622:	4b15      	ldr	r3, [pc, #84]	; (8005678 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005624:	695b      	ldr	r3, [r3, #20]
 8005626:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800562a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800562e:	d102      	bne.n	8005636 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d1f2      	bne.n	800561c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005636:	4b10      	ldr	r3, [pc, #64]	; (8005678 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005638:	695b      	ldr	r3, [r3, #20]
 800563a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800563e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005642:	d112      	bne.n	800566a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005644:	2303      	movs	r3, #3
 8005646:	e011      	b.n	800566c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005648:	4b0b      	ldr	r3, [pc, #44]	; (8005678 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800564a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800564e:	4a0a      	ldr	r2, [pc, #40]	; (8005678 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005650:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005654:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005658:	e007      	b.n	800566a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800565a:	4b07      	ldr	r3, [pc, #28]	; (8005678 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005662:	4a05      	ldr	r2, [pc, #20]	; (8005678 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005664:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005668:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800566a:	2300      	movs	r3, #0
}
 800566c:	4618      	mov	r0, r3
 800566e:	3714      	adds	r7, #20
 8005670:	46bd      	mov	sp, r7
 8005672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005676:	4770      	bx	lr
 8005678:	40007000 	.word	0x40007000
 800567c:	20000000 	.word	0x20000000
 8005680:	431bde83 	.word	0x431bde83

08005684 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b088      	sub	sp, #32
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d101      	bne.n	8005696 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005692:	2301      	movs	r3, #1
 8005694:	e308      	b.n	8005ca8 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f003 0301 	and.w	r3, r3, #1
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d075      	beq.n	800578e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80056a2:	4ba3      	ldr	r3, [pc, #652]	; (8005930 <HAL_RCC_OscConfig+0x2ac>)
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	f003 030c 	and.w	r3, r3, #12
 80056aa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80056ac:	4ba0      	ldr	r3, [pc, #640]	; (8005930 <HAL_RCC_OscConfig+0x2ac>)
 80056ae:	68db      	ldr	r3, [r3, #12]
 80056b0:	f003 0303 	and.w	r3, r3, #3
 80056b4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80056b6:	69bb      	ldr	r3, [r7, #24]
 80056b8:	2b0c      	cmp	r3, #12
 80056ba:	d102      	bne.n	80056c2 <HAL_RCC_OscConfig+0x3e>
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	2b03      	cmp	r3, #3
 80056c0:	d002      	beq.n	80056c8 <HAL_RCC_OscConfig+0x44>
 80056c2:	69bb      	ldr	r3, [r7, #24]
 80056c4:	2b08      	cmp	r3, #8
 80056c6:	d10b      	bne.n	80056e0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056c8:	4b99      	ldr	r3, [pc, #612]	; (8005930 <HAL_RCC_OscConfig+0x2ac>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d05b      	beq.n	800578c <HAL_RCC_OscConfig+0x108>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d157      	bne.n	800578c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	e2e3      	b.n	8005ca8 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056e8:	d106      	bne.n	80056f8 <HAL_RCC_OscConfig+0x74>
 80056ea:	4b91      	ldr	r3, [pc, #580]	; (8005930 <HAL_RCC_OscConfig+0x2ac>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a90      	ldr	r2, [pc, #576]	; (8005930 <HAL_RCC_OscConfig+0x2ac>)
 80056f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056f4:	6013      	str	r3, [r2, #0]
 80056f6:	e01d      	b.n	8005734 <HAL_RCC_OscConfig+0xb0>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005700:	d10c      	bne.n	800571c <HAL_RCC_OscConfig+0x98>
 8005702:	4b8b      	ldr	r3, [pc, #556]	; (8005930 <HAL_RCC_OscConfig+0x2ac>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a8a      	ldr	r2, [pc, #552]	; (8005930 <HAL_RCC_OscConfig+0x2ac>)
 8005708:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800570c:	6013      	str	r3, [r2, #0]
 800570e:	4b88      	ldr	r3, [pc, #544]	; (8005930 <HAL_RCC_OscConfig+0x2ac>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a87      	ldr	r2, [pc, #540]	; (8005930 <HAL_RCC_OscConfig+0x2ac>)
 8005714:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005718:	6013      	str	r3, [r2, #0]
 800571a:	e00b      	b.n	8005734 <HAL_RCC_OscConfig+0xb0>
 800571c:	4b84      	ldr	r3, [pc, #528]	; (8005930 <HAL_RCC_OscConfig+0x2ac>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a83      	ldr	r2, [pc, #524]	; (8005930 <HAL_RCC_OscConfig+0x2ac>)
 8005722:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005726:	6013      	str	r3, [r2, #0]
 8005728:	4b81      	ldr	r3, [pc, #516]	; (8005930 <HAL_RCC_OscConfig+0x2ac>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a80      	ldr	r2, [pc, #512]	; (8005930 <HAL_RCC_OscConfig+0x2ac>)
 800572e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005732:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d013      	beq.n	8005764 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800573c:	f7fd fa10 	bl	8002b60 <HAL_GetTick>
 8005740:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005742:	e008      	b.n	8005756 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005744:	f7fd fa0c 	bl	8002b60 <HAL_GetTick>
 8005748:	4602      	mov	r2, r0
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	1ad3      	subs	r3, r2, r3
 800574e:	2b64      	cmp	r3, #100	; 0x64
 8005750:	d901      	bls.n	8005756 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005752:	2303      	movs	r3, #3
 8005754:	e2a8      	b.n	8005ca8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005756:	4b76      	ldr	r3, [pc, #472]	; (8005930 <HAL_RCC_OscConfig+0x2ac>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800575e:	2b00      	cmp	r3, #0
 8005760:	d0f0      	beq.n	8005744 <HAL_RCC_OscConfig+0xc0>
 8005762:	e014      	b.n	800578e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005764:	f7fd f9fc 	bl	8002b60 <HAL_GetTick>
 8005768:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800576a:	e008      	b.n	800577e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800576c:	f7fd f9f8 	bl	8002b60 <HAL_GetTick>
 8005770:	4602      	mov	r2, r0
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	1ad3      	subs	r3, r2, r3
 8005776:	2b64      	cmp	r3, #100	; 0x64
 8005778:	d901      	bls.n	800577e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800577a:	2303      	movs	r3, #3
 800577c:	e294      	b.n	8005ca8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800577e:	4b6c      	ldr	r3, [pc, #432]	; (8005930 <HAL_RCC_OscConfig+0x2ac>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005786:	2b00      	cmp	r3, #0
 8005788:	d1f0      	bne.n	800576c <HAL_RCC_OscConfig+0xe8>
 800578a:	e000      	b.n	800578e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800578c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f003 0302 	and.w	r3, r3, #2
 8005796:	2b00      	cmp	r3, #0
 8005798:	d075      	beq.n	8005886 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800579a:	4b65      	ldr	r3, [pc, #404]	; (8005930 <HAL_RCC_OscConfig+0x2ac>)
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	f003 030c 	and.w	r3, r3, #12
 80057a2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80057a4:	4b62      	ldr	r3, [pc, #392]	; (8005930 <HAL_RCC_OscConfig+0x2ac>)
 80057a6:	68db      	ldr	r3, [r3, #12]
 80057a8:	f003 0303 	and.w	r3, r3, #3
 80057ac:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80057ae:	69bb      	ldr	r3, [r7, #24]
 80057b0:	2b0c      	cmp	r3, #12
 80057b2:	d102      	bne.n	80057ba <HAL_RCC_OscConfig+0x136>
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	2b02      	cmp	r3, #2
 80057b8:	d002      	beq.n	80057c0 <HAL_RCC_OscConfig+0x13c>
 80057ba:	69bb      	ldr	r3, [r7, #24]
 80057bc:	2b04      	cmp	r3, #4
 80057be:	d11f      	bne.n	8005800 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80057c0:	4b5b      	ldr	r3, [pc, #364]	; (8005930 <HAL_RCC_OscConfig+0x2ac>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d005      	beq.n	80057d8 <HAL_RCC_OscConfig+0x154>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	68db      	ldr	r3, [r3, #12]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d101      	bne.n	80057d8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80057d4:	2301      	movs	r3, #1
 80057d6:	e267      	b.n	8005ca8 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057d8:	4b55      	ldr	r3, [pc, #340]	; (8005930 <HAL_RCC_OscConfig+0x2ac>)
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	691b      	ldr	r3, [r3, #16]
 80057e4:	061b      	lsls	r3, r3, #24
 80057e6:	4952      	ldr	r1, [pc, #328]	; (8005930 <HAL_RCC_OscConfig+0x2ac>)
 80057e8:	4313      	orrs	r3, r2
 80057ea:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80057ec:	4b51      	ldr	r3, [pc, #324]	; (8005934 <HAL_RCC_OscConfig+0x2b0>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4618      	mov	r0, r3
 80057f2:	f7fd f969 	bl	8002ac8 <HAL_InitTick>
 80057f6:	4603      	mov	r3, r0
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d043      	beq.n	8005884 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80057fc:	2301      	movs	r3, #1
 80057fe:	e253      	b.n	8005ca8 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	68db      	ldr	r3, [r3, #12]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d023      	beq.n	8005850 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005808:	4b49      	ldr	r3, [pc, #292]	; (8005930 <HAL_RCC_OscConfig+0x2ac>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a48      	ldr	r2, [pc, #288]	; (8005930 <HAL_RCC_OscConfig+0x2ac>)
 800580e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005812:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005814:	f7fd f9a4 	bl	8002b60 <HAL_GetTick>
 8005818:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800581a:	e008      	b.n	800582e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800581c:	f7fd f9a0 	bl	8002b60 <HAL_GetTick>
 8005820:	4602      	mov	r2, r0
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	1ad3      	subs	r3, r2, r3
 8005826:	2b02      	cmp	r3, #2
 8005828:	d901      	bls.n	800582e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800582a:	2303      	movs	r3, #3
 800582c:	e23c      	b.n	8005ca8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800582e:	4b40      	ldr	r3, [pc, #256]	; (8005930 <HAL_RCC_OscConfig+0x2ac>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005836:	2b00      	cmp	r3, #0
 8005838:	d0f0      	beq.n	800581c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800583a:	4b3d      	ldr	r3, [pc, #244]	; (8005930 <HAL_RCC_OscConfig+0x2ac>)
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	691b      	ldr	r3, [r3, #16]
 8005846:	061b      	lsls	r3, r3, #24
 8005848:	4939      	ldr	r1, [pc, #228]	; (8005930 <HAL_RCC_OscConfig+0x2ac>)
 800584a:	4313      	orrs	r3, r2
 800584c:	604b      	str	r3, [r1, #4]
 800584e:	e01a      	b.n	8005886 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005850:	4b37      	ldr	r3, [pc, #220]	; (8005930 <HAL_RCC_OscConfig+0x2ac>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a36      	ldr	r2, [pc, #216]	; (8005930 <HAL_RCC_OscConfig+0x2ac>)
 8005856:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800585a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800585c:	f7fd f980 	bl	8002b60 <HAL_GetTick>
 8005860:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005862:	e008      	b.n	8005876 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005864:	f7fd f97c 	bl	8002b60 <HAL_GetTick>
 8005868:	4602      	mov	r2, r0
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	1ad3      	subs	r3, r2, r3
 800586e:	2b02      	cmp	r3, #2
 8005870:	d901      	bls.n	8005876 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005872:	2303      	movs	r3, #3
 8005874:	e218      	b.n	8005ca8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005876:	4b2e      	ldr	r3, [pc, #184]	; (8005930 <HAL_RCC_OscConfig+0x2ac>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800587e:	2b00      	cmp	r3, #0
 8005880:	d1f0      	bne.n	8005864 <HAL_RCC_OscConfig+0x1e0>
 8005882:	e000      	b.n	8005886 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005884:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f003 0308 	and.w	r3, r3, #8
 800588e:	2b00      	cmp	r3, #0
 8005890:	d03c      	beq.n	800590c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	695b      	ldr	r3, [r3, #20]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d01c      	beq.n	80058d4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800589a:	4b25      	ldr	r3, [pc, #148]	; (8005930 <HAL_RCC_OscConfig+0x2ac>)
 800589c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058a0:	4a23      	ldr	r2, [pc, #140]	; (8005930 <HAL_RCC_OscConfig+0x2ac>)
 80058a2:	f043 0301 	orr.w	r3, r3, #1
 80058a6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058aa:	f7fd f959 	bl	8002b60 <HAL_GetTick>
 80058ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80058b0:	e008      	b.n	80058c4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80058b2:	f7fd f955 	bl	8002b60 <HAL_GetTick>
 80058b6:	4602      	mov	r2, r0
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	1ad3      	subs	r3, r2, r3
 80058bc:	2b02      	cmp	r3, #2
 80058be:	d901      	bls.n	80058c4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80058c0:	2303      	movs	r3, #3
 80058c2:	e1f1      	b.n	8005ca8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80058c4:	4b1a      	ldr	r3, [pc, #104]	; (8005930 <HAL_RCC_OscConfig+0x2ac>)
 80058c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058ca:	f003 0302 	and.w	r3, r3, #2
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d0ef      	beq.n	80058b2 <HAL_RCC_OscConfig+0x22e>
 80058d2:	e01b      	b.n	800590c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80058d4:	4b16      	ldr	r3, [pc, #88]	; (8005930 <HAL_RCC_OscConfig+0x2ac>)
 80058d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058da:	4a15      	ldr	r2, [pc, #84]	; (8005930 <HAL_RCC_OscConfig+0x2ac>)
 80058dc:	f023 0301 	bic.w	r3, r3, #1
 80058e0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058e4:	f7fd f93c 	bl	8002b60 <HAL_GetTick>
 80058e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80058ea:	e008      	b.n	80058fe <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80058ec:	f7fd f938 	bl	8002b60 <HAL_GetTick>
 80058f0:	4602      	mov	r2, r0
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	1ad3      	subs	r3, r2, r3
 80058f6:	2b02      	cmp	r3, #2
 80058f8:	d901      	bls.n	80058fe <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 80058fa:	2303      	movs	r3, #3
 80058fc:	e1d4      	b.n	8005ca8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80058fe:	4b0c      	ldr	r3, [pc, #48]	; (8005930 <HAL_RCC_OscConfig+0x2ac>)
 8005900:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005904:	f003 0302 	and.w	r3, r3, #2
 8005908:	2b00      	cmp	r3, #0
 800590a:	d1ef      	bne.n	80058ec <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f003 0304 	and.w	r3, r3, #4
 8005914:	2b00      	cmp	r3, #0
 8005916:	f000 80ab 	beq.w	8005a70 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800591a:	2300      	movs	r3, #0
 800591c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800591e:	4b04      	ldr	r3, [pc, #16]	; (8005930 <HAL_RCC_OscConfig+0x2ac>)
 8005920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005922:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005926:	2b00      	cmp	r3, #0
 8005928:	d106      	bne.n	8005938 <HAL_RCC_OscConfig+0x2b4>
 800592a:	2301      	movs	r3, #1
 800592c:	e005      	b.n	800593a <HAL_RCC_OscConfig+0x2b6>
 800592e:	bf00      	nop
 8005930:	40021000 	.word	0x40021000
 8005934:	20000004 	.word	0x20000004
 8005938:	2300      	movs	r3, #0
 800593a:	2b00      	cmp	r3, #0
 800593c:	d00d      	beq.n	800595a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800593e:	4baf      	ldr	r3, [pc, #700]	; (8005bfc <HAL_RCC_OscConfig+0x578>)
 8005940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005942:	4aae      	ldr	r2, [pc, #696]	; (8005bfc <HAL_RCC_OscConfig+0x578>)
 8005944:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005948:	6593      	str	r3, [r2, #88]	; 0x58
 800594a:	4bac      	ldr	r3, [pc, #688]	; (8005bfc <HAL_RCC_OscConfig+0x578>)
 800594c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800594e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005952:	60fb      	str	r3, [r7, #12]
 8005954:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005956:	2301      	movs	r3, #1
 8005958:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800595a:	4ba9      	ldr	r3, [pc, #676]	; (8005c00 <HAL_RCC_OscConfig+0x57c>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005962:	2b00      	cmp	r3, #0
 8005964:	d118      	bne.n	8005998 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005966:	4ba6      	ldr	r3, [pc, #664]	; (8005c00 <HAL_RCC_OscConfig+0x57c>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4aa5      	ldr	r2, [pc, #660]	; (8005c00 <HAL_RCC_OscConfig+0x57c>)
 800596c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005970:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005972:	f7fd f8f5 	bl	8002b60 <HAL_GetTick>
 8005976:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005978:	e008      	b.n	800598c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800597a:	f7fd f8f1 	bl	8002b60 <HAL_GetTick>
 800597e:	4602      	mov	r2, r0
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	1ad3      	subs	r3, r2, r3
 8005984:	2b02      	cmp	r3, #2
 8005986:	d901      	bls.n	800598c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005988:	2303      	movs	r3, #3
 800598a:	e18d      	b.n	8005ca8 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800598c:	4b9c      	ldr	r3, [pc, #624]	; (8005c00 <HAL_RCC_OscConfig+0x57c>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005994:	2b00      	cmp	r3, #0
 8005996:	d0f0      	beq.n	800597a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	2b01      	cmp	r3, #1
 800599e:	d108      	bne.n	80059b2 <HAL_RCC_OscConfig+0x32e>
 80059a0:	4b96      	ldr	r3, [pc, #600]	; (8005bfc <HAL_RCC_OscConfig+0x578>)
 80059a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059a6:	4a95      	ldr	r2, [pc, #596]	; (8005bfc <HAL_RCC_OscConfig+0x578>)
 80059a8:	f043 0301 	orr.w	r3, r3, #1
 80059ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80059b0:	e024      	b.n	80059fc <HAL_RCC_OscConfig+0x378>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	2b05      	cmp	r3, #5
 80059b8:	d110      	bne.n	80059dc <HAL_RCC_OscConfig+0x358>
 80059ba:	4b90      	ldr	r3, [pc, #576]	; (8005bfc <HAL_RCC_OscConfig+0x578>)
 80059bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059c0:	4a8e      	ldr	r2, [pc, #568]	; (8005bfc <HAL_RCC_OscConfig+0x578>)
 80059c2:	f043 0304 	orr.w	r3, r3, #4
 80059c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80059ca:	4b8c      	ldr	r3, [pc, #560]	; (8005bfc <HAL_RCC_OscConfig+0x578>)
 80059cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059d0:	4a8a      	ldr	r2, [pc, #552]	; (8005bfc <HAL_RCC_OscConfig+0x578>)
 80059d2:	f043 0301 	orr.w	r3, r3, #1
 80059d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80059da:	e00f      	b.n	80059fc <HAL_RCC_OscConfig+0x378>
 80059dc:	4b87      	ldr	r3, [pc, #540]	; (8005bfc <HAL_RCC_OscConfig+0x578>)
 80059de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059e2:	4a86      	ldr	r2, [pc, #536]	; (8005bfc <HAL_RCC_OscConfig+0x578>)
 80059e4:	f023 0301 	bic.w	r3, r3, #1
 80059e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80059ec:	4b83      	ldr	r3, [pc, #524]	; (8005bfc <HAL_RCC_OscConfig+0x578>)
 80059ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059f2:	4a82      	ldr	r2, [pc, #520]	; (8005bfc <HAL_RCC_OscConfig+0x578>)
 80059f4:	f023 0304 	bic.w	r3, r3, #4
 80059f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	689b      	ldr	r3, [r3, #8]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d016      	beq.n	8005a32 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a04:	f7fd f8ac 	bl	8002b60 <HAL_GetTick>
 8005a08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a0a:	e00a      	b.n	8005a22 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a0c:	f7fd f8a8 	bl	8002b60 <HAL_GetTick>
 8005a10:	4602      	mov	r2, r0
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	1ad3      	subs	r3, r2, r3
 8005a16:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d901      	bls.n	8005a22 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005a1e:	2303      	movs	r3, #3
 8005a20:	e142      	b.n	8005ca8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a22:	4b76      	ldr	r3, [pc, #472]	; (8005bfc <HAL_RCC_OscConfig+0x578>)
 8005a24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a28:	f003 0302 	and.w	r3, r3, #2
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d0ed      	beq.n	8005a0c <HAL_RCC_OscConfig+0x388>
 8005a30:	e015      	b.n	8005a5e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a32:	f7fd f895 	bl	8002b60 <HAL_GetTick>
 8005a36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005a38:	e00a      	b.n	8005a50 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a3a:	f7fd f891 	bl	8002b60 <HAL_GetTick>
 8005a3e:	4602      	mov	r2, r0
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	1ad3      	subs	r3, r2, r3
 8005a44:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d901      	bls.n	8005a50 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005a4c:	2303      	movs	r3, #3
 8005a4e:	e12b      	b.n	8005ca8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005a50:	4b6a      	ldr	r3, [pc, #424]	; (8005bfc <HAL_RCC_OscConfig+0x578>)
 8005a52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a56:	f003 0302 	and.w	r3, r3, #2
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d1ed      	bne.n	8005a3a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005a5e:	7ffb      	ldrb	r3, [r7, #31]
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	d105      	bne.n	8005a70 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a64:	4b65      	ldr	r3, [pc, #404]	; (8005bfc <HAL_RCC_OscConfig+0x578>)
 8005a66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a68:	4a64      	ldr	r2, [pc, #400]	; (8005bfc <HAL_RCC_OscConfig+0x578>)
 8005a6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a6e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f003 0320 	and.w	r3, r3, #32
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d03c      	beq.n	8005af6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	699b      	ldr	r3, [r3, #24]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d01c      	beq.n	8005abe <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005a84:	4b5d      	ldr	r3, [pc, #372]	; (8005bfc <HAL_RCC_OscConfig+0x578>)
 8005a86:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005a8a:	4a5c      	ldr	r2, [pc, #368]	; (8005bfc <HAL_RCC_OscConfig+0x578>)
 8005a8c:	f043 0301 	orr.w	r3, r3, #1
 8005a90:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a94:	f7fd f864 	bl	8002b60 <HAL_GetTick>
 8005a98:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005a9a:	e008      	b.n	8005aae <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005a9c:	f7fd f860 	bl	8002b60 <HAL_GetTick>
 8005aa0:	4602      	mov	r2, r0
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	1ad3      	subs	r3, r2, r3
 8005aa6:	2b02      	cmp	r3, #2
 8005aa8:	d901      	bls.n	8005aae <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005aaa:	2303      	movs	r3, #3
 8005aac:	e0fc      	b.n	8005ca8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005aae:	4b53      	ldr	r3, [pc, #332]	; (8005bfc <HAL_RCC_OscConfig+0x578>)
 8005ab0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005ab4:	f003 0302 	and.w	r3, r3, #2
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d0ef      	beq.n	8005a9c <HAL_RCC_OscConfig+0x418>
 8005abc:	e01b      	b.n	8005af6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005abe:	4b4f      	ldr	r3, [pc, #316]	; (8005bfc <HAL_RCC_OscConfig+0x578>)
 8005ac0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005ac4:	4a4d      	ldr	r2, [pc, #308]	; (8005bfc <HAL_RCC_OscConfig+0x578>)
 8005ac6:	f023 0301 	bic.w	r3, r3, #1
 8005aca:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ace:	f7fd f847 	bl	8002b60 <HAL_GetTick>
 8005ad2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005ad4:	e008      	b.n	8005ae8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005ad6:	f7fd f843 	bl	8002b60 <HAL_GetTick>
 8005ada:	4602      	mov	r2, r0
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	1ad3      	subs	r3, r2, r3
 8005ae0:	2b02      	cmp	r3, #2
 8005ae2:	d901      	bls.n	8005ae8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005ae4:	2303      	movs	r3, #3
 8005ae6:	e0df      	b.n	8005ca8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005ae8:	4b44      	ldr	r3, [pc, #272]	; (8005bfc <HAL_RCC_OscConfig+0x578>)
 8005aea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005aee:	f003 0302 	and.w	r3, r3, #2
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d1ef      	bne.n	8005ad6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	69db      	ldr	r3, [r3, #28]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	f000 80d3 	beq.w	8005ca6 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005b00:	4b3e      	ldr	r3, [pc, #248]	; (8005bfc <HAL_RCC_OscConfig+0x578>)
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	f003 030c 	and.w	r3, r3, #12
 8005b08:	2b0c      	cmp	r3, #12
 8005b0a:	f000 808d 	beq.w	8005c28 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	69db      	ldr	r3, [r3, #28]
 8005b12:	2b02      	cmp	r3, #2
 8005b14:	d15a      	bne.n	8005bcc <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b16:	4b39      	ldr	r3, [pc, #228]	; (8005bfc <HAL_RCC_OscConfig+0x578>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a38      	ldr	r2, [pc, #224]	; (8005bfc <HAL_RCC_OscConfig+0x578>)
 8005b1c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b22:	f7fd f81d 	bl	8002b60 <HAL_GetTick>
 8005b26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b28:	e008      	b.n	8005b3c <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b2a:	f7fd f819 	bl	8002b60 <HAL_GetTick>
 8005b2e:	4602      	mov	r2, r0
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	1ad3      	subs	r3, r2, r3
 8005b34:	2b02      	cmp	r3, #2
 8005b36:	d901      	bls.n	8005b3c <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8005b38:	2303      	movs	r3, #3
 8005b3a:	e0b5      	b.n	8005ca8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b3c:	4b2f      	ldr	r3, [pc, #188]	; (8005bfc <HAL_RCC_OscConfig+0x578>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d1f0      	bne.n	8005b2a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005b48:	4b2c      	ldr	r3, [pc, #176]	; (8005bfc <HAL_RCC_OscConfig+0x578>)
 8005b4a:	68da      	ldr	r2, [r3, #12]
 8005b4c:	4b2d      	ldr	r3, [pc, #180]	; (8005c04 <HAL_RCC_OscConfig+0x580>)
 8005b4e:	4013      	ands	r3, r2
 8005b50:	687a      	ldr	r2, [r7, #4]
 8005b52:	6a11      	ldr	r1, [r2, #32]
 8005b54:	687a      	ldr	r2, [r7, #4]
 8005b56:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005b58:	3a01      	subs	r2, #1
 8005b5a:	0112      	lsls	r2, r2, #4
 8005b5c:	4311      	orrs	r1, r2
 8005b5e:	687a      	ldr	r2, [r7, #4]
 8005b60:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005b62:	0212      	lsls	r2, r2, #8
 8005b64:	4311      	orrs	r1, r2
 8005b66:	687a      	ldr	r2, [r7, #4]
 8005b68:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005b6a:	0852      	lsrs	r2, r2, #1
 8005b6c:	3a01      	subs	r2, #1
 8005b6e:	0552      	lsls	r2, r2, #21
 8005b70:	4311      	orrs	r1, r2
 8005b72:	687a      	ldr	r2, [r7, #4]
 8005b74:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005b76:	0852      	lsrs	r2, r2, #1
 8005b78:	3a01      	subs	r2, #1
 8005b7a:	0652      	lsls	r2, r2, #25
 8005b7c:	4311      	orrs	r1, r2
 8005b7e:	687a      	ldr	r2, [r7, #4]
 8005b80:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005b82:	06d2      	lsls	r2, r2, #27
 8005b84:	430a      	orrs	r2, r1
 8005b86:	491d      	ldr	r1, [pc, #116]	; (8005bfc <HAL_RCC_OscConfig+0x578>)
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b8c:	4b1b      	ldr	r3, [pc, #108]	; (8005bfc <HAL_RCC_OscConfig+0x578>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a1a      	ldr	r2, [pc, #104]	; (8005bfc <HAL_RCC_OscConfig+0x578>)
 8005b92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b96:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005b98:	4b18      	ldr	r3, [pc, #96]	; (8005bfc <HAL_RCC_OscConfig+0x578>)
 8005b9a:	68db      	ldr	r3, [r3, #12]
 8005b9c:	4a17      	ldr	r2, [pc, #92]	; (8005bfc <HAL_RCC_OscConfig+0x578>)
 8005b9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ba2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ba4:	f7fc ffdc 	bl	8002b60 <HAL_GetTick>
 8005ba8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005baa:	e008      	b.n	8005bbe <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bac:	f7fc ffd8 	bl	8002b60 <HAL_GetTick>
 8005bb0:	4602      	mov	r2, r0
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	1ad3      	subs	r3, r2, r3
 8005bb6:	2b02      	cmp	r3, #2
 8005bb8:	d901      	bls.n	8005bbe <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8005bba:	2303      	movs	r3, #3
 8005bbc:	e074      	b.n	8005ca8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005bbe:	4b0f      	ldr	r3, [pc, #60]	; (8005bfc <HAL_RCC_OscConfig+0x578>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d0f0      	beq.n	8005bac <HAL_RCC_OscConfig+0x528>
 8005bca:	e06c      	b.n	8005ca6 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bcc:	4b0b      	ldr	r3, [pc, #44]	; (8005bfc <HAL_RCC_OscConfig+0x578>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a0a      	ldr	r2, [pc, #40]	; (8005bfc <HAL_RCC_OscConfig+0x578>)
 8005bd2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005bd6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005bd8:	4b08      	ldr	r3, [pc, #32]	; (8005bfc <HAL_RCC_OscConfig+0x578>)
 8005bda:	68db      	ldr	r3, [r3, #12]
 8005bdc:	4a07      	ldr	r2, [pc, #28]	; (8005bfc <HAL_RCC_OscConfig+0x578>)
 8005bde:	f023 0303 	bic.w	r3, r3, #3
 8005be2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005be4:	4b05      	ldr	r3, [pc, #20]	; (8005bfc <HAL_RCC_OscConfig+0x578>)
 8005be6:	68db      	ldr	r3, [r3, #12]
 8005be8:	4a04      	ldr	r2, [pc, #16]	; (8005bfc <HAL_RCC_OscConfig+0x578>)
 8005bea:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005bee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bf2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bf4:	f7fc ffb4 	bl	8002b60 <HAL_GetTick>
 8005bf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005bfa:	e00e      	b.n	8005c1a <HAL_RCC_OscConfig+0x596>
 8005bfc:	40021000 	.word	0x40021000
 8005c00:	40007000 	.word	0x40007000
 8005c04:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c08:	f7fc ffaa 	bl	8002b60 <HAL_GetTick>
 8005c0c:	4602      	mov	r2, r0
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	1ad3      	subs	r3, r2, r3
 8005c12:	2b02      	cmp	r3, #2
 8005c14:	d901      	bls.n	8005c1a <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8005c16:	2303      	movs	r3, #3
 8005c18:	e046      	b.n	8005ca8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c1a:	4b25      	ldr	r3, [pc, #148]	; (8005cb0 <HAL_RCC_OscConfig+0x62c>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d1f0      	bne.n	8005c08 <HAL_RCC_OscConfig+0x584>
 8005c26:	e03e      	b.n	8005ca6 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	69db      	ldr	r3, [r3, #28]
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	d101      	bne.n	8005c34 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8005c30:	2301      	movs	r3, #1
 8005c32:	e039      	b.n	8005ca8 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005c34:	4b1e      	ldr	r3, [pc, #120]	; (8005cb0 <HAL_RCC_OscConfig+0x62c>)
 8005c36:	68db      	ldr	r3, [r3, #12]
 8005c38:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	f003 0203 	and.w	r2, r3, #3
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6a1b      	ldr	r3, [r3, #32]
 8005c44:	429a      	cmp	r2, r3
 8005c46:	d12c      	bne.n	8005ca2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c52:	3b01      	subs	r3, #1
 8005c54:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c56:	429a      	cmp	r2, r3
 8005c58:	d123      	bne.n	8005ca2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c64:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005c66:	429a      	cmp	r2, r3
 8005c68:	d11b      	bne.n	8005ca2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c74:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005c76:	429a      	cmp	r2, r3
 8005c78:	d113      	bne.n	8005ca2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c84:	085b      	lsrs	r3, r3, #1
 8005c86:	3b01      	subs	r3, #1
 8005c88:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005c8a:	429a      	cmp	r2, r3
 8005c8c:	d109      	bne.n	8005ca2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c98:	085b      	lsrs	r3, r3, #1
 8005c9a:	3b01      	subs	r3, #1
 8005c9c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005c9e:	429a      	cmp	r2, r3
 8005ca0:	d001      	beq.n	8005ca6 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e000      	b.n	8005ca8 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8005ca6:	2300      	movs	r3, #0
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3720      	adds	r7, #32
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}
 8005cb0:	40021000 	.word	0x40021000

08005cb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b086      	sub	sp, #24
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
 8005cbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d101      	bne.n	8005ccc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005cc8:	2301      	movs	r3, #1
 8005cca:	e11e      	b.n	8005f0a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005ccc:	4b91      	ldr	r3, [pc, #580]	; (8005f14 <HAL_RCC_ClockConfig+0x260>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f003 030f 	and.w	r3, r3, #15
 8005cd4:	683a      	ldr	r2, [r7, #0]
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	d910      	bls.n	8005cfc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cda:	4b8e      	ldr	r3, [pc, #568]	; (8005f14 <HAL_RCC_ClockConfig+0x260>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f023 020f 	bic.w	r2, r3, #15
 8005ce2:	498c      	ldr	r1, [pc, #560]	; (8005f14 <HAL_RCC_ClockConfig+0x260>)
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cea:	4b8a      	ldr	r3, [pc, #552]	; (8005f14 <HAL_RCC_ClockConfig+0x260>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f003 030f 	and.w	r3, r3, #15
 8005cf2:	683a      	ldr	r2, [r7, #0]
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	d001      	beq.n	8005cfc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	e106      	b.n	8005f0a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f003 0301 	and.w	r3, r3, #1
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d073      	beq.n	8005df0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	2b03      	cmp	r3, #3
 8005d0e:	d129      	bne.n	8005d64 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d10:	4b81      	ldr	r3, [pc, #516]	; (8005f18 <HAL_RCC_ClockConfig+0x264>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d101      	bne.n	8005d20 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	e0f4      	b.n	8005f0a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005d20:	f000 f99e 	bl	8006060 <RCC_GetSysClockFreqFromPLLSource>
 8005d24:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	4a7c      	ldr	r2, [pc, #496]	; (8005f1c <HAL_RCC_ClockConfig+0x268>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d93f      	bls.n	8005dae <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005d2e:	4b7a      	ldr	r3, [pc, #488]	; (8005f18 <HAL_RCC_ClockConfig+0x264>)
 8005d30:	689b      	ldr	r3, [r3, #8]
 8005d32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d009      	beq.n	8005d4e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d033      	beq.n	8005dae <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d12f      	bne.n	8005dae <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005d4e:	4b72      	ldr	r3, [pc, #456]	; (8005f18 <HAL_RCC_ClockConfig+0x264>)
 8005d50:	689b      	ldr	r3, [r3, #8]
 8005d52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d56:	4a70      	ldr	r2, [pc, #448]	; (8005f18 <HAL_RCC_ClockConfig+0x264>)
 8005d58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d5c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005d5e:	2380      	movs	r3, #128	; 0x80
 8005d60:	617b      	str	r3, [r7, #20]
 8005d62:	e024      	b.n	8005dae <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	2b02      	cmp	r3, #2
 8005d6a:	d107      	bne.n	8005d7c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005d6c:	4b6a      	ldr	r3, [pc, #424]	; (8005f18 <HAL_RCC_ClockConfig+0x264>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d109      	bne.n	8005d8c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005d78:	2301      	movs	r3, #1
 8005d7a:	e0c6      	b.n	8005f0a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005d7c:	4b66      	ldr	r3, [pc, #408]	; (8005f18 <HAL_RCC_ClockConfig+0x264>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d101      	bne.n	8005d8c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	e0be      	b.n	8005f0a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005d8c:	f000 f8ce 	bl	8005f2c <HAL_RCC_GetSysClockFreq>
 8005d90:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	4a61      	ldr	r2, [pc, #388]	; (8005f1c <HAL_RCC_ClockConfig+0x268>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d909      	bls.n	8005dae <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005d9a:	4b5f      	ldr	r3, [pc, #380]	; (8005f18 <HAL_RCC_ClockConfig+0x264>)
 8005d9c:	689b      	ldr	r3, [r3, #8]
 8005d9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005da2:	4a5d      	ldr	r2, [pc, #372]	; (8005f18 <HAL_RCC_ClockConfig+0x264>)
 8005da4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005da8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005daa:	2380      	movs	r3, #128	; 0x80
 8005dac:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005dae:	4b5a      	ldr	r3, [pc, #360]	; (8005f18 <HAL_RCC_ClockConfig+0x264>)
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	f023 0203 	bic.w	r2, r3, #3
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	4957      	ldr	r1, [pc, #348]	; (8005f18 <HAL_RCC_ClockConfig+0x264>)
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005dc0:	f7fc fece 	bl	8002b60 <HAL_GetTick>
 8005dc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005dc6:	e00a      	b.n	8005dde <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005dc8:	f7fc feca 	bl	8002b60 <HAL_GetTick>
 8005dcc:	4602      	mov	r2, r0
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	1ad3      	subs	r3, r2, r3
 8005dd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d901      	bls.n	8005dde <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005dda:	2303      	movs	r3, #3
 8005ddc:	e095      	b.n	8005f0a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005dde:	4b4e      	ldr	r3, [pc, #312]	; (8005f18 <HAL_RCC_ClockConfig+0x264>)
 8005de0:	689b      	ldr	r3, [r3, #8]
 8005de2:	f003 020c 	and.w	r2, r3, #12
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	009b      	lsls	r3, r3, #2
 8005dec:	429a      	cmp	r2, r3
 8005dee:	d1eb      	bne.n	8005dc8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f003 0302 	and.w	r3, r3, #2
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d023      	beq.n	8005e44 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f003 0304 	and.w	r3, r3, #4
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d005      	beq.n	8005e14 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005e08:	4b43      	ldr	r3, [pc, #268]	; (8005f18 <HAL_RCC_ClockConfig+0x264>)
 8005e0a:	689b      	ldr	r3, [r3, #8]
 8005e0c:	4a42      	ldr	r2, [pc, #264]	; (8005f18 <HAL_RCC_ClockConfig+0x264>)
 8005e0e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005e12:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f003 0308 	and.w	r3, r3, #8
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d007      	beq.n	8005e30 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005e20:	4b3d      	ldr	r3, [pc, #244]	; (8005f18 <HAL_RCC_ClockConfig+0x264>)
 8005e22:	689b      	ldr	r3, [r3, #8]
 8005e24:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005e28:	4a3b      	ldr	r2, [pc, #236]	; (8005f18 <HAL_RCC_ClockConfig+0x264>)
 8005e2a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005e2e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e30:	4b39      	ldr	r3, [pc, #228]	; (8005f18 <HAL_RCC_ClockConfig+0x264>)
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	4936      	ldr	r1, [pc, #216]	; (8005f18 <HAL_RCC_ClockConfig+0x264>)
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	608b      	str	r3, [r1, #8]
 8005e42:	e008      	b.n	8005e56 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	2b80      	cmp	r3, #128	; 0x80
 8005e48:	d105      	bne.n	8005e56 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005e4a:	4b33      	ldr	r3, [pc, #204]	; (8005f18 <HAL_RCC_ClockConfig+0x264>)
 8005e4c:	689b      	ldr	r3, [r3, #8]
 8005e4e:	4a32      	ldr	r2, [pc, #200]	; (8005f18 <HAL_RCC_ClockConfig+0x264>)
 8005e50:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e54:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005e56:	4b2f      	ldr	r3, [pc, #188]	; (8005f14 <HAL_RCC_ClockConfig+0x260>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f003 030f 	and.w	r3, r3, #15
 8005e5e:	683a      	ldr	r2, [r7, #0]
 8005e60:	429a      	cmp	r2, r3
 8005e62:	d21d      	bcs.n	8005ea0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e64:	4b2b      	ldr	r3, [pc, #172]	; (8005f14 <HAL_RCC_ClockConfig+0x260>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f023 020f 	bic.w	r2, r3, #15
 8005e6c:	4929      	ldr	r1, [pc, #164]	; (8005f14 <HAL_RCC_ClockConfig+0x260>)
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	4313      	orrs	r3, r2
 8005e72:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005e74:	f7fc fe74 	bl	8002b60 <HAL_GetTick>
 8005e78:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e7a:	e00a      	b.n	8005e92 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e7c:	f7fc fe70 	bl	8002b60 <HAL_GetTick>
 8005e80:	4602      	mov	r2, r0
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	1ad3      	subs	r3, r2, r3
 8005e86:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d901      	bls.n	8005e92 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005e8e:	2303      	movs	r3, #3
 8005e90:	e03b      	b.n	8005f0a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e92:	4b20      	ldr	r3, [pc, #128]	; (8005f14 <HAL_RCC_ClockConfig+0x260>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f003 030f 	and.w	r3, r3, #15
 8005e9a:	683a      	ldr	r2, [r7, #0]
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	d1ed      	bne.n	8005e7c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f003 0304 	and.w	r3, r3, #4
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d008      	beq.n	8005ebe <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005eac:	4b1a      	ldr	r3, [pc, #104]	; (8005f18 <HAL_RCC_ClockConfig+0x264>)
 8005eae:	689b      	ldr	r3, [r3, #8]
 8005eb0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	68db      	ldr	r3, [r3, #12]
 8005eb8:	4917      	ldr	r1, [pc, #92]	; (8005f18 <HAL_RCC_ClockConfig+0x264>)
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f003 0308 	and.w	r3, r3, #8
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d009      	beq.n	8005ede <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005eca:	4b13      	ldr	r3, [pc, #76]	; (8005f18 <HAL_RCC_ClockConfig+0x264>)
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	691b      	ldr	r3, [r3, #16]
 8005ed6:	00db      	lsls	r3, r3, #3
 8005ed8:	490f      	ldr	r1, [pc, #60]	; (8005f18 <HAL_RCC_ClockConfig+0x264>)
 8005eda:	4313      	orrs	r3, r2
 8005edc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005ede:	f000 f825 	bl	8005f2c <HAL_RCC_GetSysClockFreq>
 8005ee2:	4601      	mov	r1, r0
 8005ee4:	4b0c      	ldr	r3, [pc, #48]	; (8005f18 <HAL_RCC_ClockConfig+0x264>)
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	091b      	lsrs	r3, r3, #4
 8005eea:	f003 030f 	and.w	r3, r3, #15
 8005eee:	4a0c      	ldr	r2, [pc, #48]	; (8005f20 <HAL_RCC_ClockConfig+0x26c>)
 8005ef0:	5cd3      	ldrb	r3, [r2, r3]
 8005ef2:	f003 031f 	and.w	r3, r3, #31
 8005ef6:	fa21 f303 	lsr.w	r3, r1, r3
 8005efa:	4a0a      	ldr	r2, [pc, #40]	; (8005f24 <HAL_RCC_ClockConfig+0x270>)
 8005efc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005efe:	4b0a      	ldr	r3, [pc, #40]	; (8005f28 <HAL_RCC_ClockConfig+0x274>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4618      	mov	r0, r3
 8005f04:	f7fc fde0 	bl	8002ac8 <HAL_InitTick>
 8005f08:	4603      	mov	r3, r0
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3718      	adds	r7, #24
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}
 8005f12:	bf00      	nop
 8005f14:	40022000 	.word	0x40022000
 8005f18:	40021000 	.word	0x40021000
 8005f1c:	04c4b400 	.word	0x04c4b400
 8005f20:	0800df20 	.word	0x0800df20
 8005f24:	20000000 	.word	0x20000000
 8005f28:	20000004 	.word	0x20000004

08005f2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b087      	sub	sp, #28
 8005f30:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005f32:	4b2c      	ldr	r3, [pc, #176]	; (8005fe4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005f34:	689b      	ldr	r3, [r3, #8]
 8005f36:	f003 030c 	and.w	r3, r3, #12
 8005f3a:	2b04      	cmp	r3, #4
 8005f3c:	d102      	bne.n	8005f44 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005f3e:	4b2a      	ldr	r3, [pc, #168]	; (8005fe8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005f40:	613b      	str	r3, [r7, #16]
 8005f42:	e047      	b.n	8005fd4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005f44:	4b27      	ldr	r3, [pc, #156]	; (8005fe4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005f46:	689b      	ldr	r3, [r3, #8]
 8005f48:	f003 030c 	and.w	r3, r3, #12
 8005f4c:	2b08      	cmp	r3, #8
 8005f4e:	d102      	bne.n	8005f56 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005f50:	4b26      	ldr	r3, [pc, #152]	; (8005fec <HAL_RCC_GetSysClockFreq+0xc0>)
 8005f52:	613b      	str	r3, [r7, #16]
 8005f54:	e03e      	b.n	8005fd4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005f56:	4b23      	ldr	r3, [pc, #140]	; (8005fe4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005f58:	689b      	ldr	r3, [r3, #8]
 8005f5a:	f003 030c 	and.w	r3, r3, #12
 8005f5e:	2b0c      	cmp	r3, #12
 8005f60:	d136      	bne.n	8005fd0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005f62:	4b20      	ldr	r3, [pc, #128]	; (8005fe4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005f64:	68db      	ldr	r3, [r3, #12]
 8005f66:	f003 0303 	and.w	r3, r3, #3
 8005f6a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005f6c:	4b1d      	ldr	r3, [pc, #116]	; (8005fe4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005f6e:	68db      	ldr	r3, [r3, #12]
 8005f70:	091b      	lsrs	r3, r3, #4
 8005f72:	f003 030f 	and.w	r3, r3, #15
 8005f76:	3301      	adds	r3, #1
 8005f78:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	2b03      	cmp	r3, #3
 8005f7e:	d10c      	bne.n	8005f9a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005f80:	4a1a      	ldr	r2, [pc, #104]	; (8005fec <HAL_RCC_GetSysClockFreq+0xc0>)
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f88:	4a16      	ldr	r2, [pc, #88]	; (8005fe4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005f8a:	68d2      	ldr	r2, [r2, #12]
 8005f8c:	0a12      	lsrs	r2, r2, #8
 8005f8e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005f92:	fb02 f303 	mul.w	r3, r2, r3
 8005f96:	617b      	str	r3, [r7, #20]
      break;
 8005f98:	e00c      	b.n	8005fb4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005f9a:	4a13      	ldr	r2, [pc, #76]	; (8005fe8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fa2:	4a10      	ldr	r2, [pc, #64]	; (8005fe4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005fa4:	68d2      	ldr	r2, [r2, #12]
 8005fa6:	0a12      	lsrs	r2, r2, #8
 8005fa8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005fac:	fb02 f303 	mul.w	r3, r2, r3
 8005fb0:	617b      	str	r3, [r7, #20]
      break;
 8005fb2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005fb4:	4b0b      	ldr	r3, [pc, #44]	; (8005fe4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005fb6:	68db      	ldr	r3, [r3, #12]
 8005fb8:	0e5b      	lsrs	r3, r3, #25
 8005fba:	f003 0303 	and.w	r3, r3, #3
 8005fbe:	3301      	adds	r3, #1
 8005fc0:	005b      	lsls	r3, r3, #1
 8005fc2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005fc4:	697a      	ldr	r2, [r7, #20]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fcc:	613b      	str	r3, [r7, #16]
 8005fce:	e001      	b.n	8005fd4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005fd4:	693b      	ldr	r3, [r7, #16]
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	371c      	adds	r7, #28
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe0:	4770      	bx	lr
 8005fe2:	bf00      	nop
 8005fe4:	40021000 	.word	0x40021000
 8005fe8:	00f42400 	.word	0x00f42400
 8005fec:	007a1200 	.word	0x007a1200

08005ff0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ff4:	4b03      	ldr	r3, [pc, #12]	; (8006004 <HAL_RCC_GetHCLKFreq+0x14>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006000:	4770      	bx	lr
 8006002:	bf00      	nop
 8006004:	20000000 	.word	0x20000000

08006008 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800600c:	f7ff fff0 	bl	8005ff0 <HAL_RCC_GetHCLKFreq>
 8006010:	4601      	mov	r1, r0
 8006012:	4b06      	ldr	r3, [pc, #24]	; (800602c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	0a1b      	lsrs	r3, r3, #8
 8006018:	f003 0307 	and.w	r3, r3, #7
 800601c:	4a04      	ldr	r2, [pc, #16]	; (8006030 <HAL_RCC_GetPCLK1Freq+0x28>)
 800601e:	5cd3      	ldrb	r3, [r2, r3]
 8006020:	f003 031f 	and.w	r3, r3, #31
 8006024:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006028:	4618      	mov	r0, r3
 800602a:	bd80      	pop	{r7, pc}
 800602c:	40021000 	.word	0x40021000
 8006030:	0800df30 	.word	0x0800df30

08006034 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006038:	f7ff ffda 	bl	8005ff0 <HAL_RCC_GetHCLKFreq>
 800603c:	4601      	mov	r1, r0
 800603e:	4b06      	ldr	r3, [pc, #24]	; (8006058 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006040:	689b      	ldr	r3, [r3, #8]
 8006042:	0adb      	lsrs	r3, r3, #11
 8006044:	f003 0307 	and.w	r3, r3, #7
 8006048:	4a04      	ldr	r2, [pc, #16]	; (800605c <HAL_RCC_GetPCLK2Freq+0x28>)
 800604a:	5cd3      	ldrb	r3, [r2, r3]
 800604c:	f003 031f 	and.w	r3, r3, #31
 8006050:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006054:	4618      	mov	r0, r3
 8006056:	bd80      	pop	{r7, pc}
 8006058:	40021000 	.word	0x40021000
 800605c:	0800df30 	.word	0x0800df30

08006060 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006060:	b480      	push	{r7}
 8006062:	b087      	sub	sp, #28
 8006064:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006066:	4b1e      	ldr	r3, [pc, #120]	; (80060e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006068:	68db      	ldr	r3, [r3, #12]
 800606a:	f003 0303 	and.w	r3, r3, #3
 800606e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006070:	4b1b      	ldr	r3, [pc, #108]	; (80060e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006072:	68db      	ldr	r3, [r3, #12]
 8006074:	091b      	lsrs	r3, r3, #4
 8006076:	f003 030f 	and.w	r3, r3, #15
 800607a:	3301      	adds	r3, #1
 800607c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	2b03      	cmp	r3, #3
 8006082:	d10c      	bne.n	800609e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006084:	4a17      	ldr	r2, [pc, #92]	; (80060e4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	fbb2 f3f3 	udiv	r3, r2, r3
 800608c:	4a14      	ldr	r2, [pc, #80]	; (80060e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800608e:	68d2      	ldr	r2, [r2, #12]
 8006090:	0a12      	lsrs	r2, r2, #8
 8006092:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006096:	fb02 f303 	mul.w	r3, r2, r3
 800609a:	617b      	str	r3, [r7, #20]
    break;
 800609c:	e00c      	b.n	80060b8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800609e:	4a12      	ldr	r2, [pc, #72]	; (80060e8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80060a6:	4a0e      	ldr	r2, [pc, #56]	; (80060e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80060a8:	68d2      	ldr	r2, [r2, #12]
 80060aa:	0a12      	lsrs	r2, r2, #8
 80060ac:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80060b0:	fb02 f303 	mul.w	r3, r2, r3
 80060b4:	617b      	str	r3, [r7, #20]
    break;
 80060b6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80060b8:	4b09      	ldr	r3, [pc, #36]	; (80060e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80060ba:	68db      	ldr	r3, [r3, #12]
 80060bc:	0e5b      	lsrs	r3, r3, #25
 80060be:	f003 0303 	and.w	r3, r3, #3
 80060c2:	3301      	adds	r3, #1
 80060c4:	005b      	lsls	r3, r3, #1
 80060c6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80060c8:	697a      	ldr	r2, [r7, #20]
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80060d0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80060d2:	687b      	ldr	r3, [r7, #4]
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	371c      	adds	r7, #28
 80060d8:	46bd      	mov	sp, r7
 80060da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060de:	4770      	bx	lr
 80060e0:	40021000 	.word	0x40021000
 80060e4:	007a1200 	.word	0x007a1200
 80060e8:	00f42400 	.word	0x00f42400

080060ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b086      	sub	sp, #24
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80060f4:	2300      	movs	r3, #0
 80060f6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80060f8:	2300      	movs	r3, #0
 80060fa:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006104:	2b00      	cmp	r3, #0
 8006106:	f000 8098 	beq.w	800623a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800610a:	2300      	movs	r3, #0
 800610c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800610e:	4b43      	ldr	r3, [pc, #268]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006112:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006116:	2b00      	cmp	r3, #0
 8006118:	d10d      	bne.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800611a:	4b40      	ldr	r3, [pc, #256]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800611c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800611e:	4a3f      	ldr	r2, [pc, #252]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006120:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006124:	6593      	str	r3, [r2, #88]	; 0x58
 8006126:	4b3d      	ldr	r3, [pc, #244]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800612a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800612e:	60bb      	str	r3, [r7, #8]
 8006130:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006132:	2301      	movs	r3, #1
 8006134:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006136:	4b3a      	ldr	r3, [pc, #232]	; (8006220 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a39      	ldr	r2, [pc, #228]	; (8006220 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800613c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006140:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006142:	f7fc fd0d 	bl	8002b60 <HAL_GetTick>
 8006146:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006148:	e009      	b.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800614a:	f7fc fd09 	bl	8002b60 <HAL_GetTick>
 800614e:	4602      	mov	r2, r0
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	1ad3      	subs	r3, r2, r3
 8006154:	2b02      	cmp	r3, #2
 8006156:	d902      	bls.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006158:	2303      	movs	r3, #3
 800615a:	74fb      	strb	r3, [r7, #19]
        break;
 800615c:	e005      	b.n	800616a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800615e:	4b30      	ldr	r3, [pc, #192]	; (8006220 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006166:	2b00      	cmp	r3, #0
 8006168:	d0ef      	beq.n	800614a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800616a:	7cfb      	ldrb	r3, [r7, #19]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d159      	bne.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006170:	4b2a      	ldr	r3, [pc, #168]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006172:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006176:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800617a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d01e      	beq.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006186:	697a      	ldr	r2, [r7, #20]
 8006188:	429a      	cmp	r2, r3
 800618a:	d019      	beq.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800618c:	4b23      	ldr	r3, [pc, #140]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800618e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006192:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006196:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006198:	4b20      	ldr	r3, [pc, #128]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800619a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800619e:	4a1f      	ldr	r2, [pc, #124]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80061a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80061a8:	4b1c      	ldr	r3, [pc, #112]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80061aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061ae:	4a1b      	ldr	r2, [pc, #108]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80061b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80061b8:	4a18      	ldr	r2, [pc, #96]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	f003 0301 	and.w	r3, r3, #1
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d016      	beq.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061ca:	f7fc fcc9 	bl	8002b60 <HAL_GetTick>
 80061ce:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80061d0:	e00b      	b.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061d2:	f7fc fcc5 	bl	8002b60 <HAL_GetTick>
 80061d6:	4602      	mov	r2, r0
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	1ad3      	subs	r3, r2, r3
 80061dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d902      	bls.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80061e4:	2303      	movs	r3, #3
 80061e6:	74fb      	strb	r3, [r7, #19]
            break;
 80061e8:	e006      	b.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80061ea:	4b0c      	ldr	r3, [pc, #48]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80061ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061f0:	f003 0302 	and.w	r3, r3, #2
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d0ec      	beq.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80061f8:	7cfb      	ldrb	r3, [r7, #19]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d10b      	bne.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80061fe:	4b07      	ldr	r3, [pc, #28]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006200:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006204:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800620c:	4903      	ldr	r1, [pc, #12]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800620e:	4313      	orrs	r3, r2
 8006210:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006214:	e008      	b.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006216:	7cfb      	ldrb	r3, [r7, #19]
 8006218:	74bb      	strb	r3, [r7, #18]
 800621a:	e005      	b.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800621c:	40021000 	.word	0x40021000
 8006220:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006224:	7cfb      	ldrb	r3, [r7, #19]
 8006226:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006228:	7c7b      	ldrb	r3, [r7, #17]
 800622a:	2b01      	cmp	r3, #1
 800622c:	d105      	bne.n	800623a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800622e:	4ba6      	ldr	r3, [pc, #664]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006232:	4aa5      	ldr	r2, [pc, #660]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006234:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006238:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f003 0301 	and.w	r3, r3, #1
 8006242:	2b00      	cmp	r3, #0
 8006244:	d00a      	beq.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006246:	4ba0      	ldr	r3, [pc, #640]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006248:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800624c:	f023 0203 	bic.w	r2, r3, #3
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	499c      	ldr	r1, [pc, #624]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006256:	4313      	orrs	r3, r2
 8006258:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f003 0302 	and.w	r3, r3, #2
 8006264:	2b00      	cmp	r3, #0
 8006266:	d00a      	beq.n	800627e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006268:	4b97      	ldr	r3, [pc, #604]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800626a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800626e:	f023 020c 	bic.w	r2, r3, #12
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	689b      	ldr	r3, [r3, #8]
 8006276:	4994      	ldr	r1, [pc, #592]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006278:	4313      	orrs	r3, r2
 800627a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f003 0304 	and.w	r3, r3, #4
 8006286:	2b00      	cmp	r3, #0
 8006288:	d00a      	beq.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800628a:	4b8f      	ldr	r3, [pc, #572]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800628c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006290:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	68db      	ldr	r3, [r3, #12]
 8006298:	498b      	ldr	r1, [pc, #556]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800629a:	4313      	orrs	r3, r2
 800629c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f003 0308 	and.w	r3, r3, #8
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d00a      	beq.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80062ac:	4b86      	ldr	r3, [pc, #536]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80062ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062b2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	691b      	ldr	r3, [r3, #16]
 80062ba:	4983      	ldr	r1, [pc, #524]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80062bc:	4313      	orrs	r3, r2
 80062be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f003 0320 	and.w	r3, r3, #32
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d00a      	beq.n	80062e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80062ce:	4b7e      	ldr	r3, [pc, #504]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80062d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062d4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	695b      	ldr	r3, [r3, #20]
 80062dc:	497a      	ldr	r1, [pc, #488]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80062de:	4313      	orrs	r3, r2
 80062e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d00a      	beq.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80062f0:	4b75      	ldr	r3, [pc, #468]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80062f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062f6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	699b      	ldr	r3, [r3, #24]
 80062fe:	4972      	ldr	r1, [pc, #456]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006300:	4313      	orrs	r3, r2
 8006302:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800630e:	2b00      	cmp	r3, #0
 8006310:	d00a      	beq.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006312:	4b6d      	ldr	r3, [pc, #436]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006314:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006318:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	69db      	ldr	r3, [r3, #28]
 8006320:	4969      	ldr	r1, [pc, #420]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006322:	4313      	orrs	r3, r2
 8006324:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006330:	2b00      	cmp	r3, #0
 8006332:	d00a      	beq.n	800634a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006334:	4b64      	ldr	r3, [pc, #400]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800633a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6a1b      	ldr	r3, [r3, #32]
 8006342:	4961      	ldr	r1, [pc, #388]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006344:	4313      	orrs	r3, r2
 8006346:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006352:	2b00      	cmp	r3, #0
 8006354:	d00a      	beq.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006356:	4b5c      	ldr	r3, [pc, #368]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006358:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800635c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006364:	4958      	ldr	r1, [pc, #352]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006366:	4313      	orrs	r3, r2
 8006368:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006374:	2b00      	cmp	r3, #0
 8006376:	d015      	beq.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006378:	4b53      	ldr	r3, [pc, #332]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800637a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800637e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006386:	4950      	ldr	r1, [pc, #320]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006388:	4313      	orrs	r3, r2
 800638a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006392:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006396:	d105      	bne.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006398:	4b4b      	ldr	r3, [pc, #300]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800639a:	68db      	ldr	r3, [r3, #12]
 800639c:	4a4a      	ldr	r2, [pc, #296]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800639e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80063a2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d015      	beq.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80063b0:	4b45      	ldr	r3, [pc, #276]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80063b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063b6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063be:	4942      	ldr	r1, [pc, #264]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80063c0:	4313      	orrs	r3, r2
 80063c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80063ce:	d105      	bne.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80063d0:	4b3d      	ldr	r3, [pc, #244]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80063d2:	68db      	ldr	r3, [r3, #12]
 80063d4:	4a3c      	ldr	r2, [pc, #240]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80063d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80063da:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d015      	beq.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80063e8:	4b37      	ldr	r3, [pc, #220]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80063ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063ee:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063f6:	4934      	ldr	r1, [pc, #208]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80063f8:	4313      	orrs	r3, r2
 80063fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006402:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006406:	d105      	bne.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006408:	4b2f      	ldr	r3, [pc, #188]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800640a:	68db      	ldr	r3, [r3, #12]
 800640c:	4a2e      	ldr	r2, [pc, #184]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800640e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006412:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800641c:	2b00      	cmp	r3, #0
 800641e:	d015      	beq.n	800644c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006420:	4b29      	ldr	r3, [pc, #164]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006426:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800642e:	4926      	ldr	r1, [pc, #152]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006430:	4313      	orrs	r3, r2
 8006432:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800643a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800643e:	d105      	bne.n	800644c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006440:	4b21      	ldr	r3, [pc, #132]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006442:	68db      	ldr	r3, [r3, #12]
 8006444:	4a20      	ldr	r2, [pc, #128]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006446:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800644a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006454:	2b00      	cmp	r3, #0
 8006456:	d015      	beq.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006458:	4b1b      	ldr	r3, [pc, #108]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800645a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800645e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006466:	4918      	ldr	r1, [pc, #96]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006468:	4313      	orrs	r3, r2
 800646a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006472:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006476:	d105      	bne.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006478:	4b13      	ldr	r3, [pc, #76]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800647a:	68db      	ldr	r3, [r3, #12]
 800647c:	4a12      	ldr	r2, [pc, #72]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800647e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006482:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800648c:	2b00      	cmp	r3, #0
 800648e:	d015      	beq.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006490:	4b0d      	ldr	r3, [pc, #52]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006492:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006496:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800649e:	490a      	ldr	r1, [pc, #40]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80064a0:	4313      	orrs	r3, r2
 80064a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80064ae:	d105      	bne.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80064b0:	4b05      	ldr	r3, [pc, #20]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80064b2:	68db      	ldr	r3, [r3, #12]
 80064b4:	4a04      	ldr	r2, [pc, #16]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80064b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064ba:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80064bc:	7cbb      	ldrb	r3, [r7, #18]
}
 80064be:	4618      	mov	r0, r3
 80064c0:	3718      	adds	r7, #24
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}
 80064c6:	bf00      	nop
 80064c8:	40021000 	.word	0x40021000

080064cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b082      	sub	sp, #8
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d101      	bne.n	80064de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80064da:	2301      	movs	r3, #1
 80064dc:	e049      	b.n	8006572 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064e4:	b2db      	uxtb	r3, r3
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d106      	bne.n	80064f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2200      	movs	r2, #0
 80064ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f7fc f912 	bl	800271c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2202      	movs	r2, #2
 80064fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681a      	ldr	r2, [r3, #0]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	3304      	adds	r3, #4
 8006508:	4619      	mov	r1, r3
 800650a:	4610      	mov	r0, r2
 800650c:	f000 fc8a 	bl	8006e24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2201      	movs	r2, #1
 8006514:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2201      	movs	r2, #1
 800651c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2201      	movs	r2, #1
 8006524:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2201      	movs	r2, #1
 800652c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2201      	movs	r2, #1
 8006534:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2201      	movs	r2, #1
 800653c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2201      	movs	r2, #1
 8006544:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2201      	movs	r2, #1
 800654c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2201      	movs	r2, #1
 8006554:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2201      	movs	r2, #1
 800655c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2201      	movs	r2, #1
 8006564:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2201      	movs	r2, #1
 800656c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006570:	2300      	movs	r3, #0
}
 8006572:	4618      	mov	r0, r3
 8006574:	3708      	adds	r7, #8
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}

0800657a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800657a:	b580      	push	{r7, lr}
 800657c:	b082      	sub	sp, #8
 800657e:	af00      	add	r7, sp, #0
 8006580:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d101      	bne.n	800658c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006588:	2301      	movs	r3, #1
 800658a:	e049      	b.n	8006620 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006592:	b2db      	uxtb	r3, r3
 8006594:	2b00      	cmp	r3, #0
 8006596:	d106      	bne.n	80065a6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2200      	movs	r2, #0
 800659c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f000 f841 	bl	8006628 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2202      	movs	r2, #2
 80065aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681a      	ldr	r2, [r3, #0]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	3304      	adds	r3, #4
 80065b6:	4619      	mov	r1, r3
 80065b8:	4610      	mov	r0, r2
 80065ba:	f000 fc33 	bl	8006e24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2201      	movs	r2, #1
 80065c2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2201      	movs	r2, #1
 80065ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2201      	movs	r2, #1
 80065d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2201      	movs	r2, #1
 80065da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2201      	movs	r2, #1
 80065e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2201      	movs	r2, #1
 80065ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2201      	movs	r2, #1
 80065f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2201      	movs	r2, #1
 80065fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2201      	movs	r2, #1
 8006602:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2201      	movs	r2, #1
 800660a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2201      	movs	r2, #1
 8006612:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2201      	movs	r2, #1
 800661a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800661e:	2300      	movs	r3, #0
}
 8006620:	4618      	mov	r0, r3
 8006622:	3708      	adds	r7, #8
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}

08006628 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006628:	b480      	push	{r7}
 800662a:	b083      	sub	sp, #12
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006630:	bf00      	nop
 8006632:	370c      	adds	r7, #12
 8006634:	46bd      	mov	sp, r7
 8006636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663a:	4770      	bx	lr

0800663c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b084      	sub	sp, #16
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
 8006644:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d109      	bne.n	8006660 <HAL_TIM_PWM_Start+0x24>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006652:	b2db      	uxtb	r3, r3
 8006654:	2b01      	cmp	r3, #1
 8006656:	bf14      	ite	ne
 8006658:	2301      	movne	r3, #1
 800665a:	2300      	moveq	r3, #0
 800665c:	b2db      	uxtb	r3, r3
 800665e:	e03c      	b.n	80066da <HAL_TIM_PWM_Start+0x9e>
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	2b04      	cmp	r3, #4
 8006664:	d109      	bne.n	800667a <HAL_TIM_PWM_Start+0x3e>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800666c:	b2db      	uxtb	r3, r3
 800666e:	2b01      	cmp	r3, #1
 8006670:	bf14      	ite	ne
 8006672:	2301      	movne	r3, #1
 8006674:	2300      	moveq	r3, #0
 8006676:	b2db      	uxtb	r3, r3
 8006678:	e02f      	b.n	80066da <HAL_TIM_PWM_Start+0x9e>
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	2b08      	cmp	r3, #8
 800667e:	d109      	bne.n	8006694 <HAL_TIM_PWM_Start+0x58>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006686:	b2db      	uxtb	r3, r3
 8006688:	2b01      	cmp	r3, #1
 800668a:	bf14      	ite	ne
 800668c:	2301      	movne	r3, #1
 800668e:	2300      	moveq	r3, #0
 8006690:	b2db      	uxtb	r3, r3
 8006692:	e022      	b.n	80066da <HAL_TIM_PWM_Start+0x9e>
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	2b0c      	cmp	r3, #12
 8006698:	d109      	bne.n	80066ae <HAL_TIM_PWM_Start+0x72>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80066a0:	b2db      	uxtb	r3, r3
 80066a2:	2b01      	cmp	r3, #1
 80066a4:	bf14      	ite	ne
 80066a6:	2301      	movne	r3, #1
 80066a8:	2300      	moveq	r3, #0
 80066aa:	b2db      	uxtb	r3, r3
 80066ac:	e015      	b.n	80066da <HAL_TIM_PWM_Start+0x9e>
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	2b10      	cmp	r3, #16
 80066b2:	d109      	bne.n	80066c8 <HAL_TIM_PWM_Start+0x8c>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80066ba:	b2db      	uxtb	r3, r3
 80066bc:	2b01      	cmp	r3, #1
 80066be:	bf14      	ite	ne
 80066c0:	2301      	movne	r3, #1
 80066c2:	2300      	moveq	r3, #0
 80066c4:	b2db      	uxtb	r3, r3
 80066c6:	e008      	b.n	80066da <HAL_TIM_PWM_Start+0x9e>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80066ce:	b2db      	uxtb	r3, r3
 80066d0:	2b01      	cmp	r3, #1
 80066d2:	bf14      	ite	ne
 80066d4:	2301      	movne	r3, #1
 80066d6:	2300      	moveq	r3, #0
 80066d8:	b2db      	uxtb	r3, r3
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d001      	beq.n	80066e2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80066de:	2301      	movs	r3, #1
 80066e0:	e06e      	b.n	80067c0 <HAL_TIM_PWM_Start+0x184>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d104      	bne.n	80066f2 <HAL_TIM_PWM_Start+0xb6>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2202      	movs	r2, #2
 80066ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80066f0:	e023      	b.n	800673a <HAL_TIM_PWM_Start+0xfe>
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	2b04      	cmp	r3, #4
 80066f6:	d104      	bne.n	8006702 <HAL_TIM_PWM_Start+0xc6>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2202      	movs	r2, #2
 80066fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006700:	e01b      	b.n	800673a <HAL_TIM_PWM_Start+0xfe>
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	2b08      	cmp	r3, #8
 8006706:	d104      	bne.n	8006712 <HAL_TIM_PWM_Start+0xd6>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2202      	movs	r2, #2
 800670c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006710:	e013      	b.n	800673a <HAL_TIM_PWM_Start+0xfe>
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	2b0c      	cmp	r3, #12
 8006716:	d104      	bne.n	8006722 <HAL_TIM_PWM_Start+0xe6>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2202      	movs	r2, #2
 800671c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006720:	e00b      	b.n	800673a <HAL_TIM_PWM_Start+0xfe>
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	2b10      	cmp	r3, #16
 8006726:	d104      	bne.n	8006732 <HAL_TIM_PWM_Start+0xf6>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2202      	movs	r2, #2
 800672c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006730:	e003      	b.n	800673a <HAL_TIM_PWM_Start+0xfe>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2202      	movs	r2, #2
 8006736:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	2201      	movs	r2, #1
 8006740:	6839      	ldr	r1, [r7, #0]
 8006742:	4618      	mov	r0, r3
 8006744:	f000 ff90 	bl	8007668 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a1e      	ldr	r2, [pc, #120]	; (80067c8 <HAL_TIM_PWM_Start+0x18c>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d013      	beq.n	800677a <HAL_TIM_PWM_Start+0x13e>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a1d      	ldr	r2, [pc, #116]	; (80067cc <HAL_TIM_PWM_Start+0x190>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d00e      	beq.n	800677a <HAL_TIM_PWM_Start+0x13e>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4a1b      	ldr	r2, [pc, #108]	; (80067d0 <HAL_TIM_PWM_Start+0x194>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d009      	beq.n	800677a <HAL_TIM_PWM_Start+0x13e>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4a1a      	ldr	r2, [pc, #104]	; (80067d4 <HAL_TIM_PWM_Start+0x198>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d004      	beq.n	800677a <HAL_TIM_PWM_Start+0x13e>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4a18      	ldr	r2, [pc, #96]	; (80067d8 <HAL_TIM_PWM_Start+0x19c>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d101      	bne.n	800677e <HAL_TIM_PWM_Start+0x142>
 800677a:	2301      	movs	r3, #1
 800677c:	e000      	b.n	8006780 <HAL_TIM_PWM_Start+0x144>
 800677e:	2300      	movs	r3, #0
 8006780:	2b00      	cmp	r3, #0
 8006782:	d007      	beq.n	8006794 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006792:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	689a      	ldr	r2, [r3, #8]
 800679a:	4b10      	ldr	r3, [pc, #64]	; (80067dc <HAL_TIM_PWM_Start+0x1a0>)
 800679c:	4013      	ands	r3, r2
 800679e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	2b06      	cmp	r3, #6
 80067a4:	d00b      	beq.n	80067be <HAL_TIM_PWM_Start+0x182>
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067ac:	d007      	beq.n	80067be <HAL_TIM_PWM_Start+0x182>
  {
    __HAL_TIM_ENABLE(htim);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	681a      	ldr	r2, [r3, #0]
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f042 0201 	orr.w	r2, r2, #1
 80067bc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80067be:	2300      	movs	r3, #0
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	3710      	adds	r7, #16
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bd80      	pop	{r7, pc}
 80067c8:	40012c00 	.word	0x40012c00
 80067cc:	40013400 	.word	0x40013400
 80067d0:	40014000 	.word	0x40014000
 80067d4:	40014400 	.word	0x40014400
 80067d8:	40014800 	.word	0x40014800
 80067dc:	00010007 	.word	0x00010007

080067e0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b086      	sub	sp, #24
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
 80067e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d101      	bne.n	80067f4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80067f0:	2301      	movs	r3, #1
 80067f2:	e097      	b.n	8006924 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067fa:	b2db      	uxtb	r3, r3
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d106      	bne.n	800680e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2200      	movs	r2, #0
 8006804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f7fb ffa7 	bl	800275c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2202      	movs	r2, #2
 8006812:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	689b      	ldr	r3, [r3, #8]
 800681c:	687a      	ldr	r2, [r7, #4]
 800681e:	6812      	ldr	r2, [r2, #0]
 8006820:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8006824:	f023 0307 	bic.w	r3, r3, #7
 8006828:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681a      	ldr	r2, [r3, #0]
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	3304      	adds	r3, #4
 8006832:	4619      	mov	r1, r3
 8006834:	4610      	mov	r0, r2
 8006836:	f000 faf5 	bl	8006e24 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	689b      	ldr	r3, [r3, #8]
 8006840:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	699b      	ldr	r3, [r3, #24]
 8006848:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	6a1b      	ldr	r3, [r3, #32]
 8006850:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	697a      	ldr	r2, [r7, #20]
 8006858:	4313      	orrs	r3, r2
 800685a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800685c:	693b      	ldr	r3, [r7, #16]
 800685e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006862:	f023 0303 	bic.w	r3, r3, #3
 8006866:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	689a      	ldr	r2, [r3, #8]
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	699b      	ldr	r3, [r3, #24]
 8006870:	021b      	lsls	r3, r3, #8
 8006872:	4313      	orrs	r3, r2
 8006874:	693a      	ldr	r2, [r7, #16]
 8006876:	4313      	orrs	r3, r2
 8006878:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006880:	f023 030c 	bic.w	r3, r3, #12
 8006884:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800688c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006890:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	68da      	ldr	r2, [r3, #12]
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	69db      	ldr	r3, [r3, #28]
 800689a:	021b      	lsls	r3, r3, #8
 800689c:	4313      	orrs	r3, r2
 800689e:	693a      	ldr	r2, [r7, #16]
 80068a0:	4313      	orrs	r3, r2
 80068a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	691b      	ldr	r3, [r3, #16]
 80068a8:	011a      	lsls	r2, r3, #4
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	6a1b      	ldr	r3, [r3, #32]
 80068ae:	031b      	lsls	r3, r3, #12
 80068b0:	4313      	orrs	r3, r2
 80068b2:	693a      	ldr	r2, [r7, #16]
 80068b4:	4313      	orrs	r3, r2
 80068b6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80068be:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80068c6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	685a      	ldr	r2, [r3, #4]
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	695b      	ldr	r3, [r3, #20]
 80068d0:	011b      	lsls	r3, r3, #4
 80068d2:	4313      	orrs	r3, r2
 80068d4:	68fa      	ldr	r2, [r7, #12]
 80068d6:	4313      	orrs	r3, r2
 80068d8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	697a      	ldr	r2, [r7, #20]
 80068e0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	693a      	ldr	r2, [r7, #16]
 80068e8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	68fa      	ldr	r2, [r7, #12]
 80068f0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2201      	movs	r2, #1
 80068f6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2201      	movs	r2, #1
 80068fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2201      	movs	r2, #1
 8006906:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2201      	movs	r2, #1
 800690e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2201      	movs	r2, #1
 8006916:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2201      	movs	r2, #1
 800691e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006922:	2300      	movs	r3, #0
}
 8006924:	4618      	mov	r0, r3
 8006926:	3718      	adds	r7, #24
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}

0800692c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b084      	sub	sp, #16
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
 8006934:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800693c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006944:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800694c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006954:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d110      	bne.n	800697e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800695c:	7bfb      	ldrb	r3, [r7, #15]
 800695e:	2b01      	cmp	r3, #1
 8006960:	d102      	bne.n	8006968 <HAL_TIM_Encoder_Start+0x3c>
     || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006962:	7b7b      	ldrb	r3, [r7, #13]
 8006964:	2b01      	cmp	r3, #1
 8006966:	d001      	beq.n	800696c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006968:	2301      	movs	r3, #1
 800696a:	e068      	b.n	8006a3e <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2202      	movs	r2, #2
 8006970:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2202      	movs	r2, #2
 8006978:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800697c:	e031      	b.n	80069e2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	2b04      	cmp	r3, #4
 8006982:	d110      	bne.n	80069a6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006984:	7bbb      	ldrb	r3, [r7, #14]
 8006986:	2b01      	cmp	r3, #1
 8006988:	d102      	bne.n	8006990 <HAL_TIM_Encoder_Start+0x64>
     || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800698a:	7b3b      	ldrb	r3, [r7, #12]
 800698c:	2b01      	cmp	r3, #1
 800698e:	d001      	beq.n	8006994 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006990:	2301      	movs	r3, #1
 8006992:	e054      	b.n	8006a3e <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2202      	movs	r2, #2
 8006998:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2202      	movs	r2, #2
 80069a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80069a4:	e01d      	b.n	80069e2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80069a6:	7bfb      	ldrb	r3, [r7, #15]
 80069a8:	2b01      	cmp	r3, #1
 80069aa:	d108      	bne.n	80069be <HAL_TIM_Encoder_Start+0x92>
     || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80069ac:	7bbb      	ldrb	r3, [r7, #14]
 80069ae:	2b01      	cmp	r3, #1
 80069b0:	d105      	bne.n	80069be <HAL_TIM_Encoder_Start+0x92>
     || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80069b2:	7b7b      	ldrb	r3, [r7, #13]
 80069b4:	2b01      	cmp	r3, #1
 80069b6:	d102      	bne.n	80069be <HAL_TIM_Encoder_Start+0x92>
     || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80069b8:	7b3b      	ldrb	r3, [r7, #12]
 80069ba:	2b01      	cmp	r3, #1
 80069bc:	d001      	beq.n	80069c2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80069be:	2301      	movs	r3, #1
 80069c0:	e03d      	b.n	8006a3e <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2202      	movs	r2, #2
 80069c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2202      	movs	r2, #2
 80069ce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2202      	movs	r2, #2
 80069d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2202      	movs	r2, #2
 80069de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d002      	beq.n	80069ee <HAL_TIM_Encoder_Start+0xc2>
 80069e8:	2b04      	cmp	r3, #4
 80069ea:	d008      	beq.n	80069fe <HAL_TIM_Encoder_Start+0xd2>
 80069ec:	e00f      	b.n	8006a0e <HAL_TIM_Encoder_Start+0xe2>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	2201      	movs	r2, #1
 80069f4:	2100      	movs	r1, #0
 80069f6:	4618      	mov	r0, r3
 80069f8:	f000 fe36 	bl	8007668 <TIM_CCxChannelCmd>
      break;
 80069fc:	e016      	b.n	8006a2c <HAL_TIM_Encoder_Start+0x100>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	2201      	movs	r2, #1
 8006a04:	2104      	movs	r1, #4
 8006a06:	4618      	mov	r0, r3
 8006a08:	f000 fe2e 	bl	8007668 <TIM_CCxChannelCmd>
      break;
 8006a0c:	e00e      	b.n	8006a2c <HAL_TIM_Encoder_Start+0x100>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	2201      	movs	r2, #1
 8006a14:	2100      	movs	r1, #0
 8006a16:	4618      	mov	r0, r3
 8006a18:	f000 fe26 	bl	8007668 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	2201      	movs	r2, #1
 8006a22:	2104      	movs	r1, #4
 8006a24:	4618      	mov	r0, r3
 8006a26:	f000 fe1f 	bl	8007668 <TIM_CCxChannelCmd>
      break;
 8006a2a:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	681a      	ldr	r2, [r3, #0]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f042 0201 	orr.w	r2, r2, #1
 8006a3a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006a3c:	2300      	movs	r3, #0
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	3710      	adds	r7, #16
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}
	...

08006a48 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b084      	sub	sp, #16
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	60f8      	str	r0, [r7, #12]
 8006a50:	60b9      	str	r1, [r7, #8]
 8006a52:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a5a:	2b01      	cmp	r3, #1
 8006a5c:	d101      	bne.n	8006a62 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006a5e:	2302      	movs	r3, #2
 8006a60:	e0fd      	b.n	8006c5e <HAL_TIM_PWM_ConfigChannel+0x216>
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	2201      	movs	r2, #1
 8006a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2b14      	cmp	r3, #20
 8006a6e:	f200 80f0 	bhi.w	8006c52 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8006a72:	a201      	add	r2, pc, #4	; (adr r2, 8006a78 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8006a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a78:	08006acd 	.word	0x08006acd
 8006a7c:	08006c53 	.word	0x08006c53
 8006a80:	08006c53 	.word	0x08006c53
 8006a84:	08006c53 	.word	0x08006c53
 8006a88:	08006b0d 	.word	0x08006b0d
 8006a8c:	08006c53 	.word	0x08006c53
 8006a90:	08006c53 	.word	0x08006c53
 8006a94:	08006c53 	.word	0x08006c53
 8006a98:	08006b4f 	.word	0x08006b4f
 8006a9c:	08006c53 	.word	0x08006c53
 8006aa0:	08006c53 	.word	0x08006c53
 8006aa4:	08006c53 	.word	0x08006c53
 8006aa8:	08006b8f 	.word	0x08006b8f
 8006aac:	08006c53 	.word	0x08006c53
 8006ab0:	08006c53 	.word	0x08006c53
 8006ab4:	08006c53 	.word	0x08006c53
 8006ab8:	08006bd1 	.word	0x08006bd1
 8006abc:	08006c53 	.word	0x08006c53
 8006ac0:	08006c53 	.word	0x08006c53
 8006ac4:	08006c53 	.word	0x08006c53
 8006ac8:	08006c11 	.word	0x08006c11
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	68b9      	ldr	r1, [r7, #8]
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	f000 fa36 	bl	8006f44 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	699a      	ldr	r2, [r3, #24]
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f042 0208 	orr.w	r2, r2, #8
 8006ae6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	699a      	ldr	r2, [r3, #24]
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f022 0204 	bic.w	r2, r2, #4
 8006af6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	6999      	ldr	r1, [r3, #24]
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	691a      	ldr	r2, [r3, #16]
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	430a      	orrs	r2, r1
 8006b08:	619a      	str	r2, [r3, #24]
      break;
 8006b0a:	e0a3      	b.n	8006c54 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	68b9      	ldr	r1, [r7, #8]
 8006b12:	4618      	mov	r0, r3
 8006b14:	f000 faa6 	bl	8007064 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	699a      	ldr	r2, [r3, #24]
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	699a      	ldr	r2, [r3, #24]
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	6999      	ldr	r1, [r3, #24]
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	691b      	ldr	r3, [r3, #16]
 8006b42:	021a      	lsls	r2, r3, #8
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	430a      	orrs	r2, r1
 8006b4a:	619a      	str	r2, [r3, #24]
      break;
 8006b4c:	e082      	b.n	8006c54 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	68b9      	ldr	r1, [r7, #8]
 8006b54:	4618      	mov	r0, r3
 8006b56:	f000 fb0f 	bl	8007178 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	69da      	ldr	r2, [r3, #28]
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f042 0208 	orr.w	r2, r2, #8
 8006b68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	69da      	ldr	r2, [r3, #28]
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f022 0204 	bic.w	r2, r2, #4
 8006b78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	69d9      	ldr	r1, [r3, #28]
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	691a      	ldr	r2, [r3, #16]
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	430a      	orrs	r2, r1
 8006b8a:	61da      	str	r2, [r3, #28]
      break;
 8006b8c:	e062      	b.n	8006c54 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	68b9      	ldr	r1, [r7, #8]
 8006b94:	4618      	mov	r0, r3
 8006b96:	f000 fb77 	bl	8007288 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	69da      	ldr	r2, [r3, #28]
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ba8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	69da      	ldr	r2, [r3, #28]
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006bb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	69d9      	ldr	r1, [r3, #28]
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	691b      	ldr	r3, [r3, #16]
 8006bc4:	021a      	lsls	r2, r3, #8
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	430a      	orrs	r2, r1
 8006bcc:	61da      	str	r2, [r3, #28]
      break;
 8006bce:	e041      	b.n	8006c54 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	68b9      	ldr	r1, [r7, #8]
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	f000 fbe0 	bl	800739c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f042 0208 	orr.w	r2, r2, #8
 8006bea:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f022 0204 	bic.w	r2, r2, #4
 8006bfa:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	691a      	ldr	r2, [r3, #16]
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	430a      	orrs	r2, r1
 8006c0c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006c0e:	e021      	b.n	8006c54 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	68b9      	ldr	r1, [r7, #8]
 8006c16:	4618      	mov	r0, r3
 8006c18:	f000 fc24 	bl	8007464 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c2a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c3a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	691b      	ldr	r3, [r3, #16]
 8006c46:	021a      	lsls	r2, r3, #8
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	430a      	orrs	r2, r1
 8006c4e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006c50:	e000      	b.n	8006c54 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8006c52:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	2200      	movs	r2, #0
 8006c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c5c:	2300      	movs	r3, #0
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	3710      	adds	r7, #16
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}
 8006c66:	bf00      	nop

08006c68 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b084      	sub	sp, #16
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
 8006c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c78:	2b01      	cmp	r3, #1
 8006c7a:	d101      	bne.n	8006c80 <HAL_TIM_ConfigClockSource+0x18>
 8006c7c:	2302      	movs	r3, #2
 8006c7e:	e0c3      	b.n	8006e08 <HAL_TIM_ConfigClockSource+0x1a0>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2201      	movs	r2, #1
 8006c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2202      	movs	r2, #2
 8006c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	689b      	ldr	r3, [r3, #8]
 8006c96:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8006c9e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006ca2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006caa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	68fa      	ldr	r2, [r7, #12]
 8006cb2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	2b70      	cmp	r3, #112	; 0x70
 8006cba:	d038      	beq.n	8006d2e <HAL_TIM_ConfigClockSource+0xc6>
 8006cbc:	2b70      	cmp	r3, #112	; 0x70
 8006cbe:	d815      	bhi.n	8006cec <HAL_TIM_ConfigClockSource+0x84>
 8006cc0:	2b30      	cmp	r3, #48	; 0x30
 8006cc2:	f000 808e 	beq.w	8006de2 <HAL_TIM_ConfigClockSource+0x17a>
 8006cc6:	2b30      	cmp	r3, #48	; 0x30
 8006cc8:	d809      	bhi.n	8006cde <HAL_TIM_ConfigClockSource+0x76>
 8006cca:	2b10      	cmp	r3, #16
 8006ccc:	f000 8089 	beq.w	8006de2 <HAL_TIM_ConfigClockSource+0x17a>
 8006cd0:	2b20      	cmp	r3, #32
 8006cd2:	f000 8086 	beq.w	8006de2 <HAL_TIM_ConfigClockSource+0x17a>
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	f000 8083 	beq.w	8006de2 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006cdc:	e08b      	b.n	8006df6 <HAL_TIM_ConfigClockSource+0x18e>
  switch (sClockSourceConfig->ClockSource)
 8006cde:	2b50      	cmp	r3, #80	; 0x50
 8006ce0:	d04f      	beq.n	8006d82 <HAL_TIM_ConfigClockSource+0x11a>
 8006ce2:	2b60      	cmp	r3, #96	; 0x60
 8006ce4:	d05d      	beq.n	8006da2 <HAL_TIM_ConfigClockSource+0x13a>
 8006ce6:	2b40      	cmp	r3, #64	; 0x40
 8006ce8:	d06b      	beq.n	8006dc2 <HAL_TIM_ConfigClockSource+0x15a>
      break;
 8006cea:	e084      	b.n	8006df6 <HAL_TIM_ConfigClockSource+0x18e>
  switch (sClockSourceConfig->ClockSource)
 8006cec:	4a48      	ldr	r2, [pc, #288]	; (8006e10 <HAL_TIM_ConfigClockSource+0x1a8>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d077      	beq.n	8006de2 <HAL_TIM_ConfigClockSource+0x17a>
 8006cf2:	4a47      	ldr	r2, [pc, #284]	; (8006e10 <HAL_TIM_ConfigClockSource+0x1a8>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d809      	bhi.n	8006d0c <HAL_TIM_ConfigClockSource+0xa4>
 8006cf8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cfc:	d02e      	beq.n	8006d5c <HAL_TIM_ConfigClockSource+0xf4>
 8006cfe:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006d02:	d06e      	beq.n	8006de2 <HAL_TIM_ConfigClockSource+0x17a>
 8006d04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d08:	d074      	beq.n	8006df4 <HAL_TIM_ConfigClockSource+0x18c>
      break;
 8006d0a:	e074      	b.n	8006df6 <HAL_TIM_ConfigClockSource+0x18e>
  switch (sClockSourceConfig->ClockSource)
 8006d0c:	4a41      	ldr	r2, [pc, #260]	; (8006e14 <HAL_TIM_ConfigClockSource+0x1ac>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d067      	beq.n	8006de2 <HAL_TIM_ConfigClockSource+0x17a>
 8006d12:	4a40      	ldr	r2, [pc, #256]	; (8006e14 <HAL_TIM_ConfigClockSource+0x1ac>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d803      	bhi.n	8006d20 <HAL_TIM_ConfigClockSource+0xb8>
 8006d18:	4a3f      	ldr	r2, [pc, #252]	; (8006e18 <HAL_TIM_ConfigClockSource+0x1b0>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d061      	beq.n	8006de2 <HAL_TIM_ConfigClockSource+0x17a>
      break;
 8006d1e:	e06a      	b.n	8006df6 <HAL_TIM_ConfigClockSource+0x18e>
  switch (sClockSourceConfig->ClockSource)
 8006d20:	4a3e      	ldr	r2, [pc, #248]	; (8006e1c <HAL_TIM_ConfigClockSource+0x1b4>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d05d      	beq.n	8006de2 <HAL_TIM_ConfigClockSource+0x17a>
 8006d26:	4a3e      	ldr	r2, [pc, #248]	; (8006e20 <HAL_TIM_ConfigClockSource+0x1b8>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d05a      	beq.n	8006de2 <HAL_TIM_ConfigClockSource+0x17a>
      break;
 8006d2c:	e063      	b.n	8006df6 <HAL_TIM_ConfigClockSource+0x18e>
      TIM_ETR_SetConfig(htim->Instance,
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6818      	ldr	r0, [r3, #0]
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	6899      	ldr	r1, [r3, #8]
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	685a      	ldr	r2, [r3, #4]
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	68db      	ldr	r3, [r3, #12]
 8006d3e:	f000 fc73 	bl	8007628 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	689b      	ldr	r3, [r3, #8]
 8006d48:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006d50:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	68fa      	ldr	r2, [r7, #12]
 8006d58:	609a      	str	r2, [r3, #8]
      break;
 8006d5a:	e04c      	b.n	8006df6 <HAL_TIM_ConfigClockSource+0x18e>
      TIM_ETR_SetConfig(htim->Instance,
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6818      	ldr	r0, [r3, #0]
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	6899      	ldr	r1, [r3, #8]
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	685a      	ldr	r2, [r3, #4]
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	68db      	ldr	r3, [r3, #12]
 8006d6c:	f000 fc5c 	bl	8007628 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	689a      	ldr	r2, [r3, #8]
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006d7e:	609a      	str	r2, [r3, #8]
      break;
 8006d80:	e039      	b.n	8006df6 <HAL_TIM_ConfigClockSource+0x18e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6818      	ldr	r0, [r3, #0]
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	6859      	ldr	r1, [r3, #4]
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	68db      	ldr	r3, [r3, #12]
 8006d8e:	461a      	mov	r2, r3
 8006d90:	f000 fbce 	bl	8007530 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	2150      	movs	r1, #80	; 0x50
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	f000 fc27 	bl	80075ee <TIM_ITRx_SetConfig>
      break;
 8006da0:	e029      	b.n	8006df6 <HAL_TIM_ConfigClockSource+0x18e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6818      	ldr	r0, [r3, #0]
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	6859      	ldr	r1, [r3, #4]
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	68db      	ldr	r3, [r3, #12]
 8006dae:	461a      	mov	r2, r3
 8006db0:	f000 fbed 	bl	800758e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	2160      	movs	r1, #96	; 0x60
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f000 fc17 	bl	80075ee <TIM_ITRx_SetConfig>
      break;
 8006dc0:	e019      	b.n	8006df6 <HAL_TIM_ConfigClockSource+0x18e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6818      	ldr	r0, [r3, #0]
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	6859      	ldr	r1, [r3, #4]
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	68db      	ldr	r3, [r3, #12]
 8006dce:	461a      	mov	r2, r3
 8006dd0:	f000 fbae 	bl	8007530 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	2140      	movs	r1, #64	; 0x40
 8006dda:	4618      	mov	r0, r3
 8006ddc:	f000 fc07 	bl	80075ee <TIM_ITRx_SetConfig>
      break;
 8006de0:	e009      	b.n	8006df6 <HAL_TIM_ConfigClockSource+0x18e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681a      	ldr	r2, [r3, #0]
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4619      	mov	r1, r3
 8006dec:	4610      	mov	r0, r2
 8006dee:	f000 fbfe 	bl	80075ee <TIM_ITRx_SetConfig>
      break;
 8006df2:	e000      	b.n	8006df6 <HAL_TIM_ConfigClockSource+0x18e>
      break;
 8006df4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2201      	movs	r2, #1
 8006dfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2200      	movs	r2, #0
 8006e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e06:	2300      	movs	r3, #0
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	3710      	adds	r7, #16
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bd80      	pop	{r7, pc}
 8006e10:	00100020 	.word	0x00100020
 8006e14:	00100040 	.word	0x00100040
 8006e18:	00100030 	.word	0x00100030
 8006e1c:	00100060 	.word	0x00100060
 8006e20:	00100070 	.word	0x00100070

08006e24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006e24:	b480      	push	{r7}
 8006e26:	b085      	sub	sp, #20
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
 8006e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	4a3c      	ldr	r2, [pc, #240]	; (8006f28 <TIM_Base_SetConfig+0x104>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d00f      	beq.n	8006e5c <TIM_Base_SetConfig+0x38>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e42:	d00b      	beq.n	8006e5c <TIM_Base_SetConfig+0x38>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	4a39      	ldr	r2, [pc, #228]	; (8006f2c <TIM_Base_SetConfig+0x108>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d007      	beq.n	8006e5c <TIM_Base_SetConfig+0x38>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	4a38      	ldr	r2, [pc, #224]	; (8006f30 <TIM_Base_SetConfig+0x10c>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d003      	beq.n	8006e5c <TIM_Base_SetConfig+0x38>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	4a37      	ldr	r2, [pc, #220]	; (8006f34 <TIM_Base_SetConfig+0x110>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d108      	bne.n	8006e6e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	685b      	ldr	r3, [r3, #4]
 8006e68:	68fa      	ldr	r2, [r7, #12]
 8006e6a:	4313      	orrs	r3, r2
 8006e6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	4a2d      	ldr	r2, [pc, #180]	; (8006f28 <TIM_Base_SetConfig+0x104>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d01b      	beq.n	8006eae <TIM_Base_SetConfig+0x8a>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e7c:	d017      	beq.n	8006eae <TIM_Base_SetConfig+0x8a>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	4a2a      	ldr	r2, [pc, #168]	; (8006f2c <TIM_Base_SetConfig+0x108>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d013      	beq.n	8006eae <TIM_Base_SetConfig+0x8a>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	4a29      	ldr	r2, [pc, #164]	; (8006f30 <TIM_Base_SetConfig+0x10c>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d00f      	beq.n	8006eae <TIM_Base_SetConfig+0x8a>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	4a28      	ldr	r2, [pc, #160]	; (8006f34 <TIM_Base_SetConfig+0x110>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d00b      	beq.n	8006eae <TIM_Base_SetConfig+0x8a>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	4a27      	ldr	r2, [pc, #156]	; (8006f38 <TIM_Base_SetConfig+0x114>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d007      	beq.n	8006eae <TIM_Base_SetConfig+0x8a>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	4a26      	ldr	r2, [pc, #152]	; (8006f3c <TIM_Base_SetConfig+0x118>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d003      	beq.n	8006eae <TIM_Base_SetConfig+0x8a>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	4a25      	ldr	r2, [pc, #148]	; (8006f40 <TIM_Base_SetConfig+0x11c>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d108      	bne.n	8006ec0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006eb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	68db      	ldr	r3, [r3, #12]
 8006eba:	68fa      	ldr	r2, [r7, #12]
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	695b      	ldr	r3, [r3, #20]
 8006eca:	4313      	orrs	r3, r2
 8006ecc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	68fa      	ldr	r2, [r7, #12]
 8006ed2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	689a      	ldr	r2, [r3, #8]
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	681a      	ldr	r2, [r3, #0]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	4a10      	ldr	r2, [pc, #64]	; (8006f28 <TIM_Base_SetConfig+0x104>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d00f      	beq.n	8006f0c <TIM_Base_SetConfig+0xe8>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	4a11      	ldr	r2, [pc, #68]	; (8006f34 <TIM_Base_SetConfig+0x110>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d00b      	beq.n	8006f0c <TIM_Base_SetConfig+0xe8>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	4a10      	ldr	r2, [pc, #64]	; (8006f38 <TIM_Base_SetConfig+0x114>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d007      	beq.n	8006f0c <TIM_Base_SetConfig+0xe8>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	4a0f      	ldr	r2, [pc, #60]	; (8006f3c <TIM_Base_SetConfig+0x118>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d003      	beq.n	8006f0c <TIM_Base_SetConfig+0xe8>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	4a0e      	ldr	r2, [pc, #56]	; (8006f40 <TIM_Base_SetConfig+0x11c>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d103      	bne.n	8006f14 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	691a      	ldr	r2, [r3, #16]
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2201      	movs	r2, #1
 8006f18:	615a      	str	r2, [r3, #20]
}
 8006f1a:	bf00      	nop
 8006f1c:	3714      	adds	r7, #20
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f24:	4770      	bx	lr
 8006f26:	bf00      	nop
 8006f28:	40012c00 	.word	0x40012c00
 8006f2c:	40000400 	.word	0x40000400
 8006f30:	40000800 	.word	0x40000800
 8006f34:	40013400 	.word	0x40013400
 8006f38:	40014000 	.word	0x40014000
 8006f3c:	40014400 	.word	0x40014400
 8006f40:	40014800 	.word	0x40014800

08006f44 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f44:	b480      	push	{r7}
 8006f46:	b087      	sub	sp, #28
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
 8006f4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6a1b      	ldr	r3, [r3, #32]
 8006f52:	f023 0201 	bic.w	r2, r3, #1
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6a1b      	ldr	r3, [r3, #32]
 8006f5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	685b      	ldr	r3, [r3, #4]
 8006f64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	699b      	ldr	r3, [r3, #24]
 8006f6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	f023 0303 	bic.w	r3, r3, #3
 8006f7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	68fa      	ldr	r2, [r7, #12]
 8006f86:	4313      	orrs	r3, r2
 8006f88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006f8a:	697b      	ldr	r3, [r7, #20]
 8006f8c:	f023 0302 	bic.w	r3, r3, #2
 8006f90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	689b      	ldr	r3, [r3, #8]
 8006f96:	697a      	ldr	r2, [r7, #20]
 8006f98:	4313      	orrs	r3, r2
 8006f9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	4a2c      	ldr	r2, [pc, #176]	; (8007050 <TIM_OC1_SetConfig+0x10c>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d00f      	beq.n	8006fc4 <TIM_OC1_SetConfig+0x80>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	4a2b      	ldr	r2, [pc, #172]	; (8007054 <TIM_OC1_SetConfig+0x110>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d00b      	beq.n	8006fc4 <TIM_OC1_SetConfig+0x80>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	4a2a      	ldr	r2, [pc, #168]	; (8007058 <TIM_OC1_SetConfig+0x114>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d007      	beq.n	8006fc4 <TIM_OC1_SetConfig+0x80>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	4a29      	ldr	r2, [pc, #164]	; (800705c <TIM_OC1_SetConfig+0x118>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d003      	beq.n	8006fc4 <TIM_OC1_SetConfig+0x80>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	4a28      	ldr	r2, [pc, #160]	; (8007060 <TIM_OC1_SetConfig+0x11c>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d10c      	bne.n	8006fde <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006fc4:	697b      	ldr	r3, [r7, #20]
 8006fc6:	f023 0308 	bic.w	r3, r3, #8
 8006fca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	68db      	ldr	r3, [r3, #12]
 8006fd0:	697a      	ldr	r2, [r7, #20]
 8006fd2:	4313      	orrs	r3, r2
 8006fd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	f023 0304 	bic.w	r3, r3, #4
 8006fdc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	4a1b      	ldr	r2, [pc, #108]	; (8007050 <TIM_OC1_SetConfig+0x10c>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d00f      	beq.n	8007006 <TIM_OC1_SetConfig+0xc2>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	4a1a      	ldr	r2, [pc, #104]	; (8007054 <TIM_OC1_SetConfig+0x110>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d00b      	beq.n	8007006 <TIM_OC1_SetConfig+0xc2>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	4a19      	ldr	r2, [pc, #100]	; (8007058 <TIM_OC1_SetConfig+0x114>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d007      	beq.n	8007006 <TIM_OC1_SetConfig+0xc2>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	4a18      	ldr	r2, [pc, #96]	; (800705c <TIM_OC1_SetConfig+0x118>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d003      	beq.n	8007006 <TIM_OC1_SetConfig+0xc2>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	4a17      	ldr	r2, [pc, #92]	; (8007060 <TIM_OC1_SetConfig+0x11c>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d111      	bne.n	800702a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800700c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800700e:	693b      	ldr	r3, [r7, #16]
 8007010:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007014:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	695b      	ldr	r3, [r3, #20]
 800701a:	693a      	ldr	r2, [r7, #16]
 800701c:	4313      	orrs	r3, r2
 800701e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	699b      	ldr	r3, [r3, #24]
 8007024:	693a      	ldr	r2, [r7, #16]
 8007026:	4313      	orrs	r3, r2
 8007028:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	693a      	ldr	r2, [r7, #16]
 800702e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	68fa      	ldr	r2, [r7, #12]
 8007034:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	685a      	ldr	r2, [r3, #4]
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	697a      	ldr	r2, [r7, #20]
 8007042:	621a      	str	r2, [r3, #32]
}
 8007044:	bf00      	nop
 8007046:	371c      	adds	r7, #28
 8007048:	46bd      	mov	sp, r7
 800704a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704e:	4770      	bx	lr
 8007050:	40012c00 	.word	0x40012c00
 8007054:	40013400 	.word	0x40013400
 8007058:	40014000 	.word	0x40014000
 800705c:	40014400 	.word	0x40014400
 8007060:	40014800 	.word	0x40014800

08007064 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007064:	b480      	push	{r7}
 8007066:	b087      	sub	sp, #28
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
 800706c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6a1b      	ldr	r3, [r3, #32]
 8007072:	f023 0210 	bic.w	r2, r3, #16
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6a1b      	ldr	r3, [r3, #32]
 800707e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	685b      	ldr	r3, [r3, #4]
 8007084:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	699b      	ldr	r3, [r3, #24]
 800708a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007092:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007096:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800709e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	021b      	lsls	r3, r3, #8
 80070a6:	68fa      	ldr	r2, [r7, #12]
 80070a8:	4313      	orrs	r3, r2
 80070aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	f023 0320 	bic.w	r3, r3, #32
 80070b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	689b      	ldr	r3, [r3, #8]
 80070b8:	011b      	lsls	r3, r3, #4
 80070ba:	697a      	ldr	r2, [r7, #20]
 80070bc:	4313      	orrs	r3, r2
 80070be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	4a28      	ldr	r2, [pc, #160]	; (8007164 <TIM_OC2_SetConfig+0x100>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d003      	beq.n	80070d0 <TIM_OC2_SetConfig+0x6c>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	4a27      	ldr	r2, [pc, #156]	; (8007168 <TIM_OC2_SetConfig+0x104>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d10d      	bne.n	80070ec <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80070d0:	697b      	ldr	r3, [r7, #20]
 80070d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80070d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	68db      	ldr	r3, [r3, #12]
 80070dc:	011b      	lsls	r3, r3, #4
 80070de:	697a      	ldr	r2, [r7, #20]
 80070e0:	4313      	orrs	r3, r2
 80070e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070ea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	4a1d      	ldr	r2, [pc, #116]	; (8007164 <TIM_OC2_SetConfig+0x100>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d00f      	beq.n	8007114 <TIM_OC2_SetConfig+0xb0>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	4a1c      	ldr	r2, [pc, #112]	; (8007168 <TIM_OC2_SetConfig+0x104>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d00b      	beq.n	8007114 <TIM_OC2_SetConfig+0xb0>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	4a1b      	ldr	r2, [pc, #108]	; (800716c <TIM_OC2_SetConfig+0x108>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d007      	beq.n	8007114 <TIM_OC2_SetConfig+0xb0>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	4a1a      	ldr	r2, [pc, #104]	; (8007170 <TIM_OC2_SetConfig+0x10c>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d003      	beq.n	8007114 <TIM_OC2_SetConfig+0xb0>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	4a19      	ldr	r2, [pc, #100]	; (8007174 <TIM_OC2_SetConfig+0x110>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d113      	bne.n	800713c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007114:	693b      	ldr	r3, [r7, #16]
 8007116:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800711a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800711c:	693b      	ldr	r3, [r7, #16]
 800711e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007122:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	695b      	ldr	r3, [r3, #20]
 8007128:	009b      	lsls	r3, r3, #2
 800712a:	693a      	ldr	r2, [r7, #16]
 800712c:	4313      	orrs	r3, r2
 800712e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	699b      	ldr	r3, [r3, #24]
 8007134:	009b      	lsls	r3, r3, #2
 8007136:	693a      	ldr	r2, [r7, #16]
 8007138:	4313      	orrs	r3, r2
 800713a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	693a      	ldr	r2, [r7, #16]
 8007140:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	68fa      	ldr	r2, [r7, #12]
 8007146:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	685a      	ldr	r2, [r3, #4]
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	697a      	ldr	r2, [r7, #20]
 8007154:	621a      	str	r2, [r3, #32]
}
 8007156:	bf00      	nop
 8007158:	371c      	adds	r7, #28
 800715a:	46bd      	mov	sp, r7
 800715c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007160:	4770      	bx	lr
 8007162:	bf00      	nop
 8007164:	40012c00 	.word	0x40012c00
 8007168:	40013400 	.word	0x40013400
 800716c:	40014000 	.word	0x40014000
 8007170:	40014400 	.word	0x40014400
 8007174:	40014800 	.word	0x40014800

08007178 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007178:	b480      	push	{r7}
 800717a:	b087      	sub	sp, #28
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
 8007180:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6a1b      	ldr	r3, [r3, #32]
 8007186:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6a1b      	ldr	r3, [r3, #32]
 8007192:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	685b      	ldr	r3, [r3, #4]
 8007198:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	69db      	ldr	r3, [r3, #28]
 800719e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80071a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	f023 0303 	bic.w	r3, r3, #3
 80071b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	68fa      	ldr	r2, [r7, #12]
 80071ba:	4313      	orrs	r3, r2
 80071bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80071c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	689b      	ldr	r3, [r3, #8]
 80071ca:	021b      	lsls	r3, r3, #8
 80071cc:	697a      	ldr	r2, [r7, #20]
 80071ce:	4313      	orrs	r3, r2
 80071d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	4a27      	ldr	r2, [pc, #156]	; (8007274 <TIM_OC3_SetConfig+0xfc>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d003      	beq.n	80071e2 <TIM_OC3_SetConfig+0x6a>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	4a26      	ldr	r2, [pc, #152]	; (8007278 <TIM_OC3_SetConfig+0x100>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d10d      	bne.n	80071fe <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80071e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	68db      	ldr	r3, [r3, #12]
 80071ee:	021b      	lsls	r3, r3, #8
 80071f0:	697a      	ldr	r2, [r7, #20]
 80071f2:	4313      	orrs	r3, r2
 80071f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80071fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	4a1c      	ldr	r2, [pc, #112]	; (8007274 <TIM_OC3_SetConfig+0xfc>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d00f      	beq.n	8007226 <TIM_OC3_SetConfig+0xae>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	4a1b      	ldr	r2, [pc, #108]	; (8007278 <TIM_OC3_SetConfig+0x100>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d00b      	beq.n	8007226 <TIM_OC3_SetConfig+0xae>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	4a1a      	ldr	r2, [pc, #104]	; (800727c <TIM_OC3_SetConfig+0x104>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d007      	beq.n	8007226 <TIM_OC3_SetConfig+0xae>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	4a19      	ldr	r2, [pc, #100]	; (8007280 <TIM_OC3_SetConfig+0x108>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d003      	beq.n	8007226 <TIM_OC3_SetConfig+0xae>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	4a18      	ldr	r2, [pc, #96]	; (8007284 <TIM_OC3_SetConfig+0x10c>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d113      	bne.n	800724e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007226:	693b      	ldr	r3, [r7, #16]
 8007228:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800722c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800722e:	693b      	ldr	r3, [r7, #16]
 8007230:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007234:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	695b      	ldr	r3, [r3, #20]
 800723a:	011b      	lsls	r3, r3, #4
 800723c:	693a      	ldr	r2, [r7, #16]
 800723e:	4313      	orrs	r3, r2
 8007240:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	699b      	ldr	r3, [r3, #24]
 8007246:	011b      	lsls	r3, r3, #4
 8007248:	693a      	ldr	r2, [r7, #16]
 800724a:	4313      	orrs	r3, r2
 800724c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	693a      	ldr	r2, [r7, #16]
 8007252:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	68fa      	ldr	r2, [r7, #12]
 8007258:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	685a      	ldr	r2, [r3, #4]
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	697a      	ldr	r2, [r7, #20]
 8007266:	621a      	str	r2, [r3, #32]
}
 8007268:	bf00      	nop
 800726a:	371c      	adds	r7, #28
 800726c:	46bd      	mov	sp, r7
 800726e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007272:	4770      	bx	lr
 8007274:	40012c00 	.word	0x40012c00
 8007278:	40013400 	.word	0x40013400
 800727c:	40014000 	.word	0x40014000
 8007280:	40014400 	.word	0x40014400
 8007284:	40014800 	.word	0x40014800

08007288 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007288:	b480      	push	{r7}
 800728a:	b087      	sub	sp, #28
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
 8007290:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6a1b      	ldr	r3, [r3, #32]
 8007296:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6a1b      	ldr	r3, [r3, #32]
 80072a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	685b      	ldr	r3, [r3, #4]
 80072a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	69db      	ldr	r3, [r3, #28]
 80072ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80072b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	021b      	lsls	r3, r3, #8
 80072ca:	68fa      	ldr	r2, [r7, #12]
 80072cc:	4313      	orrs	r3, r2
 80072ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80072d0:	697b      	ldr	r3, [r7, #20]
 80072d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80072d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	689b      	ldr	r3, [r3, #8]
 80072dc:	031b      	lsls	r3, r3, #12
 80072de:	697a      	ldr	r2, [r7, #20]
 80072e0:	4313      	orrs	r3, r2
 80072e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	4a28      	ldr	r2, [pc, #160]	; (8007388 <TIM_OC4_SetConfig+0x100>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d003      	beq.n	80072f4 <TIM_OC4_SetConfig+0x6c>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	4a27      	ldr	r2, [pc, #156]	; (800738c <TIM_OC4_SetConfig+0x104>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d10d      	bne.n	8007310 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80072fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	68db      	ldr	r3, [r3, #12]
 8007300:	031b      	lsls	r3, r3, #12
 8007302:	697a      	ldr	r2, [r7, #20]
 8007304:	4313      	orrs	r3, r2
 8007306:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8007308:	697b      	ldr	r3, [r7, #20]
 800730a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800730e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	4a1d      	ldr	r2, [pc, #116]	; (8007388 <TIM_OC4_SetConfig+0x100>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d00f      	beq.n	8007338 <TIM_OC4_SetConfig+0xb0>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	4a1c      	ldr	r2, [pc, #112]	; (800738c <TIM_OC4_SetConfig+0x104>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d00b      	beq.n	8007338 <TIM_OC4_SetConfig+0xb0>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	4a1b      	ldr	r2, [pc, #108]	; (8007390 <TIM_OC4_SetConfig+0x108>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d007      	beq.n	8007338 <TIM_OC4_SetConfig+0xb0>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	4a1a      	ldr	r2, [pc, #104]	; (8007394 <TIM_OC4_SetConfig+0x10c>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d003      	beq.n	8007338 <TIM_OC4_SetConfig+0xb0>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	4a19      	ldr	r2, [pc, #100]	; (8007398 <TIM_OC4_SetConfig+0x110>)
 8007334:	4293      	cmp	r3, r2
 8007336:	d113      	bne.n	8007360 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007338:	693b      	ldr	r3, [r7, #16]
 800733a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800733e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007346:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	695b      	ldr	r3, [r3, #20]
 800734c:	019b      	lsls	r3, r3, #6
 800734e:	693a      	ldr	r2, [r7, #16]
 8007350:	4313      	orrs	r3, r2
 8007352:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	699b      	ldr	r3, [r3, #24]
 8007358:	019b      	lsls	r3, r3, #6
 800735a:	693a      	ldr	r2, [r7, #16]
 800735c:	4313      	orrs	r3, r2
 800735e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	693a      	ldr	r2, [r7, #16]
 8007364:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	68fa      	ldr	r2, [r7, #12]
 800736a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	685a      	ldr	r2, [r3, #4]
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	697a      	ldr	r2, [r7, #20]
 8007378:	621a      	str	r2, [r3, #32]
}
 800737a:	bf00      	nop
 800737c:	371c      	adds	r7, #28
 800737e:	46bd      	mov	sp, r7
 8007380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007384:	4770      	bx	lr
 8007386:	bf00      	nop
 8007388:	40012c00 	.word	0x40012c00
 800738c:	40013400 	.word	0x40013400
 8007390:	40014000 	.word	0x40014000
 8007394:	40014400 	.word	0x40014400
 8007398:	40014800 	.word	0x40014800

0800739c <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800739c:	b480      	push	{r7}
 800739e:	b087      	sub	sp, #28
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
 80073a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6a1b      	ldr	r3, [r3, #32]
 80073aa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6a1b      	ldr	r3, [r3, #32]
 80073b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	685b      	ldr	r3, [r3, #4]
 80073bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80073ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	68fa      	ldr	r2, [r7, #12]
 80073d6:	4313      	orrs	r3, r2
 80073d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80073da:	693b      	ldr	r3, [r7, #16]
 80073dc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80073e0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	689b      	ldr	r3, [r3, #8]
 80073e6:	041b      	lsls	r3, r3, #16
 80073e8:	693a      	ldr	r2, [r7, #16]
 80073ea:	4313      	orrs	r3, r2
 80073ec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	4a17      	ldr	r2, [pc, #92]	; (8007450 <TIM_OC5_SetConfig+0xb4>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d00f      	beq.n	8007416 <TIM_OC5_SetConfig+0x7a>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	4a16      	ldr	r2, [pc, #88]	; (8007454 <TIM_OC5_SetConfig+0xb8>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d00b      	beq.n	8007416 <TIM_OC5_SetConfig+0x7a>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	4a15      	ldr	r2, [pc, #84]	; (8007458 <TIM_OC5_SetConfig+0xbc>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d007      	beq.n	8007416 <TIM_OC5_SetConfig+0x7a>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	4a14      	ldr	r2, [pc, #80]	; (800745c <TIM_OC5_SetConfig+0xc0>)
 800740a:	4293      	cmp	r3, r2
 800740c:	d003      	beq.n	8007416 <TIM_OC5_SetConfig+0x7a>
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	4a13      	ldr	r2, [pc, #76]	; (8007460 <TIM_OC5_SetConfig+0xc4>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d109      	bne.n	800742a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800741c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	695b      	ldr	r3, [r3, #20]
 8007422:	021b      	lsls	r3, r3, #8
 8007424:	697a      	ldr	r2, [r7, #20]
 8007426:	4313      	orrs	r3, r2
 8007428:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	697a      	ldr	r2, [r7, #20]
 800742e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	68fa      	ldr	r2, [r7, #12]
 8007434:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	685a      	ldr	r2, [r3, #4]
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	693a      	ldr	r2, [r7, #16]
 8007442:	621a      	str	r2, [r3, #32]
}
 8007444:	bf00      	nop
 8007446:	371c      	adds	r7, #28
 8007448:	46bd      	mov	sp, r7
 800744a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744e:	4770      	bx	lr
 8007450:	40012c00 	.word	0x40012c00
 8007454:	40013400 	.word	0x40013400
 8007458:	40014000 	.word	0x40014000
 800745c:	40014400 	.word	0x40014400
 8007460:	40014800 	.word	0x40014800

08007464 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007464:	b480      	push	{r7}
 8007466:	b087      	sub	sp, #28
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
 800746c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6a1b      	ldr	r3, [r3, #32]
 8007472:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6a1b      	ldr	r3, [r3, #32]
 800747e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	685b      	ldr	r3, [r3, #4]
 8007484:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800748a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007492:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007496:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	021b      	lsls	r3, r3, #8
 800749e:	68fa      	ldr	r2, [r7, #12]
 80074a0:	4313      	orrs	r3, r2
 80074a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80074a4:	693b      	ldr	r3, [r7, #16]
 80074a6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80074aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	689b      	ldr	r3, [r3, #8]
 80074b0:	051b      	lsls	r3, r3, #20
 80074b2:	693a      	ldr	r2, [r7, #16]
 80074b4:	4313      	orrs	r3, r2
 80074b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	4a18      	ldr	r2, [pc, #96]	; (800751c <TIM_OC6_SetConfig+0xb8>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d00f      	beq.n	80074e0 <TIM_OC6_SetConfig+0x7c>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	4a17      	ldr	r2, [pc, #92]	; (8007520 <TIM_OC6_SetConfig+0xbc>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d00b      	beq.n	80074e0 <TIM_OC6_SetConfig+0x7c>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	4a16      	ldr	r2, [pc, #88]	; (8007524 <TIM_OC6_SetConfig+0xc0>)
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d007      	beq.n	80074e0 <TIM_OC6_SetConfig+0x7c>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	4a15      	ldr	r2, [pc, #84]	; (8007528 <TIM_OC6_SetConfig+0xc4>)
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d003      	beq.n	80074e0 <TIM_OC6_SetConfig+0x7c>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	4a14      	ldr	r2, [pc, #80]	; (800752c <TIM_OC6_SetConfig+0xc8>)
 80074dc:	4293      	cmp	r3, r2
 80074de:	d109      	bne.n	80074f4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80074e0:	697b      	ldr	r3, [r7, #20]
 80074e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80074e6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	695b      	ldr	r3, [r3, #20]
 80074ec:	029b      	lsls	r3, r3, #10
 80074ee:	697a      	ldr	r2, [r7, #20]
 80074f0:	4313      	orrs	r3, r2
 80074f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	697a      	ldr	r2, [r7, #20]
 80074f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	68fa      	ldr	r2, [r7, #12]
 80074fe:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	685a      	ldr	r2, [r3, #4]
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	693a      	ldr	r2, [r7, #16]
 800750c:	621a      	str	r2, [r3, #32]
}
 800750e:	bf00      	nop
 8007510:	371c      	adds	r7, #28
 8007512:	46bd      	mov	sp, r7
 8007514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007518:	4770      	bx	lr
 800751a:	bf00      	nop
 800751c:	40012c00 	.word	0x40012c00
 8007520:	40013400 	.word	0x40013400
 8007524:	40014000 	.word	0x40014000
 8007528:	40014400 	.word	0x40014400
 800752c:	40014800 	.word	0x40014800

08007530 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007530:	b480      	push	{r7}
 8007532:	b087      	sub	sp, #28
 8007534:	af00      	add	r7, sp, #0
 8007536:	60f8      	str	r0, [r7, #12]
 8007538:	60b9      	str	r1, [r7, #8]
 800753a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	6a1b      	ldr	r3, [r3, #32]
 8007540:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	6a1b      	ldr	r3, [r3, #32]
 8007546:	f023 0201 	bic.w	r2, r3, #1
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	699b      	ldr	r3, [r3, #24]
 8007552:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007554:	693b      	ldr	r3, [r7, #16]
 8007556:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800755a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	011b      	lsls	r3, r3, #4
 8007560:	693a      	ldr	r2, [r7, #16]
 8007562:	4313      	orrs	r3, r2
 8007564:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	f023 030a 	bic.w	r3, r3, #10
 800756c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800756e:	697a      	ldr	r2, [r7, #20]
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	4313      	orrs	r3, r2
 8007574:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	693a      	ldr	r2, [r7, #16]
 800757a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	697a      	ldr	r2, [r7, #20]
 8007580:	621a      	str	r2, [r3, #32]
}
 8007582:	bf00      	nop
 8007584:	371c      	adds	r7, #28
 8007586:	46bd      	mov	sp, r7
 8007588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758c:	4770      	bx	lr

0800758e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800758e:	b480      	push	{r7}
 8007590:	b087      	sub	sp, #28
 8007592:	af00      	add	r7, sp, #0
 8007594:	60f8      	str	r0, [r7, #12]
 8007596:	60b9      	str	r1, [r7, #8]
 8007598:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	6a1b      	ldr	r3, [r3, #32]
 800759e:	f023 0210 	bic.w	r2, r3, #16
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	699b      	ldr	r3, [r3, #24]
 80075aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	6a1b      	ldr	r3, [r3, #32]
 80075b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80075b2:	697b      	ldr	r3, [r7, #20]
 80075b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80075b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	031b      	lsls	r3, r3, #12
 80075be:	697a      	ldr	r2, [r7, #20]
 80075c0:	4313      	orrs	r3, r2
 80075c2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80075c4:	693b      	ldr	r3, [r7, #16]
 80075c6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80075ca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	011b      	lsls	r3, r3, #4
 80075d0:	693a      	ldr	r2, [r7, #16]
 80075d2:	4313      	orrs	r3, r2
 80075d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	697a      	ldr	r2, [r7, #20]
 80075da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	693a      	ldr	r2, [r7, #16]
 80075e0:	621a      	str	r2, [r3, #32]
}
 80075e2:	bf00      	nop
 80075e4:	371c      	adds	r7, #28
 80075e6:	46bd      	mov	sp, r7
 80075e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ec:	4770      	bx	lr

080075ee <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80075ee:	b480      	push	{r7}
 80075f0:	b085      	sub	sp, #20
 80075f2:	af00      	add	r7, sp, #0
 80075f4:	6078      	str	r0, [r7, #4]
 80075f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	689b      	ldr	r3, [r3, #8]
 80075fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007604:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007608:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800760a:	683a      	ldr	r2, [r7, #0]
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	4313      	orrs	r3, r2
 8007610:	f043 0307 	orr.w	r3, r3, #7
 8007614:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	68fa      	ldr	r2, [r7, #12]
 800761a:	609a      	str	r2, [r3, #8]
}
 800761c:	bf00      	nop
 800761e:	3714      	adds	r7, #20
 8007620:	46bd      	mov	sp, r7
 8007622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007626:	4770      	bx	lr

08007628 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007628:	b480      	push	{r7}
 800762a:	b087      	sub	sp, #28
 800762c:	af00      	add	r7, sp, #0
 800762e:	60f8      	str	r0, [r7, #12]
 8007630:	60b9      	str	r1, [r7, #8]
 8007632:	607a      	str	r2, [r7, #4]
 8007634:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	689b      	ldr	r3, [r3, #8]
 800763a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800763c:	697b      	ldr	r3, [r7, #20]
 800763e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007642:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	021a      	lsls	r2, r3, #8
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	431a      	orrs	r2, r3
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	4313      	orrs	r3, r2
 8007650:	697a      	ldr	r2, [r7, #20]
 8007652:	4313      	orrs	r3, r2
 8007654:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	697a      	ldr	r2, [r7, #20]
 800765a:	609a      	str	r2, [r3, #8]
}
 800765c:	bf00      	nop
 800765e:	371c      	adds	r7, #28
 8007660:	46bd      	mov	sp, r7
 8007662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007666:	4770      	bx	lr

08007668 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007668:	b480      	push	{r7}
 800766a:	b087      	sub	sp, #28
 800766c:	af00      	add	r7, sp, #0
 800766e:	60f8      	str	r0, [r7, #12]
 8007670:	60b9      	str	r1, [r7, #8]
 8007672:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	f003 031f 	and.w	r3, r3, #31
 800767a:	2201      	movs	r2, #1
 800767c:	fa02 f303 	lsl.w	r3, r2, r3
 8007680:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	6a1a      	ldr	r2, [r3, #32]
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	43db      	mvns	r3, r3
 800768a:	401a      	ands	r2, r3
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	6a1a      	ldr	r2, [r3, #32]
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	f003 031f 	and.w	r3, r3, #31
 800769a:	6879      	ldr	r1, [r7, #4]
 800769c:	fa01 f303 	lsl.w	r3, r1, r3
 80076a0:	431a      	orrs	r2, r3
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	621a      	str	r2, [r3, #32]
}
 80076a6:	bf00      	nop
 80076a8:	371c      	adds	r7, #28
 80076aa:	46bd      	mov	sp, r7
 80076ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b0:	4770      	bx	lr
	...

080076b4 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b084      	sub	sp, #16
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
 80076bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d109      	bne.n	80076d8 <HAL_TIMEx_PWMN_Start+0x24>
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80076ca:	b2db      	uxtb	r3, r3
 80076cc:	2b01      	cmp	r3, #1
 80076ce:	bf14      	ite	ne
 80076d0:	2301      	movne	r3, #1
 80076d2:	2300      	moveq	r3, #0
 80076d4:	b2db      	uxtb	r3, r3
 80076d6:	e022      	b.n	800771e <HAL_TIMEx_PWMN_Start+0x6a>
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	2b04      	cmp	r3, #4
 80076dc:	d109      	bne.n	80076f2 <HAL_TIMEx_PWMN_Start+0x3e>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80076e4:	b2db      	uxtb	r3, r3
 80076e6:	2b01      	cmp	r3, #1
 80076e8:	bf14      	ite	ne
 80076ea:	2301      	movne	r3, #1
 80076ec:	2300      	moveq	r3, #0
 80076ee:	b2db      	uxtb	r3, r3
 80076f0:	e015      	b.n	800771e <HAL_TIMEx_PWMN_Start+0x6a>
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	2b08      	cmp	r3, #8
 80076f6:	d109      	bne.n	800770c <HAL_TIMEx_PWMN_Start+0x58>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80076fe:	b2db      	uxtb	r3, r3
 8007700:	2b01      	cmp	r3, #1
 8007702:	bf14      	ite	ne
 8007704:	2301      	movne	r3, #1
 8007706:	2300      	moveq	r3, #0
 8007708:	b2db      	uxtb	r3, r3
 800770a:	e008      	b.n	800771e <HAL_TIMEx_PWMN_Start+0x6a>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8007712:	b2db      	uxtb	r3, r3
 8007714:	2b01      	cmp	r3, #1
 8007716:	bf14      	ite	ne
 8007718:	2301      	movne	r3, #1
 800771a:	2300      	moveq	r3, #0
 800771c:	b2db      	uxtb	r3, r3
 800771e:	2b00      	cmp	r3, #0
 8007720:	d001      	beq.n	8007726 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8007722:	2301      	movs	r3, #1
 8007724:	e040      	b.n	80077a8 <HAL_TIMEx_PWMN_Start+0xf4>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d104      	bne.n	8007736 <HAL_TIMEx_PWMN_Start+0x82>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2202      	movs	r2, #2
 8007730:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007734:	e013      	b.n	800775e <HAL_TIMEx_PWMN_Start+0xaa>
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	2b04      	cmp	r3, #4
 800773a:	d104      	bne.n	8007746 <HAL_TIMEx_PWMN_Start+0x92>
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2202      	movs	r2, #2
 8007740:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007744:	e00b      	b.n	800775e <HAL_TIMEx_PWMN_Start+0xaa>
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	2b08      	cmp	r3, #8
 800774a:	d104      	bne.n	8007756 <HAL_TIMEx_PWMN_Start+0xa2>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2202      	movs	r2, #2
 8007750:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007754:	e003      	b.n	800775e <HAL_TIMEx_PWMN_Start+0xaa>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2202      	movs	r2, #2
 800775a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	2204      	movs	r2, #4
 8007764:	6839      	ldr	r1, [r7, #0]
 8007766:	4618      	mov	r0, r3
 8007768:	f000 f946 	bl	80079f8 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800777a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	689a      	ldr	r2, [r3, #8]
 8007782:	4b0b      	ldr	r3, [pc, #44]	; (80077b0 <HAL_TIMEx_PWMN_Start+0xfc>)
 8007784:	4013      	ands	r3, r2
 8007786:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	2b06      	cmp	r3, #6
 800778c:	d00b      	beq.n	80077a6 <HAL_TIMEx_PWMN_Start+0xf2>
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007794:	d007      	beq.n	80077a6 <HAL_TIMEx_PWMN_Start+0xf2>
  {
    __HAL_TIM_ENABLE(htim);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	681a      	ldr	r2, [r3, #0]
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f042 0201 	orr.w	r2, r2, #1
 80077a4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80077a6:	2300      	movs	r3, #0
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	3710      	adds	r7, #16
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bd80      	pop	{r7, pc}
 80077b0:	00010007 	.word	0x00010007

080077b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80077b4:	b480      	push	{r7}
 80077b6:	b085      	sub	sp, #20
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
 80077bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077c4:	2b01      	cmp	r3, #1
 80077c6:	d101      	bne.n	80077cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80077c8:	2302      	movs	r3, #2
 80077ca:	e065      	b.n	8007898 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2201      	movs	r2, #1
 80077d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2202      	movs	r2, #2
 80077d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	685b      	ldr	r3, [r3, #4]
 80077e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	689b      	ldr	r3, [r3, #8]
 80077ea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	4a2c      	ldr	r2, [pc, #176]	; (80078a4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d004      	beq.n	8007800 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4a2b      	ldr	r2, [pc, #172]	; (80078a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d108      	bne.n	8007812 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007806:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	685b      	ldr	r3, [r3, #4]
 800780c:	68fa      	ldr	r2, [r7, #12]
 800780e:	4313      	orrs	r3, r2
 8007810:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007818:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800781c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	68fa      	ldr	r2, [r7, #12]
 8007824:	4313      	orrs	r3, r2
 8007826:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	68fa      	ldr	r2, [r7, #12]
 800782e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	4a1b      	ldr	r2, [pc, #108]	; (80078a4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007836:	4293      	cmp	r3, r2
 8007838:	d018      	beq.n	800786c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007842:	d013      	beq.n	800786c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4a18      	ldr	r2, [pc, #96]	; (80078ac <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d00e      	beq.n	800786c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	4a17      	ldr	r2, [pc, #92]	; (80078b0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007854:	4293      	cmp	r3, r2
 8007856:	d009      	beq.n	800786c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	4a12      	ldr	r2, [pc, #72]	; (80078a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d004      	beq.n	800786c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	4a13      	ldr	r2, [pc, #76]	; (80078b4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007868:	4293      	cmp	r3, r2
 800786a:	d10c      	bne.n	8007886 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007872:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	689b      	ldr	r3, [r3, #8]
 8007878:	68ba      	ldr	r2, [r7, #8]
 800787a:	4313      	orrs	r3, r2
 800787c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	68ba      	ldr	r2, [r7, #8]
 8007884:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2201      	movs	r2, #1
 800788a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2200      	movs	r2, #0
 8007892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007896:	2300      	movs	r3, #0
}
 8007898:	4618      	mov	r0, r3
 800789a:	3714      	adds	r7, #20
 800789c:	46bd      	mov	sp, r7
 800789e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a2:	4770      	bx	lr
 80078a4:	40012c00 	.word	0x40012c00
 80078a8:	40013400 	.word	0x40013400
 80078ac:	40000400 	.word	0x40000400
 80078b0:	40000800 	.word	0x40000800
 80078b4:	40014000 	.word	0x40014000

080078b8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80078b8:	b480      	push	{r7}
 80078ba:	b085      	sub	sp, #20
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
 80078c0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80078c2:	2300      	movs	r3, #0
 80078c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078cc:	2b01      	cmp	r3, #1
 80078ce:	d101      	bne.n	80078d4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80078d0:	2302      	movs	r3, #2
 80078d2:	e087      	b.n	80079e4 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2201      	movs	r2, #1
 80078d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	68db      	ldr	r3, [r3, #12]
 80078e6:	4313      	orrs	r3, r2
 80078e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	689b      	ldr	r3, [r3, #8]
 80078f4:	4313      	orrs	r3, r2
 80078f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	685b      	ldr	r3, [r3, #4]
 8007902:	4313      	orrs	r3, r2
 8007904:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	4313      	orrs	r3, r2
 8007912:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	691b      	ldr	r3, [r3, #16]
 800791e:	4313      	orrs	r3, r2
 8007920:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	695b      	ldr	r3, [r3, #20]
 800792c:	4313      	orrs	r3, r2
 800792e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800793a:	4313      	orrs	r3, r2
 800793c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	699b      	ldr	r3, [r3, #24]
 8007948:	041b      	lsls	r3, r3, #16
 800794a:	4313      	orrs	r3, r2
 800794c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	4a27      	ldr	r2, [pc, #156]	; (80079f0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d004      	beq.n	8007962 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4a25      	ldr	r2, [pc, #148]	; (80079f4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d106      	bne.n	8007970 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	69db      	ldr	r3, [r3, #28]
 800796c:	4313      	orrs	r3, r2
 800796e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	4a1e      	ldr	r2, [pc, #120]	; (80079f0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8007976:	4293      	cmp	r3, r2
 8007978:	d004      	beq.n	8007984 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	4a1d      	ldr	r2, [pc, #116]	; (80079f4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8007980:	4293      	cmp	r3, r2
 8007982:	d126      	bne.n	80079d2 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800798e:	051b      	lsls	r3, r3, #20
 8007990:	4313      	orrs	r3, r2
 8007992:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	6a1b      	ldr	r3, [r3, #32]
 800799e:	4313      	orrs	r3, r2
 80079a0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ac:	4313      	orrs	r3, r2
 80079ae:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	4a0e      	ldr	r2, [pc, #56]	; (80079f0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d004      	beq.n	80079c4 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	4a0d      	ldr	r2, [pc, #52]	; (80079f4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d106      	bne.n	80079d2 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079ce:	4313      	orrs	r3, r2
 80079d0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	68fa      	ldr	r2, [r7, #12]
 80079d8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2200      	movs	r2, #0
 80079de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80079e2:	2300      	movs	r3, #0
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	3714      	adds	r7, #20
 80079e8:	46bd      	mov	sp, r7
 80079ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ee:	4770      	bx	lr
 80079f0:	40012c00 	.word	0x40012c00
 80079f4:	40013400 	.word	0x40013400

080079f8 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80079f8:	b480      	push	{r7}
 80079fa:	b087      	sub	sp, #28
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	60f8      	str	r0, [r7, #12]
 8007a00:	60b9      	str	r1, [r7, #8]
 8007a02:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	f003 031f 	and.w	r3, r3, #31
 8007a0a:	2204      	movs	r2, #4
 8007a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8007a10:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	6a1a      	ldr	r2, [r3, #32]
 8007a16:	697b      	ldr	r3, [r7, #20]
 8007a18:	43db      	mvns	r3, r3
 8007a1a:	401a      	ands	r2, r3
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	6a1a      	ldr	r2, [r3, #32]
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	f003 031f 	and.w	r3, r3, #31
 8007a2a:	6879      	ldr	r1, [r7, #4]
 8007a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8007a30:	431a      	orrs	r2, r3
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	621a      	str	r2, [r3, #32]
}
 8007a36:	bf00      	nop
 8007a38:	371c      	adds	r7, #28
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a40:	4770      	bx	lr

08007a42 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007a42:	b580      	push	{r7, lr}
 8007a44:	b082      	sub	sp, #8
 8007a46:	af00      	add	r7, sp, #0
 8007a48:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d101      	bne.n	8007a54 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007a50:	2301      	movs	r3, #1
 8007a52:	e042      	b.n	8007ada <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d106      	bne.n	8007a6c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2200      	movs	r2, #0
 8007a62:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f7fa ffa0 	bl	80029ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2224      	movs	r2, #36	; 0x24
 8007a70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	681a      	ldr	r2, [r3, #0]
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f022 0201 	bic.w	r2, r2, #1
 8007a82:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f000 fa7f 	bl	8007f88 <UART_SetConfig>
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	2b01      	cmp	r3, #1
 8007a8e:	d101      	bne.n	8007a94 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007a90:	2301      	movs	r3, #1
 8007a92:	e022      	b.n	8007ada <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d002      	beq.n	8007aa2 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f001 fc2d 	bl	80092fc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	685a      	ldr	r2, [r3, #4]
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007ab0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	689a      	ldr	r2, [r3, #8]
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007ac0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	681a      	ldr	r2, [r3, #0]
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f042 0201 	orr.w	r2, r2, #1
 8007ad0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f001 fcb4 	bl	8009440 <UART_CheckIdleState>
 8007ad8:	4603      	mov	r3, r0
}
 8007ada:	4618      	mov	r0, r3
 8007adc:	3708      	adds	r7, #8
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}
	...

08007ae4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b085      	sub	sp, #20
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	60f8      	str	r0, [r7, #12]
 8007aec:	60b9      	str	r1, [r7, #8]
 8007aee:	4613      	mov	r3, r2
 8007af0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007af8:	2b20      	cmp	r3, #32
 8007afa:	f040 80bc 	bne.w	8007c76 <HAL_UART_Receive_IT+0x192>
  {
    if ((pData == NULL) || (Size == 0U))
 8007afe:	68bb      	ldr	r3, [r7, #8]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d002      	beq.n	8007b0a <HAL_UART_Receive_IT+0x26>
 8007b04:	88fb      	ldrh	r3, [r7, #6]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d101      	bne.n	8007b0e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	e0b4      	b.n	8007c78 <HAL_UART_Receive_IT+0x194>
    }

    __HAL_LOCK(huart);
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007b14:	2b01      	cmp	r3, #1
 8007b16:	d101      	bne.n	8007b1c <HAL_UART_Receive_IT+0x38>
 8007b18:	2302      	movs	r3, #2
 8007b1a:	e0ad      	b.n	8007c78 <HAL_UART_Receive_IT+0x194>
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	2201      	movs	r2, #1
 8007b20:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr  = pData;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	68ba      	ldr	r2, [r7, #8]
 8007b28:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize  = Size;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	88fa      	ldrh	r2, [r7, #6]
 8007b2e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	88fa      	ldrh	r2, [r7, #6]
 8007b36:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    huart->RxISR       = NULL;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	689b      	ldr	r3, [r3, #8]
 8007b44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b48:	d10e      	bne.n	8007b68 <HAL_UART_Receive_IT+0x84>
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	691b      	ldr	r3, [r3, #16]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d105      	bne.n	8007b5e <HAL_UART_Receive_IT+0x7a>
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007b58:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007b5c:	e02d      	b.n	8007bba <HAL_UART_Receive_IT+0xd6>
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	22ff      	movs	r2, #255	; 0xff
 8007b62:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007b66:	e028      	b.n	8007bba <HAL_UART_Receive_IT+0xd6>
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	689b      	ldr	r3, [r3, #8]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d10d      	bne.n	8007b8c <HAL_UART_Receive_IT+0xa8>
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	691b      	ldr	r3, [r3, #16]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d104      	bne.n	8007b82 <HAL_UART_Receive_IT+0x9e>
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	22ff      	movs	r2, #255	; 0xff
 8007b7c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007b80:	e01b      	b.n	8007bba <HAL_UART_Receive_IT+0xd6>
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	227f      	movs	r2, #127	; 0x7f
 8007b86:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007b8a:	e016      	b.n	8007bba <HAL_UART_Receive_IT+0xd6>
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	689b      	ldr	r3, [r3, #8]
 8007b90:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007b94:	d10d      	bne.n	8007bb2 <HAL_UART_Receive_IT+0xce>
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	691b      	ldr	r3, [r3, #16]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d104      	bne.n	8007ba8 <HAL_UART_Receive_IT+0xc4>
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	227f      	movs	r2, #127	; 0x7f
 8007ba2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007ba6:	e008      	b.n	8007bba <HAL_UART_Receive_IT+0xd6>
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	223f      	movs	r2, #63	; 0x3f
 8007bac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007bb0:	e003      	b.n	8007bba <HAL_UART_Receive_IT+0xd6>
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	2222      	movs	r2, #34	; 0x22
 8007bc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	689a      	ldr	r2, [r3, #8]
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f042 0201 	orr.w	r2, r2, #1
 8007bd8:	609a      	str	r2, [r3, #8]

    /* Configure Rx interrupt processing*/
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007bde:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007be2:	d12a      	bne.n	8007c3a <HAL_UART_Receive_IT+0x156>
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007bea:	88fa      	ldrh	r2, [r7, #6]
 8007bec:	429a      	cmp	r2, r3
 8007bee:	d324      	bcc.n	8007c3a <HAL_UART_Receive_IT+0x156>
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	689b      	ldr	r3, [r3, #8]
 8007bf4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bf8:	d107      	bne.n	8007c0a <HAL_UART_Receive_IT+0x126>
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	691b      	ldr	r3, [r3, #16]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d103      	bne.n	8007c0a <HAL_UART_Receive_IT+0x126>
      {
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	4a1f      	ldr	r2, [pc, #124]	; (8007c84 <HAL_UART_Receive_IT+0x1a0>)
 8007c06:	66da      	str	r2, [r3, #108]	; 0x6c
 8007c08:	e002      	b.n	8007c10 <HAL_UART_Receive_IT+0x12c>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	4a1e      	ldr	r2, [pc, #120]	; (8007c88 <HAL_UART_Receive_IT+0x1a4>)
 8007c0e:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	2200      	movs	r2, #0
 8007c14:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	681a      	ldr	r2, [r3, #0]
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007c26:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	689a      	ldr	r2, [r3, #8]
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007c36:	609a      	str	r2, [r3, #8]
 8007c38:	e01b      	b.n	8007c72 <HAL_UART_Receive_IT+0x18e>
    }
    else
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	689b      	ldr	r3, [r3, #8]
 8007c3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c42:	d107      	bne.n	8007c54 <HAL_UART_Receive_IT+0x170>
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	691b      	ldr	r3, [r3, #16]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d103      	bne.n	8007c54 <HAL_UART_Receive_IT+0x170>
      {
        huart->RxISR = UART_RxISR_16BIT;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	4a0f      	ldr	r2, [pc, #60]	; (8007c8c <HAL_UART_Receive_IT+0x1a8>)
 8007c50:	66da      	str	r2, [r3, #108]	; 0x6c
 8007c52:	e002      	b.n	8007c5a <HAL_UART_Receive_IT+0x176>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	4a0e      	ldr	r2, [pc, #56]	; (8007c90 <HAL_UART_Receive_IT+0x1ac>)
 8007c58:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	681a      	ldr	r2, [r3, #0]
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8007c70:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8007c72:	2300      	movs	r3, #0
 8007c74:	e000      	b.n	8007c78 <HAL_UART_Receive_IT+0x194>
  }
  else
  {
    return HAL_BUSY;
 8007c76:	2302      	movs	r3, #2
  }
}
 8007c78:	4618      	mov	r0, r3
 8007c7a:	3714      	adds	r7, #20
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c82:	4770      	bx	lr
 8007c84:	08009869 	.word	0x08009869
 8007c88:	08009761 	.word	0x08009761
 8007c8c:	080096b5 	.word	0x080096b5
 8007c90:	0800960b 	.word	0x0800960b

08007c94 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b088      	sub	sp, #32
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	69db      	ldr	r3, [r3, #28]
 8007ca2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	689b      	ldr	r3, [r3, #8]
 8007cb2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8007cb4:	69fb      	ldr	r3, [r7, #28]
 8007cb6:	f003 030f 	and.w	r3, r3, #15
 8007cba:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8007cbc:	693b      	ldr	r3, [r7, #16]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d118      	bne.n	8007cf4 <HAL_UART_IRQHandler+0x60>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007cc2:	69fb      	ldr	r3, [r7, #28]
 8007cc4:	f003 0320 	and.w	r3, r3, #32
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d013      	beq.n	8007cf4 <HAL_UART_IRQHandler+0x60>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007ccc:	69bb      	ldr	r3, [r7, #24]
 8007cce:	f003 0320 	and.w	r3, r3, #32
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d104      	bne.n	8007ce0 <HAL_UART_IRQHandler+0x4c>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007cd6:	697b      	ldr	r3, [r7, #20]
 8007cd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d009      	beq.n	8007cf4 <HAL_UART_IRQHandler+0x60>
    {
      if (huart->RxISR != NULL)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	f000 812e 	beq.w	8007f46 <HAL_UART_IRQHandler+0x2b2>
      {
        huart->RxISR(huart);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	4798      	blx	r3
      }
      return;
 8007cf2:	e128      	b.n	8007f46 <HAL_UART_IRQHandler+0x2b2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007cf4:	693b      	ldr	r3, [r7, #16]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	f000 80d1 	beq.w	8007e9e <HAL_UART_IRQHandler+0x20a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007cfc:	697a      	ldr	r2, [r7, #20]
 8007cfe:	4b96      	ldr	r3, [pc, #600]	; (8007f58 <HAL_UART_IRQHandler+0x2c4>)
 8007d00:	4013      	ands	r3, r2
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d105      	bne.n	8007d12 <HAL_UART_IRQHandler+0x7e>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U))))
 8007d06:	69bb      	ldr	r3, [r7, #24]
 8007d08:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	f000 80c6 	beq.w	8007e9e <HAL_UART_IRQHandler+0x20a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007d12:	69fb      	ldr	r3, [r7, #28]
 8007d14:	f003 0301 	and.w	r3, r3, #1
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d010      	beq.n	8007d3e <HAL_UART_IRQHandler+0xaa>
 8007d1c:	69bb      	ldr	r3, [r7, #24]
 8007d1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d00b      	beq.n	8007d3e <HAL_UART_IRQHandler+0xaa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	2201      	movs	r2, #1
 8007d2c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d34:	f043 0201 	orr.w	r2, r3, #1
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007d3e:	69fb      	ldr	r3, [r7, #28]
 8007d40:	f003 0302 	and.w	r3, r3, #2
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d010      	beq.n	8007d6a <HAL_UART_IRQHandler+0xd6>
 8007d48:	697b      	ldr	r3, [r7, #20]
 8007d4a:	f003 0301 	and.w	r3, r3, #1
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d00b      	beq.n	8007d6a <HAL_UART_IRQHandler+0xd6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	2202      	movs	r2, #2
 8007d58:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d60:	f043 0204 	orr.w	r2, r3, #4
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007d6a:	69fb      	ldr	r3, [r7, #28]
 8007d6c:	f003 0304 	and.w	r3, r3, #4
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d010      	beq.n	8007d96 <HAL_UART_IRQHandler+0x102>
 8007d74:	697b      	ldr	r3, [r7, #20]
 8007d76:	f003 0301 	and.w	r3, r3, #1
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d00b      	beq.n	8007d96 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	2204      	movs	r2, #4
 8007d84:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d8c:	f043 0202 	orr.w	r2, r3, #2
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007d96:	69fb      	ldr	r3, [r7, #28]
 8007d98:	f003 0308 	and.w	r3, r3, #8
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d015      	beq.n	8007dcc <HAL_UART_IRQHandler+0x138>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007da0:	69bb      	ldr	r3, [r7, #24]
 8007da2:	f003 0320 	and.w	r3, r3, #32
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d104      	bne.n	8007db4 <HAL_UART_IRQHandler+0x120>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007daa:	697a      	ldr	r2, [r7, #20]
 8007dac:	4b6a      	ldr	r3, [pc, #424]	; (8007f58 <HAL_UART_IRQHandler+0x2c4>)
 8007dae:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d00b      	beq.n	8007dcc <HAL_UART_IRQHandler+0x138>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	2208      	movs	r2, #8
 8007dba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007dc2:	f043 0208 	orr.w	r2, r3, #8
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	f000 80b9 	beq.w	8007f4a <HAL_UART_IRQHandler+0x2b6>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007dd8:	69fb      	ldr	r3, [r7, #28]
 8007dda:	f003 0320 	and.w	r3, r3, #32
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d011      	beq.n	8007e06 <HAL_UART_IRQHandler+0x172>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007de2:	69bb      	ldr	r3, [r7, #24]
 8007de4:	f003 0320 	and.w	r3, r3, #32
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d104      	bne.n	8007df6 <HAL_UART_IRQHandler+0x162>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007dec:	697b      	ldr	r3, [r7, #20]
 8007dee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d007      	beq.n	8007e06 <HAL_UART_IRQHandler+0x172>
      {
        if (huart->RxISR != NULL)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d003      	beq.n	8007e06 <HAL_UART_IRQHandler+0x172>
        {
          huart->RxISR(huart);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e0c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	689b      	ldr	r3, [r3, #8]
 8007e14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e18:	2b40      	cmp	r3, #64	; 0x40
 8007e1a:	d004      	beq.n	8007e26 <HAL_UART_IRQHandler+0x192>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d031      	beq.n	8007e8a <HAL_UART_IRQHandler+0x1f6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f001 fb9c 	bl	8009564 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	689b      	ldr	r3, [r3, #8]
 8007e32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e36:	2b40      	cmp	r3, #64	; 0x40
 8007e38:	d123      	bne.n	8007e82 <HAL_UART_IRQHandler+0x1ee>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	689a      	ldr	r2, [r3, #8]
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e48:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d013      	beq.n	8007e7a <HAL_UART_IRQHandler+0x1e6>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007e56:	4a41      	ldr	r2, [pc, #260]	; (8007f5c <HAL_UART_IRQHandler+0x2c8>)
 8007e58:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007e5e:	4618      	mov	r0, r3
 8007e60:	f7fc fd75 	bl	800494e <HAL_DMA_Abort_IT>
 8007e64:	4603      	mov	r3, r0
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d017      	beq.n	8007e9a <HAL_UART_IRQHandler+0x206>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e70:	687a      	ldr	r2, [r7, #4]
 8007e72:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8007e74:	4610      	mov	r0, r2
 8007e76:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e78:	e00f      	b.n	8007e9a <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f000 f87a 	bl	8007f74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e80:	e00b      	b.n	8007e9a <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f000 f876 	bl	8007f74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e88:	e007      	b.n	8007e9a <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f000 f872 	bl	8007f74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2200      	movs	r2, #0
 8007e94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8007e98:	e057      	b.n	8007f4a <HAL_UART_IRQHandler+0x2b6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e9a:	bf00      	nop
    return;
 8007e9c:	e055      	b.n	8007f4a <HAL_UART_IRQHandler+0x2b6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007e9e:	69fb      	ldr	r3, [r7, #28]
 8007ea0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d00d      	beq.n	8007ec4 <HAL_UART_IRQHandler+0x230>
 8007ea8:	697b      	ldr	r3, [r7, #20]
 8007eaa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d008      	beq.n	8007ec4 <HAL_UART_IRQHandler+0x230>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007eba:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f001 fd57 	bl	8009970 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007ec2:	e045      	b.n	8007f50 <HAL_UART_IRQHandler+0x2bc>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007ec4:	69fb      	ldr	r3, [r7, #28]
 8007ec6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d012      	beq.n	8007ef4 <HAL_UART_IRQHandler+0x260>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007ece:	69bb      	ldr	r3, [r7, #24]
 8007ed0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d104      	bne.n	8007ee2 <HAL_UART_IRQHandler+0x24e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007ed8:	697b      	ldr	r3, [r7, #20]
 8007eda:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d008      	beq.n	8007ef4 <HAL_UART_IRQHandler+0x260>
  {
    if (huart->TxISR != NULL)
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d031      	beq.n	8007f4e <HAL_UART_IRQHandler+0x2ba>
    {
      huart->TxISR(huart);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	4798      	blx	r3
    }
    return;
 8007ef2:	e02c      	b.n	8007f4e <HAL_UART_IRQHandler+0x2ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007ef4:	69fb      	ldr	r3, [r7, #28]
 8007ef6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d008      	beq.n	8007f10 <HAL_UART_IRQHandler+0x27c>
 8007efe:	69bb      	ldr	r3, [r7, #24]
 8007f00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d003      	beq.n	8007f10 <HAL_UART_IRQHandler+0x27c>
  {
    UART_EndTransmit_IT(huart);
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	f001 fb64 	bl	80095d6 <UART_EndTransmit_IT>
    return;
 8007f0e:	e01f      	b.n	8007f50 <HAL_UART_IRQHandler+0x2bc>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007f10:	69fb      	ldr	r3, [r7, #28]
 8007f12:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d008      	beq.n	8007f2c <HAL_UART_IRQHandler+0x298>
 8007f1a:	69bb      	ldr	r3, [r7, #24]
 8007f1c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d003      	beq.n	8007f2c <HAL_UART_IRQHandler+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007f24:	6878      	ldr	r0, [r7, #4]
 8007f26:	f001 fd37 	bl	8009998 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007f2a:	e011      	b.n	8007f50 <HAL_UART_IRQHandler+0x2bc>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007f2c:	69fb      	ldr	r3, [r7, #28]
 8007f2e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d00c      	beq.n	8007f50 <HAL_UART_IRQHandler+0x2bc>
 8007f36:	69bb      	ldr	r3, [r7, #24]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	da09      	bge.n	8007f50 <HAL_UART_IRQHandler+0x2bc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f001 fd21 	bl	8009984 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007f42:	bf00      	nop
 8007f44:	e004      	b.n	8007f50 <HAL_UART_IRQHandler+0x2bc>
      return;
 8007f46:	bf00      	nop
 8007f48:	e002      	b.n	8007f50 <HAL_UART_IRQHandler+0x2bc>
    return;
 8007f4a:	bf00      	nop
 8007f4c:	e000      	b.n	8007f50 <HAL_UART_IRQHandler+0x2bc>
    return;
 8007f4e:	bf00      	nop
  }
}
 8007f50:	3720      	adds	r7, #32
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bd80      	pop	{r7, pc}
 8007f56:	bf00      	nop
 8007f58:	10000001 	.word	0x10000001
 8007f5c:	080095ab 	.word	0x080095ab

08007f60 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007f60:	b480      	push	{r7}
 8007f62:	b083      	sub	sp, #12
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007f68:	bf00      	nop
 8007f6a:	370c      	adds	r7, #12
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f72:	4770      	bx	lr

08007f74 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007f74:	b480      	push	{r7}
 8007f76:	b083      	sub	sp, #12
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007f7c:	bf00      	nop
 8007f7e:	370c      	adds	r7, #12
 8007f80:	46bd      	mov	sp, r7
 8007f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f86:	4770      	bx	lr

08007f88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007f88:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8007f8c:	b08a      	sub	sp, #40	; 0x28
 8007f8e:	af00      	add	r7, sp, #0
 8007f90:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8007f92:	2300      	movs	r3, #0
 8007f94:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8007f96:	2300      	movs	r3, #0
 8007f98:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	689a      	ldr	r2, [r3, #8]
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	691b      	ldr	r3, [r3, #16]
 8007fa6:	431a      	orrs	r2, r3
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	695b      	ldr	r3, [r3, #20]
 8007fac:	431a      	orrs	r2, r3
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	69db      	ldr	r3, [r3, #28]
 8007fb2:	4313      	orrs	r3, r2
 8007fb4:	627b      	str	r3, [r7, #36]	; 0x24
  tmpreg |= (uint32_t)huart->FifoMode;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007fba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fbc:	4313      	orrs	r3, r2
 8007fbe:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	681a      	ldr	r2, [r3, #0]
 8007fc6:	4ba4      	ldr	r3, [pc, #656]	; (8008258 <UART_SetConfig+0x2d0>)
 8007fc8:	4013      	ands	r3, r2
 8007fca:	687a      	ldr	r2, [r7, #4]
 8007fcc:	6812      	ldr	r2, [r2, #0]
 8007fce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007fd0:	430b      	orrs	r3, r1
 8007fd2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	685b      	ldr	r3, [r3, #4]
 8007fda:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	68da      	ldr	r2, [r3, #12]
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	430a      	orrs	r2, r1
 8007fe8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	699b      	ldr	r3, [r3, #24]
 8007fee:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	4a99      	ldr	r2, [pc, #612]	; (800825c <UART_SetConfig+0x2d4>)
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	d004      	beq.n	8008004 <UART_SetConfig+0x7c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6a1b      	ldr	r3, [r3, #32]
 8007ffe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008000:	4313      	orrs	r3, r2
 8008002:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	689b      	ldr	r3, [r3, #8]
 800800a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800800e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8008012:	687a      	ldr	r2, [r7, #4]
 8008014:	6812      	ldr	r2, [r2, #0]
 8008016:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008018:	430b      	orrs	r3, r1
 800801a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008022:	f023 010f 	bic.w	r1, r3, #15
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	430a      	orrs	r2, r1
 8008030:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	4a8a      	ldr	r2, [pc, #552]	; (8008260 <UART_SetConfig+0x2d8>)
 8008038:	4293      	cmp	r3, r2
 800803a:	d126      	bne.n	800808a <UART_SetConfig+0x102>
 800803c:	4b89      	ldr	r3, [pc, #548]	; (8008264 <UART_SetConfig+0x2dc>)
 800803e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008042:	f003 0303 	and.w	r3, r3, #3
 8008046:	2b03      	cmp	r3, #3
 8008048:	d81a      	bhi.n	8008080 <UART_SetConfig+0xf8>
 800804a:	a201      	add	r2, pc, #4	; (adr r2, 8008050 <UART_SetConfig+0xc8>)
 800804c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008050:	08008061 	.word	0x08008061
 8008054:	08008071 	.word	0x08008071
 8008058:	08008069 	.word	0x08008069
 800805c:	08008079 	.word	0x08008079
 8008060:	2301      	movs	r3, #1
 8008062:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008066:	e0d6      	b.n	8008216 <UART_SetConfig+0x28e>
 8008068:	2302      	movs	r3, #2
 800806a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800806e:	e0d2      	b.n	8008216 <UART_SetConfig+0x28e>
 8008070:	2304      	movs	r3, #4
 8008072:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008076:	e0ce      	b.n	8008216 <UART_SetConfig+0x28e>
 8008078:	2308      	movs	r3, #8
 800807a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800807e:	e0ca      	b.n	8008216 <UART_SetConfig+0x28e>
 8008080:	2310      	movs	r3, #16
 8008082:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008086:	bf00      	nop
 8008088:	e0c5      	b.n	8008216 <UART_SetConfig+0x28e>
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	4a76      	ldr	r2, [pc, #472]	; (8008268 <UART_SetConfig+0x2e0>)
 8008090:	4293      	cmp	r3, r2
 8008092:	d138      	bne.n	8008106 <UART_SetConfig+0x17e>
 8008094:	4b73      	ldr	r3, [pc, #460]	; (8008264 <UART_SetConfig+0x2dc>)
 8008096:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800809a:	f003 030c 	and.w	r3, r3, #12
 800809e:	2b0c      	cmp	r3, #12
 80080a0:	d82c      	bhi.n	80080fc <UART_SetConfig+0x174>
 80080a2:	a201      	add	r2, pc, #4	; (adr r2, 80080a8 <UART_SetConfig+0x120>)
 80080a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080a8:	080080dd 	.word	0x080080dd
 80080ac:	080080fd 	.word	0x080080fd
 80080b0:	080080fd 	.word	0x080080fd
 80080b4:	080080fd 	.word	0x080080fd
 80080b8:	080080ed 	.word	0x080080ed
 80080bc:	080080fd 	.word	0x080080fd
 80080c0:	080080fd 	.word	0x080080fd
 80080c4:	080080fd 	.word	0x080080fd
 80080c8:	080080e5 	.word	0x080080e5
 80080cc:	080080fd 	.word	0x080080fd
 80080d0:	080080fd 	.word	0x080080fd
 80080d4:	080080fd 	.word	0x080080fd
 80080d8:	080080f5 	.word	0x080080f5
 80080dc:	2300      	movs	r3, #0
 80080de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80080e2:	e098      	b.n	8008216 <UART_SetConfig+0x28e>
 80080e4:	2302      	movs	r3, #2
 80080e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80080ea:	e094      	b.n	8008216 <UART_SetConfig+0x28e>
 80080ec:	2304      	movs	r3, #4
 80080ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80080f2:	e090      	b.n	8008216 <UART_SetConfig+0x28e>
 80080f4:	2308      	movs	r3, #8
 80080f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80080fa:	e08c      	b.n	8008216 <UART_SetConfig+0x28e>
 80080fc:	2310      	movs	r3, #16
 80080fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008102:	bf00      	nop
 8008104:	e087      	b.n	8008216 <UART_SetConfig+0x28e>
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	4a58      	ldr	r2, [pc, #352]	; (800826c <UART_SetConfig+0x2e4>)
 800810c:	4293      	cmp	r3, r2
 800810e:	d125      	bne.n	800815c <UART_SetConfig+0x1d4>
 8008110:	4b54      	ldr	r3, [pc, #336]	; (8008264 <UART_SetConfig+0x2dc>)
 8008112:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008116:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800811a:	2b10      	cmp	r3, #16
 800811c:	d011      	beq.n	8008142 <UART_SetConfig+0x1ba>
 800811e:	2b10      	cmp	r3, #16
 8008120:	d802      	bhi.n	8008128 <UART_SetConfig+0x1a0>
 8008122:	2b00      	cmp	r3, #0
 8008124:	d005      	beq.n	8008132 <UART_SetConfig+0x1aa>
 8008126:	e014      	b.n	8008152 <UART_SetConfig+0x1ca>
 8008128:	2b20      	cmp	r3, #32
 800812a:	d006      	beq.n	800813a <UART_SetConfig+0x1b2>
 800812c:	2b30      	cmp	r3, #48	; 0x30
 800812e:	d00c      	beq.n	800814a <UART_SetConfig+0x1c2>
 8008130:	e00f      	b.n	8008152 <UART_SetConfig+0x1ca>
 8008132:	2300      	movs	r3, #0
 8008134:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008138:	e06d      	b.n	8008216 <UART_SetConfig+0x28e>
 800813a:	2302      	movs	r3, #2
 800813c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008140:	e069      	b.n	8008216 <UART_SetConfig+0x28e>
 8008142:	2304      	movs	r3, #4
 8008144:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008148:	e065      	b.n	8008216 <UART_SetConfig+0x28e>
 800814a:	2308      	movs	r3, #8
 800814c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008150:	e061      	b.n	8008216 <UART_SetConfig+0x28e>
 8008152:	2310      	movs	r3, #16
 8008154:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008158:	bf00      	nop
 800815a:	e05c      	b.n	8008216 <UART_SetConfig+0x28e>
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	4a43      	ldr	r2, [pc, #268]	; (8008270 <UART_SetConfig+0x2e8>)
 8008162:	4293      	cmp	r3, r2
 8008164:	d125      	bne.n	80081b2 <UART_SetConfig+0x22a>
 8008166:	4b3f      	ldr	r3, [pc, #252]	; (8008264 <UART_SetConfig+0x2dc>)
 8008168:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800816c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008170:	2b40      	cmp	r3, #64	; 0x40
 8008172:	d011      	beq.n	8008198 <UART_SetConfig+0x210>
 8008174:	2b40      	cmp	r3, #64	; 0x40
 8008176:	d802      	bhi.n	800817e <UART_SetConfig+0x1f6>
 8008178:	2b00      	cmp	r3, #0
 800817a:	d005      	beq.n	8008188 <UART_SetConfig+0x200>
 800817c:	e014      	b.n	80081a8 <UART_SetConfig+0x220>
 800817e:	2b80      	cmp	r3, #128	; 0x80
 8008180:	d006      	beq.n	8008190 <UART_SetConfig+0x208>
 8008182:	2bc0      	cmp	r3, #192	; 0xc0
 8008184:	d00c      	beq.n	80081a0 <UART_SetConfig+0x218>
 8008186:	e00f      	b.n	80081a8 <UART_SetConfig+0x220>
 8008188:	2300      	movs	r3, #0
 800818a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800818e:	e042      	b.n	8008216 <UART_SetConfig+0x28e>
 8008190:	2302      	movs	r3, #2
 8008192:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008196:	e03e      	b.n	8008216 <UART_SetConfig+0x28e>
 8008198:	2304      	movs	r3, #4
 800819a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800819e:	e03a      	b.n	8008216 <UART_SetConfig+0x28e>
 80081a0:	2308      	movs	r3, #8
 80081a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80081a6:	e036      	b.n	8008216 <UART_SetConfig+0x28e>
 80081a8:	2310      	movs	r3, #16
 80081aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80081ae:	bf00      	nop
 80081b0:	e031      	b.n	8008216 <UART_SetConfig+0x28e>
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	4a29      	ldr	r2, [pc, #164]	; (800825c <UART_SetConfig+0x2d4>)
 80081b8:	4293      	cmp	r3, r2
 80081ba:	d129      	bne.n	8008210 <UART_SetConfig+0x288>
 80081bc:	4b29      	ldr	r3, [pc, #164]	; (8008264 <UART_SetConfig+0x2dc>)
 80081be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081c2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80081c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081ca:	d014      	beq.n	80081f6 <UART_SetConfig+0x26e>
 80081cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081d0:	d802      	bhi.n	80081d8 <UART_SetConfig+0x250>
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d007      	beq.n	80081e6 <UART_SetConfig+0x25e>
 80081d6:	e016      	b.n	8008206 <UART_SetConfig+0x27e>
 80081d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80081dc:	d007      	beq.n	80081ee <UART_SetConfig+0x266>
 80081de:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80081e2:	d00c      	beq.n	80081fe <UART_SetConfig+0x276>
 80081e4:	e00f      	b.n	8008206 <UART_SetConfig+0x27e>
 80081e6:	2300      	movs	r3, #0
 80081e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80081ec:	e013      	b.n	8008216 <UART_SetConfig+0x28e>
 80081ee:	2302      	movs	r3, #2
 80081f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80081f4:	e00f      	b.n	8008216 <UART_SetConfig+0x28e>
 80081f6:	2304      	movs	r3, #4
 80081f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80081fc:	e00b      	b.n	8008216 <UART_SetConfig+0x28e>
 80081fe:	2308      	movs	r3, #8
 8008200:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008204:	e007      	b.n	8008216 <UART_SetConfig+0x28e>
 8008206:	2310      	movs	r3, #16
 8008208:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800820c:	bf00      	nop
 800820e:	e002      	b.n	8008216 <UART_SetConfig+0x28e>
 8008210:	2310      	movs	r3, #16
 8008212:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	4a10      	ldr	r2, [pc, #64]	; (800825c <UART_SetConfig+0x2d4>)
 800821c:	4293      	cmp	r3, r2
 800821e:	f040 842e 	bne.w	8008a7e <UART_SetConfig+0xaf6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008222:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008226:	2b08      	cmp	r3, #8
 8008228:	f200 8169 	bhi.w	80084fe <UART_SetConfig+0x576>
 800822c:	a201      	add	r2, pc, #4	; (adr r2, 8008234 <UART_SetConfig+0x2ac>)
 800822e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008232:	bf00      	nop
 8008234:	08008275 	.word	0x08008275
 8008238:	080084ff 	.word	0x080084ff
 800823c:	08008317 	.word	0x08008317
 8008240:	080084ff 	.word	0x080084ff
 8008244:	080083af 	.word	0x080083af
 8008248:	080084ff 	.word	0x080084ff
 800824c:	080084ff 	.word	0x080084ff
 8008250:	080084ff 	.word	0x080084ff
 8008254:	08008451 	.word	0x08008451
 8008258:	cfff69f3 	.word	0xcfff69f3
 800825c:	40008000 	.word	0x40008000
 8008260:	40013800 	.word	0x40013800
 8008264:	40021000 	.word	0x40021000
 8008268:	40004400 	.word	0x40004400
 800826c:	40004800 	.word	0x40004800
 8008270:	40004c00 	.word	0x40004c00
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8008274:	f7fd fec8 	bl	8006008 <HAL_RCC_GetPCLK1Freq>
 8008278:	4602      	mov	r2, r0
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800827e:	2b00      	cmp	r3, #0
 8008280:	d044      	beq.n	800830c <UART_SetConfig+0x384>
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008286:	2b01      	cmp	r3, #1
 8008288:	d03e      	beq.n	8008308 <UART_SetConfig+0x380>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800828e:	2b02      	cmp	r3, #2
 8008290:	d038      	beq.n	8008304 <UART_SetConfig+0x37c>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008296:	2b03      	cmp	r3, #3
 8008298:	d032      	beq.n	8008300 <UART_SetConfig+0x378>
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800829e:	2b04      	cmp	r3, #4
 80082a0:	d02c      	beq.n	80082fc <UART_SetConfig+0x374>
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082a6:	2b05      	cmp	r3, #5
 80082a8:	d026      	beq.n	80082f8 <UART_SetConfig+0x370>
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ae:	2b06      	cmp	r3, #6
 80082b0:	d020      	beq.n	80082f4 <UART_SetConfig+0x36c>
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082b6:	2b07      	cmp	r3, #7
 80082b8:	d01a      	beq.n	80082f0 <UART_SetConfig+0x368>
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082be:	2b08      	cmp	r3, #8
 80082c0:	d014      	beq.n	80082ec <UART_SetConfig+0x364>
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082c6:	2b09      	cmp	r3, #9
 80082c8:	d00e      	beq.n	80082e8 <UART_SetConfig+0x360>
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ce:	2b0a      	cmp	r3, #10
 80082d0:	d008      	beq.n	80082e4 <UART_SetConfig+0x35c>
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082d6:	2b0b      	cmp	r3, #11
 80082d8:	d102      	bne.n	80082e0 <UART_SetConfig+0x358>
 80082da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80082de:	e016      	b.n	800830e <UART_SetConfig+0x386>
 80082e0:	2301      	movs	r3, #1
 80082e2:	e014      	b.n	800830e <UART_SetConfig+0x386>
 80082e4:	2380      	movs	r3, #128	; 0x80
 80082e6:	e012      	b.n	800830e <UART_SetConfig+0x386>
 80082e8:	2340      	movs	r3, #64	; 0x40
 80082ea:	e010      	b.n	800830e <UART_SetConfig+0x386>
 80082ec:	2320      	movs	r3, #32
 80082ee:	e00e      	b.n	800830e <UART_SetConfig+0x386>
 80082f0:	2310      	movs	r3, #16
 80082f2:	e00c      	b.n	800830e <UART_SetConfig+0x386>
 80082f4:	230c      	movs	r3, #12
 80082f6:	e00a      	b.n	800830e <UART_SetConfig+0x386>
 80082f8:	230a      	movs	r3, #10
 80082fa:	e008      	b.n	800830e <UART_SetConfig+0x386>
 80082fc:	2308      	movs	r3, #8
 80082fe:	e006      	b.n	800830e <UART_SetConfig+0x386>
 8008300:	2306      	movs	r3, #6
 8008302:	e004      	b.n	800830e <UART_SetConfig+0x386>
 8008304:	2304      	movs	r3, #4
 8008306:	e002      	b.n	800830e <UART_SetConfig+0x386>
 8008308:	2302      	movs	r3, #2
 800830a:	e000      	b.n	800830e <UART_SetConfig+0x386>
 800830c:	2301      	movs	r3, #1
 800830e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008312:	617b      	str	r3, [r7, #20]
        break;
 8008314:	e0f6      	b.n	8008504 <UART_SetConfig+0x57c>
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800831a:	2b00      	cmp	r3, #0
 800831c:	d044      	beq.n	80083a8 <UART_SetConfig+0x420>
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008322:	2b01      	cmp	r3, #1
 8008324:	d03e      	beq.n	80083a4 <UART_SetConfig+0x41c>
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800832a:	2b02      	cmp	r3, #2
 800832c:	d038      	beq.n	80083a0 <UART_SetConfig+0x418>
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008332:	2b03      	cmp	r3, #3
 8008334:	d032      	beq.n	800839c <UART_SetConfig+0x414>
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800833a:	2b04      	cmp	r3, #4
 800833c:	d02c      	beq.n	8008398 <UART_SetConfig+0x410>
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008342:	2b05      	cmp	r3, #5
 8008344:	d026      	beq.n	8008394 <UART_SetConfig+0x40c>
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800834a:	2b06      	cmp	r3, #6
 800834c:	d020      	beq.n	8008390 <UART_SetConfig+0x408>
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008352:	2b07      	cmp	r3, #7
 8008354:	d01a      	beq.n	800838c <UART_SetConfig+0x404>
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800835a:	2b08      	cmp	r3, #8
 800835c:	d014      	beq.n	8008388 <UART_SetConfig+0x400>
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008362:	2b09      	cmp	r3, #9
 8008364:	d00e      	beq.n	8008384 <UART_SetConfig+0x3fc>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800836a:	2b0a      	cmp	r3, #10
 800836c:	d008      	beq.n	8008380 <UART_SetConfig+0x3f8>
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008372:	2b0b      	cmp	r3, #11
 8008374:	d102      	bne.n	800837c <UART_SetConfig+0x3f4>
 8008376:	f24f 4324 	movw	r3, #62500	; 0xf424
 800837a:	e016      	b.n	80083aa <UART_SetConfig+0x422>
 800837c:	4ba1      	ldr	r3, [pc, #644]	; (8008604 <UART_SetConfig+0x67c>)
 800837e:	e014      	b.n	80083aa <UART_SetConfig+0x422>
 8008380:	4ba1      	ldr	r3, [pc, #644]	; (8008608 <UART_SetConfig+0x680>)
 8008382:	e012      	b.n	80083aa <UART_SetConfig+0x422>
 8008384:	4ba1      	ldr	r3, [pc, #644]	; (800860c <UART_SetConfig+0x684>)
 8008386:	e010      	b.n	80083aa <UART_SetConfig+0x422>
 8008388:	4ba1      	ldr	r3, [pc, #644]	; (8008610 <UART_SetConfig+0x688>)
 800838a:	e00e      	b.n	80083aa <UART_SetConfig+0x422>
 800838c:	4ba1      	ldr	r3, [pc, #644]	; (8008614 <UART_SetConfig+0x68c>)
 800838e:	e00c      	b.n	80083aa <UART_SetConfig+0x422>
 8008390:	4ba1      	ldr	r3, [pc, #644]	; (8008618 <UART_SetConfig+0x690>)
 8008392:	e00a      	b.n	80083aa <UART_SetConfig+0x422>
 8008394:	4ba1      	ldr	r3, [pc, #644]	; (800861c <UART_SetConfig+0x694>)
 8008396:	e008      	b.n	80083aa <UART_SetConfig+0x422>
 8008398:	4ba1      	ldr	r3, [pc, #644]	; (8008620 <UART_SetConfig+0x698>)
 800839a:	e006      	b.n	80083aa <UART_SetConfig+0x422>
 800839c:	4ba1      	ldr	r3, [pc, #644]	; (8008624 <UART_SetConfig+0x69c>)
 800839e:	e004      	b.n	80083aa <UART_SetConfig+0x422>
 80083a0:	4ba1      	ldr	r3, [pc, #644]	; (8008628 <UART_SetConfig+0x6a0>)
 80083a2:	e002      	b.n	80083aa <UART_SetConfig+0x422>
 80083a4:	4ba1      	ldr	r3, [pc, #644]	; (800862c <UART_SetConfig+0x6a4>)
 80083a6:	e000      	b.n	80083aa <UART_SetConfig+0x422>
 80083a8:	4b96      	ldr	r3, [pc, #600]	; (8008604 <UART_SetConfig+0x67c>)
 80083aa:	617b      	str	r3, [r7, #20]
        break;
 80083ac:	e0aa      	b.n	8008504 <UART_SetConfig+0x57c>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80083ae:	f7fd fdbd 	bl	8005f2c <HAL_RCC_GetSysClockFreq>
 80083b2:	4602      	mov	r2, r0
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d044      	beq.n	8008446 <UART_SetConfig+0x4be>
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083c0:	2b01      	cmp	r3, #1
 80083c2:	d03e      	beq.n	8008442 <UART_SetConfig+0x4ba>
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083c8:	2b02      	cmp	r3, #2
 80083ca:	d038      	beq.n	800843e <UART_SetConfig+0x4b6>
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083d0:	2b03      	cmp	r3, #3
 80083d2:	d032      	beq.n	800843a <UART_SetConfig+0x4b2>
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083d8:	2b04      	cmp	r3, #4
 80083da:	d02c      	beq.n	8008436 <UART_SetConfig+0x4ae>
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083e0:	2b05      	cmp	r3, #5
 80083e2:	d026      	beq.n	8008432 <UART_SetConfig+0x4aa>
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083e8:	2b06      	cmp	r3, #6
 80083ea:	d020      	beq.n	800842e <UART_SetConfig+0x4a6>
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083f0:	2b07      	cmp	r3, #7
 80083f2:	d01a      	beq.n	800842a <UART_SetConfig+0x4a2>
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083f8:	2b08      	cmp	r3, #8
 80083fa:	d014      	beq.n	8008426 <UART_SetConfig+0x49e>
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008400:	2b09      	cmp	r3, #9
 8008402:	d00e      	beq.n	8008422 <UART_SetConfig+0x49a>
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008408:	2b0a      	cmp	r3, #10
 800840a:	d008      	beq.n	800841e <UART_SetConfig+0x496>
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008410:	2b0b      	cmp	r3, #11
 8008412:	d102      	bne.n	800841a <UART_SetConfig+0x492>
 8008414:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008418:	e016      	b.n	8008448 <UART_SetConfig+0x4c0>
 800841a:	2301      	movs	r3, #1
 800841c:	e014      	b.n	8008448 <UART_SetConfig+0x4c0>
 800841e:	2380      	movs	r3, #128	; 0x80
 8008420:	e012      	b.n	8008448 <UART_SetConfig+0x4c0>
 8008422:	2340      	movs	r3, #64	; 0x40
 8008424:	e010      	b.n	8008448 <UART_SetConfig+0x4c0>
 8008426:	2320      	movs	r3, #32
 8008428:	e00e      	b.n	8008448 <UART_SetConfig+0x4c0>
 800842a:	2310      	movs	r3, #16
 800842c:	e00c      	b.n	8008448 <UART_SetConfig+0x4c0>
 800842e:	230c      	movs	r3, #12
 8008430:	e00a      	b.n	8008448 <UART_SetConfig+0x4c0>
 8008432:	230a      	movs	r3, #10
 8008434:	e008      	b.n	8008448 <UART_SetConfig+0x4c0>
 8008436:	2308      	movs	r3, #8
 8008438:	e006      	b.n	8008448 <UART_SetConfig+0x4c0>
 800843a:	2306      	movs	r3, #6
 800843c:	e004      	b.n	8008448 <UART_SetConfig+0x4c0>
 800843e:	2304      	movs	r3, #4
 8008440:	e002      	b.n	8008448 <UART_SetConfig+0x4c0>
 8008442:	2302      	movs	r3, #2
 8008444:	e000      	b.n	8008448 <UART_SetConfig+0x4c0>
 8008446:	2301      	movs	r3, #1
 8008448:	fbb2 f3f3 	udiv	r3, r2, r3
 800844c:	617b      	str	r3, [r7, #20]
        break;
 800844e:	e059      	b.n	8008504 <UART_SetConfig+0x57c>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008454:	2b00      	cmp	r3, #0
 8008456:	d04e      	beq.n	80084f6 <UART_SetConfig+0x56e>
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800845c:	2b01      	cmp	r3, #1
 800845e:	d047      	beq.n	80084f0 <UART_SetConfig+0x568>
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008464:	2b02      	cmp	r3, #2
 8008466:	d040      	beq.n	80084ea <UART_SetConfig+0x562>
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800846c:	2b03      	cmp	r3, #3
 800846e:	d039      	beq.n	80084e4 <UART_SetConfig+0x55c>
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008474:	2b04      	cmp	r3, #4
 8008476:	d032      	beq.n	80084de <UART_SetConfig+0x556>
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800847c:	2b05      	cmp	r3, #5
 800847e:	d02b      	beq.n	80084d8 <UART_SetConfig+0x550>
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008484:	2b06      	cmp	r3, #6
 8008486:	d024      	beq.n	80084d2 <UART_SetConfig+0x54a>
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800848c:	2b07      	cmp	r3, #7
 800848e:	d01d      	beq.n	80084cc <UART_SetConfig+0x544>
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008494:	2b08      	cmp	r3, #8
 8008496:	d016      	beq.n	80084c6 <UART_SetConfig+0x53e>
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800849c:	2b09      	cmp	r3, #9
 800849e:	d00f      	beq.n	80084c0 <UART_SetConfig+0x538>
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084a4:	2b0a      	cmp	r3, #10
 80084a6:	d008      	beq.n	80084ba <UART_SetConfig+0x532>
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ac:	2b0b      	cmp	r3, #11
 80084ae:	d101      	bne.n	80084b4 <UART_SetConfig+0x52c>
 80084b0:	2380      	movs	r3, #128	; 0x80
 80084b2:	e022      	b.n	80084fa <UART_SetConfig+0x572>
 80084b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80084b8:	e01f      	b.n	80084fa <UART_SetConfig+0x572>
 80084ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80084be:	e01c      	b.n	80084fa <UART_SetConfig+0x572>
 80084c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80084c4:	e019      	b.n	80084fa <UART_SetConfig+0x572>
 80084c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80084ca:	e016      	b.n	80084fa <UART_SetConfig+0x572>
 80084cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80084d0:	e013      	b.n	80084fa <UART_SetConfig+0x572>
 80084d2:	f640 23aa 	movw	r3, #2730	; 0xaaa
 80084d6:	e010      	b.n	80084fa <UART_SetConfig+0x572>
 80084d8:	f640 43cc 	movw	r3, #3276	; 0xccc
 80084dc:	e00d      	b.n	80084fa <UART_SetConfig+0x572>
 80084de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80084e2:	e00a      	b.n	80084fa <UART_SetConfig+0x572>
 80084e4:	f241 5355 	movw	r3, #5461	; 0x1555
 80084e8:	e007      	b.n	80084fa <UART_SetConfig+0x572>
 80084ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80084ee:	e004      	b.n	80084fa <UART_SetConfig+0x572>
 80084f0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80084f4:	e001      	b.n	80084fa <UART_SetConfig+0x572>
 80084f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80084fa:	617b      	str	r3, [r7, #20]
        break;
 80084fc:	e002      	b.n	8008504 <UART_SetConfig+0x57c>
      default:
        ret = HAL_ERROR;
 80084fe:	2301      	movs	r3, #1
 8008500:	76fb      	strb	r3, [r7, #27]
        break;
 8008502:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8008504:	697b      	ldr	r3, [r7, #20]
 8008506:	2b00      	cmp	r3, #0
 8008508:	f000 86cd 	beq.w	80092a6 <UART_SetConfig+0x131e>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	685a      	ldr	r2, [r3, #4]
 8008510:	4613      	mov	r3, r2
 8008512:	005b      	lsls	r3, r3, #1
 8008514:	4413      	add	r3, r2
 8008516:	697a      	ldr	r2, [r7, #20]
 8008518:	429a      	cmp	r2, r3
 800851a:	d305      	bcc.n	8008528 <UART_SetConfig+0x5a0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	685b      	ldr	r3, [r3, #4]
 8008520:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008522:	697a      	ldr	r2, [r7, #20]
 8008524:	429a      	cmp	r2, r3
 8008526:	d903      	bls.n	8008530 <UART_SetConfig+0x5a8>
      {
        ret = HAL_ERROR;
 8008528:	2301      	movs	r3, #1
 800852a:	76fb      	strb	r3, [r7, #27]
 800852c:	f000 bebb 	b.w	80092a6 <UART_SetConfig+0x131e>
      }
      else
      {
        switch (clocksource)
 8008530:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008534:	2b08      	cmp	r3, #8
 8008536:	f200 828d 	bhi.w	8008a54 <UART_SetConfig+0xacc>
 800853a:	a201      	add	r2, pc, #4	; (adr r2, 8008540 <UART_SetConfig+0x5b8>)
 800853c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008540:	08008565 	.word	0x08008565
 8008544:	08008a55 	.word	0x08008a55
 8008548:	080086cf 	.word	0x080086cf
 800854c:	08008a55 	.word	0x08008a55
 8008550:	080087c5 	.word	0x080087c5
 8008554:	08008a55 	.word	0x08008a55
 8008558:	08008a55 	.word	0x08008a55
 800855c:	08008a55 	.word	0x08008a55
 8008560:	08008903 	.word	0x08008903
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8008564:	f7fd fd50 	bl	8006008 <HAL_RCC_GetPCLK1Freq>
 8008568:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800856a:	693b      	ldr	r3, [r7, #16]
 800856c:	4618      	mov	r0, r3
 800856e:	f04f 0100 	mov.w	r1, #0
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008576:	2b00      	cmp	r3, #0
 8008578:	d07d      	beq.n	8008676 <UART_SetConfig+0x6ee>
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800857e:	2b01      	cmp	r3, #1
 8008580:	d074      	beq.n	800866c <UART_SetConfig+0x6e4>
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008586:	2b02      	cmp	r3, #2
 8008588:	d06b      	beq.n	8008662 <UART_SetConfig+0x6da>
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800858e:	2b03      	cmp	r3, #3
 8008590:	d062      	beq.n	8008658 <UART_SetConfig+0x6d0>
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008596:	2b04      	cmp	r3, #4
 8008598:	d059      	beq.n	800864e <UART_SetConfig+0x6c6>
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800859e:	2b05      	cmp	r3, #5
 80085a0:	d050      	beq.n	8008644 <UART_SetConfig+0x6bc>
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085a6:	2b06      	cmp	r3, #6
 80085a8:	d047      	beq.n	800863a <UART_SetConfig+0x6b2>
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ae:	2b07      	cmp	r3, #7
 80085b0:	d03e      	beq.n	8008630 <UART_SetConfig+0x6a8>
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085b6:	2b08      	cmp	r3, #8
 80085b8:	d01f      	beq.n	80085fa <UART_SetConfig+0x672>
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085be:	2b09      	cmp	r3, #9
 80085c0:	d016      	beq.n	80085f0 <UART_SetConfig+0x668>
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085c6:	2b0a      	cmp	r3, #10
 80085c8:	d00d      	beq.n	80085e6 <UART_SetConfig+0x65e>
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ce:	2b0b      	cmp	r3, #11
 80085d0:	d104      	bne.n	80085dc <UART_SetConfig+0x654>
 80085d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80085d6:	f04f 0400 	mov.w	r4, #0
 80085da:	e050      	b.n	800867e <UART_SetConfig+0x6f6>
 80085dc:	f04f 0301 	mov.w	r3, #1
 80085e0:	f04f 0400 	mov.w	r4, #0
 80085e4:	e04b      	b.n	800867e <UART_SetConfig+0x6f6>
 80085e6:	f04f 0380 	mov.w	r3, #128	; 0x80
 80085ea:	f04f 0400 	mov.w	r4, #0
 80085ee:	e046      	b.n	800867e <UART_SetConfig+0x6f6>
 80085f0:	f04f 0340 	mov.w	r3, #64	; 0x40
 80085f4:	f04f 0400 	mov.w	r4, #0
 80085f8:	e041      	b.n	800867e <UART_SetConfig+0x6f6>
 80085fa:	f04f 0320 	mov.w	r3, #32
 80085fe:	f04f 0400 	mov.w	r4, #0
 8008602:	e03c      	b.n	800867e <UART_SetConfig+0x6f6>
 8008604:	00f42400 	.word	0x00f42400
 8008608:	0001e848 	.word	0x0001e848
 800860c:	0003d090 	.word	0x0003d090
 8008610:	0007a120 	.word	0x0007a120
 8008614:	000f4240 	.word	0x000f4240
 8008618:	00145855 	.word	0x00145855
 800861c:	00186a00 	.word	0x00186a00
 8008620:	001e8480 	.word	0x001e8480
 8008624:	0028b0aa 	.word	0x0028b0aa
 8008628:	003d0900 	.word	0x003d0900
 800862c:	007a1200 	.word	0x007a1200
 8008630:	f04f 0310 	mov.w	r3, #16
 8008634:	f04f 0400 	mov.w	r4, #0
 8008638:	e021      	b.n	800867e <UART_SetConfig+0x6f6>
 800863a:	f04f 030c 	mov.w	r3, #12
 800863e:	f04f 0400 	mov.w	r4, #0
 8008642:	e01c      	b.n	800867e <UART_SetConfig+0x6f6>
 8008644:	f04f 030a 	mov.w	r3, #10
 8008648:	f04f 0400 	mov.w	r4, #0
 800864c:	e017      	b.n	800867e <UART_SetConfig+0x6f6>
 800864e:	f04f 0308 	mov.w	r3, #8
 8008652:	f04f 0400 	mov.w	r4, #0
 8008656:	e012      	b.n	800867e <UART_SetConfig+0x6f6>
 8008658:	f04f 0306 	mov.w	r3, #6
 800865c:	f04f 0400 	mov.w	r4, #0
 8008660:	e00d      	b.n	800867e <UART_SetConfig+0x6f6>
 8008662:	f04f 0304 	mov.w	r3, #4
 8008666:	f04f 0400 	mov.w	r4, #0
 800866a:	e008      	b.n	800867e <UART_SetConfig+0x6f6>
 800866c:	f04f 0302 	mov.w	r3, #2
 8008670:	f04f 0400 	mov.w	r4, #0
 8008674:	e003      	b.n	800867e <UART_SetConfig+0x6f6>
 8008676:	f04f 0301 	mov.w	r3, #1
 800867a:	f04f 0400 	mov.w	r4, #0
 800867e:	461a      	mov	r2, r3
 8008680:	4623      	mov	r3, r4
 8008682:	f7f8 fb29 	bl	8000cd8 <__aeabi_uldivmod>
 8008686:	4603      	mov	r3, r0
 8008688:	460c      	mov	r4, r1
 800868a:	4619      	mov	r1, r3
 800868c:	4622      	mov	r2, r4
 800868e:	f04f 0300 	mov.w	r3, #0
 8008692:	f04f 0400 	mov.w	r4, #0
 8008696:	0214      	lsls	r4, r2, #8
 8008698:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800869c:	020b      	lsls	r3, r1, #8
 800869e:	687a      	ldr	r2, [r7, #4]
 80086a0:	6852      	ldr	r2, [r2, #4]
 80086a2:	0852      	lsrs	r2, r2, #1
 80086a4:	4611      	mov	r1, r2
 80086a6:	f04f 0200 	mov.w	r2, #0
 80086aa:	eb13 0b01 	adds.w	fp, r3, r1
 80086ae:	eb44 0c02 	adc.w	ip, r4, r2
 80086b2:	4658      	mov	r0, fp
 80086b4:	4661      	mov	r1, ip
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	685b      	ldr	r3, [r3, #4]
 80086ba:	f04f 0400 	mov.w	r4, #0
 80086be:	461a      	mov	r2, r3
 80086c0:	4623      	mov	r3, r4
 80086c2:	f7f8 fb09 	bl	8000cd8 <__aeabi_uldivmod>
 80086c6:	4603      	mov	r3, r0
 80086c8:	460c      	mov	r4, r1
 80086ca:	61fb      	str	r3, [r7, #28]
            break;
 80086cc:	e1c5      	b.n	8008a5a <UART_SetConfig+0xad2>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d05b      	beq.n	800878e <UART_SetConfig+0x806>
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086da:	2b01      	cmp	r3, #1
 80086dc:	d053      	beq.n	8008786 <UART_SetConfig+0x7fe>
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086e2:	2b02      	cmp	r3, #2
 80086e4:	d04b      	beq.n	800877e <UART_SetConfig+0x7f6>
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ea:	2b03      	cmp	r3, #3
 80086ec:	d043      	beq.n	8008776 <UART_SetConfig+0x7ee>
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086f2:	2b04      	cmp	r3, #4
 80086f4:	d03b      	beq.n	800876e <UART_SetConfig+0x7e6>
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086fa:	2b05      	cmp	r3, #5
 80086fc:	d033      	beq.n	8008766 <UART_SetConfig+0x7de>
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008702:	2b06      	cmp	r3, #6
 8008704:	d02b      	beq.n	800875e <UART_SetConfig+0x7d6>
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800870a:	2b07      	cmp	r3, #7
 800870c:	d023      	beq.n	8008756 <UART_SetConfig+0x7ce>
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008712:	2b08      	cmp	r3, #8
 8008714:	d01b      	beq.n	800874e <UART_SetConfig+0x7c6>
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800871a:	2b09      	cmp	r3, #9
 800871c:	d013      	beq.n	8008746 <UART_SetConfig+0x7be>
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008722:	2b0a      	cmp	r3, #10
 8008724:	d00b      	beq.n	800873e <UART_SetConfig+0x7b6>
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800872a:	2b0b      	cmp	r3, #11
 800872c:	d103      	bne.n	8008736 <UART_SetConfig+0x7ae>
 800872e:	4bae      	ldr	r3, [pc, #696]	; (80089e8 <UART_SetConfig+0xa60>)
 8008730:	f04f 0400 	mov.w	r4, #0
 8008734:	e02e      	b.n	8008794 <UART_SetConfig+0x80c>
 8008736:	4bad      	ldr	r3, [pc, #692]	; (80089ec <UART_SetConfig+0xa64>)
 8008738:	f04f 0400 	mov.w	r4, #0
 800873c:	e02a      	b.n	8008794 <UART_SetConfig+0x80c>
 800873e:	4bac      	ldr	r3, [pc, #688]	; (80089f0 <UART_SetConfig+0xa68>)
 8008740:	f04f 0400 	mov.w	r4, #0
 8008744:	e026      	b.n	8008794 <UART_SetConfig+0x80c>
 8008746:	4bab      	ldr	r3, [pc, #684]	; (80089f4 <UART_SetConfig+0xa6c>)
 8008748:	f04f 0400 	mov.w	r4, #0
 800874c:	e022      	b.n	8008794 <UART_SetConfig+0x80c>
 800874e:	4baa      	ldr	r3, [pc, #680]	; (80089f8 <UART_SetConfig+0xa70>)
 8008750:	f04f 0400 	mov.w	r4, #0
 8008754:	e01e      	b.n	8008794 <UART_SetConfig+0x80c>
 8008756:	4ba9      	ldr	r3, [pc, #676]	; (80089fc <UART_SetConfig+0xa74>)
 8008758:	f04f 0400 	mov.w	r4, #0
 800875c:	e01a      	b.n	8008794 <UART_SetConfig+0x80c>
 800875e:	a49e      	add	r4, pc, #632	; (adr r4, 80089d8 <UART_SetConfig+0xa50>)
 8008760:	e9d4 3400 	ldrd	r3, r4, [r4]
 8008764:	e016      	b.n	8008794 <UART_SetConfig+0x80c>
 8008766:	4ba6      	ldr	r3, [pc, #664]	; (8008a00 <UART_SetConfig+0xa78>)
 8008768:	f04f 0400 	mov.w	r4, #0
 800876c:	e012      	b.n	8008794 <UART_SetConfig+0x80c>
 800876e:	4ba5      	ldr	r3, [pc, #660]	; (8008a04 <UART_SetConfig+0xa7c>)
 8008770:	f04f 0400 	mov.w	r4, #0
 8008774:	e00e      	b.n	8008794 <UART_SetConfig+0x80c>
 8008776:	a49a      	add	r4, pc, #616	; (adr r4, 80089e0 <UART_SetConfig+0xa58>)
 8008778:	e9d4 3400 	ldrd	r3, r4, [r4]
 800877c:	e00a      	b.n	8008794 <UART_SetConfig+0x80c>
 800877e:	4ba2      	ldr	r3, [pc, #648]	; (8008a08 <UART_SetConfig+0xa80>)
 8008780:	f04f 0400 	mov.w	r4, #0
 8008784:	e006      	b.n	8008794 <UART_SetConfig+0x80c>
 8008786:	4ba1      	ldr	r3, [pc, #644]	; (8008a0c <UART_SetConfig+0xa84>)
 8008788:	f04f 0400 	mov.w	r4, #0
 800878c:	e002      	b.n	8008794 <UART_SetConfig+0x80c>
 800878e:	4b97      	ldr	r3, [pc, #604]	; (80089ec <UART_SetConfig+0xa64>)
 8008790:	f04f 0400 	mov.w	r4, #0
 8008794:	687a      	ldr	r2, [r7, #4]
 8008796:	6852      	ldr	r2, [r2, #4]
 8008798:	0852      	lsrs	r2, r2, #1
 800879a:	4611      	mov	r1, r2
 800879c:	f04f 0200 	mov.w	r2, #0
 80087a0:	eb13 0b01 	adds.w	fp, r3, r1
 80087a4:	eb44 0c02 	adc.w	ip, r4, r2
 80087a8:	4658      	mov	r0, fp
 80087aa:	4661      	mov	r1, ip
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	685b      	ldr	r3, [r3, #4]
 80087b0:	f04f 0400 	mov.w	r4, #0
 80087b4:	461a      	mov	r2, r3
 80087b6:	4623      	mov	r3, r4
 80087b8:	f7f8 fa8e 	bl	8000cd8 <__aeabi_uldivmod>
 80087bc:	4603      	mov	r3, r0
 80087be:	460c      	mov	r4, r1
 80087c0:	61fb      	str	r3, [r7, #28]
            break;
 80087c2:	e14a      	b.n	8008a5a <UART_SetConfig+0xad2>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 80087c4:	f7fd fbb2 	bl	8005f2c <HAL_RCC_GetSysClockFreq>
 80087c8:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80087ca:	693b      	ldr	r3, [r7, #16]
 80087cc:	4618      	mov	r0, r3
 80087ce:	f04f 0100 	mov.w	r1, #0
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d067      	beq.n	80088aa <UART_SetConfig+0x922>
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087de:	2b01      	cmp	r3, #1
 80087e0:	d05e      	beq.n	80088a0 <UART_SetConfig+0x918>
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087e6:	2b02      	cmp	r3, #2
 80087e8:	d055      	beq.n	8008896 <UART_SetConfig+0x90e>
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ee:	2b03      	cmp	r3, #3
 80087f0:	d04c      	beq.n	800888c <UART_SetConfig+0x904>
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087f6:	2b04      	cmp	r3, #4
 80087f8:	d043      	beq.n	8008882 <UART_SetConfig+0x8fa>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087fe:	2b05      	cmp	r3, #5
 8008800:	d03a      	beq.n	8008878 <UART_SetConfig+0x8f0>
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008806:	2b06      	cmp	r3, #6
 8008808:	d031      	beq.n	800886e <UART_SetConfig+0x8e6>
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800880e:	2b07      	cmp	r3, #7
 8008810:	d028      	beq.n	8008864 <UART_SetConfig+0x8dc>
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008816:	2b08      	cmp	r3, #8
 8008818:	d01f      	beq.n	800885a <UART_SetConfig+0x8d2>
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800881e:	2b09      	cmp	r3, #9
 8008820:	d016      	beq.n	8008850 <UART_SetConfig+0x8c8>
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008826:	2b0a      	cmp	r3, #10
 8008828:	d00d      	beq.n	8008846 <UART_SetConfig+0x8be>
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800882e:	2b0b      	cmp	r3, #11
 8008830:	d104      	bne.n	800883c <UART_SetConfig+0x8b4>
 8008832:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008836:	f04f 0400 	mov.w	r4, #0
 800883a:	e03a      	b.n	80088b2 <UART_SetConfig+0x92a>
 800883c:	f04f 0301 	mov.w	r3, #1
 8008840:	f04f 0400 	mov.w	r4, #0
 8008844:	e035      	b.n	80088b2 <UART_SetConfig+0x92a>
 8008846:	f04f 0380 	mov.w	r3, #128	; 0x80
 800884a:	f04f 0400 	mov.w	r4, #0
 800884e:	e030      	b.n	80088b2 <UART_SetConfig+0x92a>
 8008850:	f04f 0340 	mov.w	r3, #64	; 0x40
 8008854:	f04f 0400 	mov.w	r4, #0
 8008858:	e02b      	b.n	80088b2 <UART_SetConfig+0x92a>
 800885a:	f04f 0320 	mov.w	r3, #32
 800885e:	f04f 0400 	mov.w	r4, #0
 8008862:	e026      	b.n	80088b2 <UART_SetConfig+0x92a>
 8008864:	f04f 0310 	mov.w	r3, #16
 8008868:	f04f 0400 	mov.w	r4, #0
 800886c:	e021      	b.n	80088b2 <UART_SetConfig+0x92a>
 800886e:	f04f 030c 	mov.w	r3, #12
 8008872:	f04f 0400 	mov.w	r4, #0
 8008876:	e01c      	b.n	80088b2 <UART_SetConfig+0x92a>
 8008878:	f04f 030a 	mov.w	r3, #10
 800887c:	f04f 0400 	mov.w	r4, #0
 8008880:	e017      	b.n	80088b2 <UART_SetConfig+0x92a>
 8008882:	f04f 0308 	mov.w	r3, #8
 8008886:	f04f 0400 	mov.w	r4, #0
 800888a:	e012      	b.n	80088b2 <UART_SetConfig+0x92a>
 800888c:	f04f 0306 	mov.w	r3, #6
 8008890:	f04f 0400 	mov.w	r4, #0
 8008894:	e00d      	b.n	80088b2 <UART_SetConfig+0x92a>
 8008896:	f04f 0304 	mov.w	r3, #4
 800889a:	f04f 0400 	mov.w	r4, #0
 800889e:	e008      	b.n	80088b2 <UART_SetConfig+0x92a>
 80088a0:	f04f 0302 	mov.w	r3, #2
 80088a4:	f04f 0400 	mov.w	r4, #0
 80088a8:	e003      	b.n	80088b2 <UART_SetConfig+0x92a>
 80088aa:	f04f 0301 	mov.w	r3, #1
 80088ae:	f04f 0400 	mov.w	r4, #0
 80088b2:	461a      	mov	r2, r3
 80088b4:	4623      	mov	r3, r4
 80088b6:	f7f8 fa0f 	bl	8000cd8 <__aeabi_uldivmod>
 80088ba:	4603      	mov	r3, r0
 80088bc:	460c      	mov	r4, r1
 80088be:	4619      	mov	r1, r3
 80088c0:	4622      	mov	r2, r4
 80088c2:	f04f 0300 	mov.w	r3, #0
 80088c6:	f04f 0400 	mov.w	r4, #0
 80088ca:	0214      	lsls	r4, r2, #8
 80088cc:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80088d0:	020b      	lsls	r3, r1, #8
 80088d2:	687a      	ldr	r2, [r7, #4]
 80088d4:	6852      	ldr	r2, [r2, #4]
 80088d6:	0852      	lsrs	r2, r2, #1
 80088d8:	4611      	mov	r1, r2
 80088da:	f04f 0200 	mov.w	r2, #0
 80088de:	eb13 0b01 	adds.w	fp, r3, r1
 80088e2:	eb44 0c02 	adc.w	ip, r4, r2
 80088e6:	4658      	mov	r0, fp
 80088e8:	4661      	mov	r1, ip
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	685b      	ldr	r3, [r3, #4]
 80088ee:	f04f 0400 	mov.w	r4, #0
 80088f2:	461a      	mov	r2, r3
 80088f4:	4623      	mov	r3, r4
 80088f6:	f7f8 f9ef 	bl	8000cd8 <__aeabi_uldivmod>
 80088fa:	4603      	mov	r3, r0
 80088fc:	460c      	mov	r4, r1
 80088fe:	61fb      	str	r3, [r7, #28]
            break;
 8008900:	e0ab      	b.n	8008a5a <UART_SetConfig+0xad2>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008906:	2b00      	cmp	r3, #0
 8008908:	f000 8088 	beq.w	8008a1c <UART_SetConfig+0xa94>
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008910:	2b01      	cmp	r3, #1
 8008912:	d05b      	beq.n	80089cc <UART_SetConfig+0xa44>
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008918:	2b02      	cmp	r3, #2
 800891a:	d052      	beq.n	80089c2 <UART_SetConfig+0xa3a>
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008920:	2b03      	cmp	r3, #3
 8008922:	d04a      	beq.n	80089ba <UART_SetConfig+0xa32>
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008928:	2b04      	cmp	r3, #4
 800892a:	d041      	beq.n	80089b0 <UART_SetConfig+0xa28>
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008930:	2b05      	cmp	r3, #5
 8008932:	d039      	beq.n	80089a8 <UART_SetConfig+0xa20>
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008938:	2b06      	cmp	r3, #6
 800893a:	d031      	beq.n	80089a0 <UART_SetConfig+0xa18>
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008940:	2b07      	cmp	r3, #7
 8008942:	d028      	beq.n	8008996 <UART_SetConfig+0xa0e>
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008948:	2b08      	cmp	r3, #8
 800894a:	d01f      	beq.n	800898c <UART_SetConfig+0xa04>
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008950:	2b09      	cmp	r3, #9
 8008952:	d016      	beq.n	8008982 <UART_SetConfig+0x9fa>
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008958:	2b0a      	cmp	r3, #10
 800895a:	d00d      	beq.n	8008978 <UART_SetConfig+0x9f0>
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008960:	2b0b      	cmp	r3, #11
 8008962:	d104      	bne.n	800896e <UART_SetConfig+0x9e6>
 8008964:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008968:	f04f 0400 	mov.w	r4, #0
 800896c:	e05a      	b.n	8008a24 <UART_SetConfig+0xa9c>
 800896e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008972:	f04f 0400 	mov.w	r4, #0
 8008976:	e055      	b.n	8008a24 <UART_SetConfig+0xa9c>
 8008978:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800897c:	f04f 0400 	mov.w	r4, #0
 8008980:	e050      	b.n	8008a24 <UART_SetConfig+0xa9c>
 8008982:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008986:	f04f 0400 	mov.w	r4, #0
 800898a:	e04b      	b.n	8008a24 <UART_SetConfig+0xa9c>
 800898c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008990:	f04f 0400 	mov.w	r4, #0
 8008994:	e046      	b.n	8008a24 <UART_SetConfig+0xa9c>
 8008996:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800899a:	f04f 0400 	mov.w	r4, #0
 800899e:	e041      	b.n	8008a24 <UART_SetConfig+0xa9c>
 80089a0:	4b1b      	ldr	r3, [pc, #108]	; (8008a10 <UART_SetConfig+0xa88>)
 80089a2:	f04f 0400 	mov.w	r4, #0
 80089a6:	e03d      	b.n	8008a24 <UART_SetConfig+0xa9c>
 80089a8:	4b1a      	ldr	r3, [pc, #104]	; (8008a14 <UART_SetConfig+0xa8c>)
 80089aa:	f04f 0400 	mov.w	r4, #0
 80089ae:	e039      	b.n	8008a24 <UART_SetConfig+0xa9c>
 80089b0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80089b4:	f04f 0400 	mov.w	r4, #0
 80089b8:	e034      	b.n	8008a24 <UART_SetConfig+0xa9c>
 80089ba:	4b17      	ldr	r3, [pc, #92]	; (8008a18 <UART_SetConfig+0xa90>)
 80089bc:	f04f 0400 	mov.w	r4, #0
 80089c0:	e030      	b.n	8008a24 <UART_SetConfig+0xa9c>
 80089c2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80089c6:	f04f 0400 	mov.w	r4, #0
 80089ca:	e02b      	b.n	8008a24 <UART_SetConfig+0xa9c>
 80089cc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80089d0:	f04f 0400 	mov.w	r4, #0
 80089d4:	e026      	b.n	8008a24 <UART_SetConfig+0xa9c>
 80089d6:	bf00      	nop
 80089d8:	14585500 	.word	0x14585500
 80089dc:	00000000 	.word	0x00000000
 80089e0:	28b0aa00 	.word	0x28b0aa00
 80089e4:	00000000 	.word	0x00000000
 80089e8:	00f42400 	.word	0x00f42400
 80089ec:	f4240000 	.word	0xf4240000
 80089f0:	01e84800 	.word	0x01e84800
 80089f4:	03d09000 	.word	0x03d09000
 80089f8:	07a12000 	.word	0x07a12000
 80089fc:	0f424000 	.word	0x0f424000
 8008a00:	186a0000 	.word	0x186a0000
 8008a04:	1e848000 	.word	0x1e848000
 8008a08:	3d090000 	.word	0x3d090000
 8008a0c:	7a120000 	.word	0x7a120000
 8008a10:	000aaa00 	.word	0x000aaa00
 8008a14:	000ccc00 	.word	0x000ccc00
 8008a18:	00155500 	.word	0x00155500
 8008a1c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008a20:	f04f 0400 	mov.w	r4, #0
 8008a24:	687a      	ldr	r2, [r7, #4]
 8008a26:	6852      	ldr	r2, [r2, #4]
 8008a28:	0852      	lsrs	r2, r2, #1
 8008a2a:	4611      	mov	r1, r2
 8008a2c:	f04f 0200 	mov.w	r2, #0
 8008a30:	eb13 0b01 	adds.w	fp, r3, r1
 8008a34:	eb44 0c02 	adc.w	ip, r4, r2
 8008a38:	4658      	mov	r0, fp
 8008a3a:	4661      	mov	r1, ip
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	685b      	ldr	r3, [r3, #4]
 8008a40:	f04f 0400 	mov.w	r4, #0
 8008a44:	461a      	mov	r2, r3
 8008a46:	4623      	mov	r3, r4
 8008a48:	f7f8 f946 	bl	8000cd8 <__aeabi_uldivmod>
 8008a4c:	4603      	mov	r3, r0
 8008a4e:	460c      	mov	r4, r1
 8008a50:	61fb      	str	r3, [r7, #28]
            break;
 8008a52:	e002      	b.n	8008a5a <UART_SetConfig+0xad2>
          default:
            ret = HAL_ERROR;
 8008a54:	2301      	movs	r3, #1
 8008a56:	76fb      	strb	r3, [r7, #27]
            break;
 8008a58:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008a5a:	69fb      	ldr	r3, [r7, #28]
 8008a5c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008a60:	d309      	bcc.n	8008a76 <UART_SetConfig+0xaee>
 8008a62:	69fb      	ldr	r3, [r7, #28]
 8008a64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008a68:	d205      	bcs.n	8008a76 <UART_SetConfig+0xaee>
        {
          huart->Instance->BRR = usartdiv;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	69fa      	ldr	r2, [r7, #28]
 8008a70:	60da      	str	r2, [r3, #12]
 8008a72:	f000 bc18 	b.w	80092a6 <UART_SetConfig+0x131e>
        }
        else
        {
          ret = HAL_ERROR;
 8008a76:	2301      	movs	r3, #1
 8008a78:	76fb      	strb	r3, [r7, #27]
 8008a7a:	f000 bc14 	b.w	80092a6 <UART_SetConfig+0x131e>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	69db      	ldr	r3, [r3, #28]
 8008a82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a86:	f040 8204 	bne.w	8008e92 <UART_SetConfig+0xf0a>
  {
    switch (clocksource)
 8008a8a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008a8e:	2b08      	cmp	r3, #8
 8008a90:	f200 81df 	bhi.w	8008e52 <UART_SetConfig+0xeca>
 8008a94:	a201      	add	r2, pc, #4	; (adr r2, 8008a9c <UART_SetConfig+0xb14>)
 8008a96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a9a:	bf00      	nop
 8008a9c:	08008ac1 	.word	0x08008ac1
 8008aa0:	08008b79 	.word	0x08008b79
 8008aa4:	08008c31 	.word	0x08008c31
 8008aa8:	08008e53 	.word	0x08008e53
 8008aac:	08008cd9 	.word	0x08008cd9
 8008ab0:	08008e53 	.word	0x08008e53
 8008ab4:	08008e53 	.word	0x08008e53
 8008ab8:	08008e53 	.word	0x08008e53
 8008abc:	08008d91 	.word	0x08008d91
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ac0:	f7fd faa2 	bl	8006008 <HAL_RCC_GetPCLK1Freq>
 8008ac4:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d044      	beq.n	8008b58 <UART_SetConfig+0xbd0>
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ad2:	2b01      	cmp	r3, #1
 8008ad4:	d03e      	beq.n	8008b54 <UART_SetConfig+0xbcc>
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ada:	2b02      	cmp	r3, #2
 8008adc:	d038      	beq.n	8008b50 <UART_SetConfig+0xbc8>
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ae2:	2b03      	cmp	r3, #3
 8008ae4:	d032      	beq.n	8008b4c <UART_SetConfig+0xbc4>
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aea:	2b04      	cmp	r3, #4
 8008aec:	d02c      	beq.n	8008b48 <UART_SetConfig+0xbc0>
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008af2:	2b05      	cmp	r3, #5
 8008af4:	d026      	beq.n	8008b44 <UART_SetConfig+0xbbc>
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008afa:	2b06      	cmp	r3, #6
 8008afc:	d020      	beq.n	8008b40 <UART_SetConfig+0xbb8>
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b02:	2b07      	cmp	r3, #7
 8008b04:	d01a      	beq.n	8008b3c <UART_SetConfig+0xbb4>
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b0a:	2b08      	cmp	r3, #8
 8008b0c:	d014      	beq.n	8008b38 <UART_SetConfig+0xbb0>
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b12:	2b09      	cmp	r3, #9
 8008b14:	d00e      	beq.n	8008b34 <UART_SetConfig+0xbac>
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b1a:	2b0a      	cmp	r3, #10
 8008b1c:	d008      	beq.n	8008b30 <UART_SetConfig+0xba8>
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b22:	2b0b      	cmp	r3, #11
 8008b24:	d102      	bne.n	8008b2c <UART_SetConfig+0xba4>
 8008b26:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008b2a:	e016      	b.n	8008b5a <UART_SetConfig+0xbd2>
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	e014      	b.n	8008b5a <UART_SetConfig+0xbd2>
 8008b30:	2380      	movs	r3, #128	; 0x80
 8008b32:	e012      	b.n	8008b5a <UART_SetConfig+0xbd2>
 8008b34:	2340      	movs	r3, #64	; 0x40
 8008b36:	e010      	b.n	8008b5a <UART_SetConfig+0xbd2>
 8008b38:	2320      	movs	r3, #32
 8008b3a:	e00e      	b.n	8008b5a <UART_SetConfig+0xbd2>
 8008b3c:	2310      	movs	r3, #16
 8008b3e:	e00c      	b.n	8008b5a <UART_SetConfig+0xbd2>
 8008b40:	230c      	movs	r3, #12
 8008b42:	e00a      	b.n	8008b5a <UART_SetConfig+0xbd2>
 8008b44:	230a      	movs	r3, #10
 8008b46:	e008      	b.n	8008b5a <UART_SetConfig+0xbd2>
 8008b48:	2308      	movs	r3, #8
 8008b4a:	e006      	b.n	8008b5a <UART_SetConfig+0xbd2>
 8008b4c:	2306      	movs	r3, #6
 8008b4e:	e004      	b.n	8008b5a <UART_SetConfig+0xbd2>
 8008b50:	2304      	movs	r3, #4
 8008b52:	e002      	b.n	8008b5a <UART_SetConfig+0xbd2>
 8008b54:	2302      	movs	r3, #2
 8008b56:	e000      	b.n	8008b5a <UART_SetConfig+0xbd2>
 8008b58:	2301      	movs	r3, #1
 8008b5a:	693a      	ldr	r2, [r7, #16]
 8008b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b60:	005a      	lsls	r2, r3, #1
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	685b      	ldr	r3, [r3, #4]
 8008b66:	085b      	lsrs	r3, r3, #1
 8008b68:	441a      	add	r2, r3
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	685b      	ldr	r3, [r3, #4]
 8008b6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b72:	b29b      	uxth	r3, r3
 8008b74:	61fb      	str	r3, [r7, #28]
        break;
 8008b76:	e16f      	b.n	8008e58 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008b78:	f7fd fa5c 	bl	8006034 <HAL_RCC_GetPCLK2Freq>
 8008b7c:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d044      	beq.n	8008c10 <UART_SetConfig+0xc88>
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b8a:	2b01      	cmp	r3, #1
 8008b8c:	d03e      	beq.n	8008c0c <UART_SetConfig+0xc84>
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b92:	2b02      	cmp	r3, #2
 8008b94:	d038      	beq.n	8008c08 <UART_SetConfig+0xc80>
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b9a:	2b03      	cmp	r3, #3
 8008b9c:	d032      	beq.n	8008c04 <UART_SetConfig+0xc7c>
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ba2:	2b04      	cmp	r3, #4
 8008ba4:	d02c      	beq.n	8008c00 <UART_SetConfig+0xc78>
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008baa:	2b05      	cmp	r3, #5
 8008bac:	d026      	beq.n	8008bfc <UART_SetConfig+0xc74>
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bb2:	2b06      	cmp	r3, #6
 8008bb4:	d020      	beq.n	8008bf8 <UART_SetConfig+0xc70>
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bba:	2b07      	cmp	r3, #7
 8008bbc:	d01a      	beq.n	8008bf4 <UART_SetConfig+0xc6c>
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bc2:	2b08      	cmp	r3, #8
 8008bc4:	d014      	beq.n	8008bf0 <UART_SetConfig+0xc68>
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bca:	2b09      	cmp	r3, #9
 8008bcc:	d00e      	beq.n	8008bec <UART_SetConfig+0xc64>
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bd2:	2b0a      	cmp	r3, #10
 8008bd4:	d008      	beq.n	8008be8 <UART_SetConfig+0xc60>
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bda:	2b0b      	cmp	r3, #11
 8008bdc:	d102      	bne.n	8008be4 <UART_SetConfig+0xc5c>
 8008bde:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008be2:	e016      	b.n	8008c12 <UART_SetConfig+0xc8a>
 8008be4:	2301      	movs	r3, #1
 8008be6:	e014      	b.n	8008c12 <UART_SetConfig+0xc8a>
 8008be8:	2380      	movs	r3, #128	; 0x80
 8008bea:	e012      	b.n	8008c12 <UART_SetConfig+0xc8a>
 8008bec:	2340      	movs	r3, #64	; 0x40
 8008bee:	e010      	b.n	8008c12 <UART_SetConfig+0xc8a>
 8008bf0:	2320      	movs	r3, #32
 8008bf2:	e00e      	b.n	8008c12 <UART_SetConfig+0xc8a>
 8008bf4:	2310      	movs	r3, #16
 8008bf6:	e00c      	b.n	8008c12 <UART_SetConfig+0xc8a>
 8008bf8:	230c      	movs	r3, #12
 8008bfa:	e00a      	b.n	8008c12 <UART_SetConfig+0xc8a>
 8008bfc:	230a      	movs	r3, #10
 8008bfe:	e008      	b.n	8008c12 <UART_SetConfig+0xc8a>
 8008c00:	2308      	movs	r3, #8
 8008c02:	e006      	b.n	8008c12 <UART_SetConfig+0xc8a>
 8008c04:	2306      	movs	r3, #6
 8008c06:	e004      	b.n	8008c12 <UART_SetConfig+0xc8a>
 8008c08:	2304      	movs	r3, #4
 8008c0a:	e002      	b.n	8008c12 <UART_SetConfig+0xc8a>
 8008c0c:	2302      	movs	r3, #2
 8008c0e:	e000      	b.n	8008c12 <UART_SetConfig+0xc8a>
 8008c10:	2301      	movs	r3, #1
 8008c12:	693a      	ldr	r2, [r7, #16]
 8008c14:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c18:	005a      	lsls	r2, r3, #1
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	685b      	ldr	r3, [r3, #4]
 8008c1e:	085b      	lsrs	r3, r3, #1
 8008c20:	441a      	add	r2, r3
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	685b      	ldr	r3, [r3, #4]
 8008c26:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c2a:	b29b      	uxth	r3, r3
 8008c2c:	61fb      	str	r3, [r7, #28]
        break;
 8008c2e:	e113      	b.n	8008e58 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d043      	beq.n	8008cc0 <UART_SetConfig+0xd38>
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c3c:	2b01      	cmp	r3, #1
 8008c3e:	d03d      	beq.n	8008cbc <UART_SetConfig+0xd34>
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c44:	2b02      	cmp	r3, #2
 8008c46:	d037      	beq.n	8008cb8 <UART_SetConfig+0xd30>
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c4c:	2b03      	cmp	r3, #3
 8008c4e:	d031      	beq.n	8008cb4 <UART_SetConfig+0xd2c>
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c54:	2b04      	cmp	r3, #4
 8008c56:	d02b      	beq.n	8008cb0 <UART_SetConfig+0xd28>
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c5c:	2b05      	cmp	r3, #5
 8008c5e:	d025      	beq.n	8008cac <UART_SetConfig+0xd24>
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c64:	2b06      	cmp	r3, #6
 8008c66:	d01f      	beq.n	8008ca8 <UART_SetConfig+0xd20>
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c6c:	2b07      	cmp	r3, #7
 8008c6e:	d019      	beq.n	8008ca4 <UART_SetConfig+0xd1c>
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c74:	2b08      	cmp	r3, #8
 8008c76:	d013      	beq.n	8008ca0 <UART_SetConfig+0xd18>
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c7c:	2b09      	cmp	r3, #9
 8008c7e:	d00d      	beq.n	8008c9c <UART_SetConfig+0xd14>
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c84:	2b0a      	cmp	r3, #10
 8008c86:	d007      	beq.n	8008c98 <UART_SetConfig+0xd10>
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c8c:	2b0b      	cmp	r3, #11
 8008c8e:	d101      	bne.n	8008c94 <UART_SetConfig+0xd0c>
 8008c90:	4b8d      	ldr	r3, [pc, #564]	; (8008ec8 <UART_SetConfig+0xf40>)
 8008c92:	e016      	b.n	8008cc2 <UART_SetConfig+0xd3a>
 8008c94:	4b8d      	ldr	r3, [pc, #564]	; (8008ecc <UART_SetConfig+0xf44>)
 8008c96:	e014      	b.n	8008cc2 <UART_SetConfig+0xd3a>
 8008c98:	4b8d      	ldr	r3, [pc, #564]	; (8008ed0 <UART_SetConfig+0xf48>)
 8008c9a:	e012      	b.n	8008cc2 <UART_SetConfig+0xd3a>
 8008c9c:	4b8d      	ldr	r3, [pc, #564]	; (8008ed4 <UART_SetConfig+0xf4c>)
 8008c9e:	e010      	b.n	8008cc2 <UART_SetConfig+0xd3a>
 8008ca0:	4b8d      	ldr	r3, [pc, #564]	; (8008ed8 <UART_SetConfig+0xf50>)
 8008ca2:	e00e      	b.n	8008cc2 <UART_SetConfig+0xd3a>
 8008ca4:	4b8d      	ldr	r3, [pc, #564]	; (8008edc <UART_SetConfig+0xf54>)
 8008ca6:	e00c      	b.n	8008cc2 <UART_SetConfig+0xd3a>
 8008ca8:	4b8d      	ldr	r3, [pc, #564]	; (8008ee0 <UART_SetConfig+0xf58>)
 8008caa:	e00a      	b.n	8008cc2 <UART_SetConfig+0xd3a>
 8008cac:	4b8d      	ldr	r3, [pc, #564]	; (8008ee4 <UART_SetConfig+0xf5c>)
 8008cae:	e008      	b.n	8008cc2 <UART_SetConfig+0xd3a>
 8008cb0:	4b8d      	ldr	r3, [pc, #564]	; (8008ee8 <UART_SetConfig+0xf60>)
 8008cb2:	e006      	b.n	8008cc2 <UART_SetConfig+0xd3a>
 8008cb4:	4b8d      	ldr	r3, [pc, #564]	; (8008eec <UART_SetConfig+0xf64>)
 8008cb6:	e004      	b.n	8008cc2 <UART_SetConfig+0xd3a>
 8008cb8:	4b8d      	ldr	r3, [pc, #564]	; (8008ef0 <UART_SetConfig+0xf68>)
 8008cba:	e002      	b.n	8008cc2 <UART_SetConfig+0xd3a>
 8008cbc:	4b8d      	ldr	r3, [pc, #564]	; (8008ef4 <UART_SetConfig+0xf6c>)
 8008cbe:	e000      	b.n	8008cc2 <UART_SetConfig+0xd3a>
 8008cc0:	4b82      	ldr	r3, [pc, #520]	; (8008ecc <UART_SetConfig+0xf44>)
 8008cc2:	687a      	ldr	r2, [r7, #4]
 8008cc4:	6852      	ldr	r2, [r2, #4]
 8008cc6:	0852      	lsrs	r2, r2, #1
 8008cc8:	441a      	add	r2, r3
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	685b      	ldr	r3, [r3, #4]
 8008cce:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cd2:	b29b      	uxth	r3, r3
 8008cd4:	61fb      	str	r3, [r7, #28]
        break;
 8008cd6:	e0bf      	b.n	8008e58 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008cd8:	f7fd f928 	bl	8005f2c <HAL_RCC_GetSysClockFreq>
 8008cdc:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d044      	beq.n	8008d70 <UART_SetConfig+0xde8>
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cea:	2b01      	cmp	r3, #1
 8008cec:	d03e      	beq.n	8008d6c <UART_SetConfig+0xde4>
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cf2:	2b02      	cmp	r3, #2
 8008cf4:	d038      	beq.n	8008d68 <UART_SetConfig+0xde0>
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cfa:	2b03      	cmp	r3, #3
 8008cfc:	d032      	beq.n	8008d64 <UART_SetConfig+0xddc>
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d02:	2b04      	cmp	r3, #4
 8008d04:	d02c      	beq.n	8008d60 <UART_SetConfig+0xdd8>
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d0a:	2b05      	cmp	r3, #5
 8008d0c:	d026      	beq.n	8008d5c <UART_SetConfig+0xdd4>
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d12:	2b06      	cmp	r3, #6
 8008d14:	d020      	beq.n	8008d58 <UART_SetConfig+0xdd0>
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d1a:	2b07      	cmp	r3, #7
 8008d1c:	d01a      	beq.n	8008d54 <UART_SetConfig+0xdcc>
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d22:	2b08      	cmp	r3, #8
 8008d24:	d014      	beq.n	8008d50 <UART_SetConfig+0xdc8>
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d2a:	2b09      	cmp	r3, #9
 8008d2c:	d00e      	beq.n	8008d4c <UART_SetConfig+0xdc4>
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d32:	2b0a      	cmp	r3, #10
 8008d34:	d008      	beq.n	8008d48 <UART_SetConfig+0xdc0>
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d3a:	2b0b      	cmp	r3, #11
 8008d3c:	d102      	bne.n	8008d44 <UART_SetConfig+0xdbc>
 8008d3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d42:	e016      	b.n	8008d72 <UART_SetConfig+0xdea>
 8008d44:	2301      	movs	r3, #1
 8008d46:	e014      	b.n	8008d72 <UART_SetConfig+0xdea>
 8008d48:	2380      	movs	r3, #128	; 0x80
 8008d4a:	e012      	b.n	8008d72 <UART_SetConfig+0xdea>
 8008d4c:	2340      	movs	r3, #64	; 0x40
 8008d4e:	e010      	b.n	8008d72 <UART_SetConfig+0xdea>
 8008d50:	2320      	movs	r3, #32
 8008d52:	e00e      	b.n	8008d72 <UART_SetConfig+0xdea>
 8008d54:	2310      	movs	r3, #16
 8008d56:	e00c      	b.n	8008d72 <UART_SetConfig+0xdea>
 8008d58:	230c      	movs	r3, #12
 8008d5a:	e00a      	b.n	8008d72 <UART_SetConfig+0xdea>
 8008d5c:	230a      	movs	r3, #10
 8008d5e:	e008      	b.n	8008d72 <UART_SetConfig+0xdea>
 8008d60:	2308      	movs	r3, #8
 8008d62:	e006      	b.n	8008d72 <UART_SetConfig+0xdea>
 8008d64:	2306      	movs	r3, #6
 8008d66:	e004      	b.n	8008d72 <UART_SetConfig+0xdea>
 8008d68:	2304      	movs	r3, #4
 8008d6a:	e002      	b.n	8008d72 <UART_SetConfig+0xdea>
 8008d6c:	2302      	movs	r3, #2
 8008d6e:	e000      	b.n	8008d72 <UART_SetConfig+0xdea>
 8008d70:	2301      	movs	r3, #1
 8008d72:	693a      	ldr	r2, [r7, #16]
 8008d74:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d78:	005a      	lsls	r2, r3, #1
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	685b      	ldr	r3, [r3, #4]
 8008d7e:	085b      	lsrs	r3, r3, #1
 8008d80:	441a      	add	r2, r3
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	685b      	ldr	r3, [r3, #4]
 8008d86:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d8a:	b29b      	uxth	r3, r3
 8008d8c:	61fb      	str	r3, [r7, #28]
        break;
 8008d8e:	e063      	b.n	8008e58 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d04f      	beq.n	8008e38 <UART_SetConfig+0xeb0>
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d9c:	2b01      	cmp	r3, #1
 8008d9e:	d048      	beq.n	8008e32 <UART_SetConfig+0xeaa>
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008da4:	2b02      	cmp	r3, #2
 8008da6:	d041      	beq.n	8008e2c <UART_SetConfig+0xea4>
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dac:	2b03      	cmp	r3, #3
 8008dae:	d03a      	beq.n	8008e26 <UART_SetConfig+0xe9e>
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008db4:	2b04      	cmp	r3, #4
 8008db6:	d033      	beq.n	8008e20 <UART_SetConfig+0xe98>
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dbc:	2b05      	cmp	r3, #5
 8008dbe:	d02c      	beq.n	8008e1a <UART_SetConfig+0xe92>
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dc4:	2b06      	cmp	r3, #6
 8008dc6:	d025      	beq.n	8008e14 <UART_SetConfig+0xe8c>
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dcc:	2b07      	cmp	r3, #7
 8008dce:	d01e      	beq.n	8008e0e <UART_SetConfig+0xe86>
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dd4:	2b08      	cmp	r3, #8
 8008dd6:	d017      	beq.n	8008e08 <UART_SetConfig+0xe80>
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ddc:	2b09      	cmp	r3, #9
 8008dde:	d010      	beq.n	8008e02 <UART_SetConfig+0xe7a>
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008de4:	2b0a      	cmp	r3, #10
 8008de6:	d009      	beq.n	8008dfc <UART_SetConfig+0xe74>
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dec:	2b0b      	cmp	r3, #11
 8008dee:	d102      	bne.n	8008df6 <UART_SetConfig+0xe6e>
 8008df0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008df4:	e022      	b.n	8008e3c <UART_SetConfig+0xeb4>
 8008df6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008dfa:	e01f      	b.n	8008e3c <UART_SetConfig+0xeb4>
 8008dfc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008e00:	e01c      	b.n	8008e3c <UART_SetConfig+0xeb4>
 8008e02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e06:	e019      	b.n	8008e3c <UART_SetConfig+0xeb4>
 8008e08:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008e0c:	e016      	b.n	8008e3c <UART_SetConfig+0xeb4>
 8008e0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008e12:	e013      	b.n	8008e3c <UART_SetConfig+0xeb4>
 8008e14:	f241 5354 	movw	r3, #5460	; 0x1554
 8008e18:	e010      	b.n	8008e3c <UART_SetConfig+0xeb4>
 8008e1a:	f641 1398 	movw	r3, #6552	; 0x1998
 8008e1e:	e00d      	b.n	8008e3c <UART_SetConfig+0xeb4>
 8008e20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008e24:	e00a      	b.n	8008e3c <UART_SetConfig+0xeb4>
 8008e26:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8008e2a:	e007      	b.n	8008e3c <UART_SetConfig+0xeb4>
 8008e2c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008e30:	e004      	b.n	8008e3c <UART_SetConfig+0xeb4>
 8008e32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008e36:	e001      	b.n	8008e3c <UART_SetConfig+0xeb4>
 8008e38:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008e3c:	687a      	ldr	r2, [r7, #4]
 8008e3e:	6852      	ldr	r2, [r2, #4]
 8008e40:	0852      	lsrs	r2, r2, #1
 8008e42:	441a      	add	r2, r3
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	685b      	ldr	r3, [r3, #4]
 8008e48:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e4c:	b29b      	uxth	r3, r3
 8008e4e:	61fb      	str	r3, [r7, #28]
        break;
 8008e50:	e002      	b.n	8008e58 <UART_SetConfig+0xed0>
      default:
        ret = HAL_ERROR;
 8008e52:	2301      	movs	r3, #1
 8008e54:	76fb      	strb	r3, [r7, #27]
        break;
 8008e56:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008e58:	69fb      	ldr	r3, [r7, #28]
 8008e5a:	2b0f      	cmp	r3, #15
 8008e5c:	d916      	bls.n	8008e8c <UART_SetConfig+0xf04>
 8008e5e:	69fb      	ldr	r3, [r7, #28]
 8008e60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e64:	d212      	bcs.n	8008e8c <UART_SetConfig+0xf04>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008e66:	69fb      	ldr	r3, [r7, #28]
 8008e68:	b29b      	uxth	r3, r3
 8008e6a:	f023 030f 	bic.w	r3, r3, #15
 8008e6e:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008e70:	69fb      	ldr	r3, [r7, #28]
 8008e72:	085b      	lsrs	r3, r3, #1
 8008e74:	b29b      	uxth	r3, r3
 8008e76:	f003 0307 	and.w	r3, r3, #7
 8008e7a:	b29a      	uxth	r2, r3
 8008e7c:	89fb      	ldrh	r3, [r7, #14]
 8008e7e:	4313      	orrs	r3, r2
 8008e80:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	89fa      	ldrh	r2, [r7, #14]
 8008e88:	60da      	str	r2, [r3, #12]
 8008e8a:	e20c      	b.n	80092a6 <UART_SetConfig+0x131e>
    }
    else
    {
      ret = HAL_ERROR;
 8008e8c:	2301      	movs	r3, #1
 8008e8e:	76fb      	strb	r3, [r7, #27]
 8008e90:	e209      	b.n	80092a6 <UART_SetConfig+0x131e>
    }
  }
  else
  {
    switch (clocksource)
 8008e92:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008e96:	2b08      	cmp	r3, #8
 8008e98:	f200 81f4 	bhi.w	8009284 <UART_SetConfig+0x12fc>
 8008e9c:	a201      	add	r2, pc, #4	; (adr r2, 8008ea4 <UART_SetConfig+0xf1c>)
 8008e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ea2:	bf00      	nop
 8008ea4:	08008ef9 	.word	0x08008ef9
 8008ea8:	08008faf 	.word	0x08008faf
 8008eac:	08009065 	.word	0x08009065
 8008eb0:	08009285 	.word	0x08009285
 8008eb4:	0800910f 	.word	0x0800910f
 8008eb8:	08009285 	.word	0x08009285
 8008ebc:	08009285 	.word	0x08009285
 8008ec0:	08009285 	.word	0x08009285
 8008ec4:	080091c5 	.word	0x080091c5
 8008ec8:	0001e848 	.word	0x0001e848
 8008ecc:	01e84800 	.word	0x01e84800
 8008ed0:	0003d090 	.word	0x0003d090
 8008ed4:	0007a120 	.word	0x0007a120
 8008ed8:	000f4240 	.word	0x000f4240
 8008edc:	001e8480 	.word	0x001e8480
 8008ee0:	0028b0aa 	.word	0x0028b0aa
 8008ee4:	0030d400 	.word	0x0030d400
 8008ee8:	003d0900 	.word	0x003d0900
 8008eec:	00516154 	.word	0x00516154
 8008ef0:	007a1200 	.word	0x007a1200
 8008ef4:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ef8:	f7fd f886 	bl	8006008 <HAL_RCC_GetPCLK1Freq>
 8008efc:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d044      	beq.n	8008f90 <UART_SetConfig+0x1008>
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f0a:	2b01      	cmp	r3, #1
 8008f0c:	d03e      	beq.n	8008f8c <UART_SetConfig+0x1004>
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f12:	2b02      	cmp	r3, #2
 8008f14:	d038      	beq.n	8008f88 <UART_SetConfig+0x1000>
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f1a:	2b03      	cmp	r3, #3
 8008f1c:	d032      	beq.n	8008f84 <UART_SetConfig+0xffc>
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f22:	2b04      	cmp	r3, #4
 8008f24:	d02c      	beq.n	8008f80 <UART_SetConfig+0xff8>
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f2a:	2b05      	cmp	r3, #5
 8008f2c:	d026      	beq.n	8008f7c <UART_SetConfig+0xff4>
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f32:	2b06      	cmp	r3, #6
 8008f34:	d020      	beq.n	8008f78 <UART_SetConfig+0xff0>
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f3a:	2b07      	cmp	r3, #7
 8008f3c:	d01a      	beq.n	8008f74 <UART_SetConfig+0xfec>
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f42:	2b08      	cmp	r3, #8
 8008f44:	d014      	beq.n	8008f70 <UART_SetConfig+0xfe8>
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f4a:	2b09      	cmp	r3, #9
 8008f4c:	d00e      	beq.n	8008f6c <UART_SetConfig+0xfe4>
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f52:	2b0a      	cmp	r3, #10
 8008f54:	d008      	beq.n	8008f68 <UART_SetConfig+0xfe0>
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f5a:	2b0b      	cmp	r3, #11
 8008f5c:	d102      	bne.n	8008f64 <UART_SetConfig+0xfdc>
 8008f5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008f62:	e016      	b.n	8008f92 <UART_SetConfig+0x100a>
 8008f64:	2301      	movs	r3, #1
 8008f66:	e014      	b.n	8008f92 <UART_SetConfig+0x100a>
 8008f68:	2380      	movs	r3, #128	; 0x80
 8008f6a:	e012      	b.n	8008f92 <UART_SetConfig+0x100a>
 8008f6c:	2340      	movs	r3, #64	; 0x40
 8008f6e:	e010      	b.n	8008f92 <UART_SetConfig+0x100a>
 8008f70:	2320      	movs	r3, #32
 8008f72:	e00e      	b.n	8008f92 <UART_SetConfig+0x100a>
 8008f74:	2310      	movs	r3, #16
 8008f76:	e00c      	b.n	8008f92 <UART_SetConfig+0x100a>
 8008f78:	230c      	movs	r3, #12
 8008f7a:	e00a      	b.n	8008f92 <UART_SetConfig+0x100a>
 8008f7c:	230a      	movs	r3, #10
 8008f7e:	e008      	b.n	8008f92 <UART_SetConfig+0x100a>
 8008f80:	2308      	movs	r3, #8
 8008f82:	e006      	b.n	8008f92 <UART_SetConfig+0x100a>
 8008f84:	2306      	movs	r3, #6
 8008f86:	e004      	b.n	8008f92 <UART_SetConfig+0x100a>
 8008f88:	2304      	movs	r3, #4
 8008f8a:	e002      	b.n	8008f92 <UART_SetConfig+0x100a>
 8008f8c:	2302      	movs	r3, #2
 8008f8e:	e000      	b.n	8008f92 <UART_SetConfig+0x100a>
 8008f90:	2301      	movs	r3, #1
 8008f92:	693a      	ldr	r2, [r7, #16]
 8008f94:	fbb2 f2f3 	udiv	r2, r2, r3
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	685b      	ldr	r3, [r3, #4]
 8008f9c:	085b      	lsrs	r3, r3, #1
 8008f9e:	441a      	add	r2, r3
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	685b      	ldr	r3, [r3, #4]
 8008fa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fa8:	b29b      	uxth	r3, r3
 8008faa:	61fb      	str	r3, [r7, #28]
        break;
 8008fac:	e16d      	b.n	800928a <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008fae:	f7fd f841 	bl	8006034 <HAL_RCC_GetPCLK2Freq>
 8008fb2:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d044      	beq.n	8009046 <UART_SetConfig+0x10be>
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fc0:	2b01      	cmp	r3, #1
 8008fc2:	d03e      	beq.n	8009042 <UART_SetConfig+0x10ba>
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fc8:	2b02      	cmp	r3, #2
 8008fca:	d038      	beq.n	800903e <UART_SetConfig+0x10b6>
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fd0:	2b03      	cmp	r3, #3
 8008fd2:	d032      	beq.n	800903a <UART_SetConfig+0x10b2>
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fd8:	2b04      	cmp	r3, #4
 8008fda:	d02c      	beq.n	8009036 <UART_SetConfig+0x10ae>
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fe0:	2b05      	cmp	r3, #5
 8008fe2:	d026      	beq.n	8009032 <UART_SetConfig+0x10aa>
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fe8:	2b06      	cmp	r3, #6
 8008fea:	d020      	beq.n	800902e <UART_SetConfig+0x10a6>
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ff0:	2b07      	cmp	r3, #7
 8008ff2:	d01a      	beq.n	800902a <UART_SetConfig+0x10a2>
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ff8:	2b08      	cmp	r3, #8
 8008ffa:	d014      	beq.n	8009026 <UART_SetConfig+0x109e>
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009000:	2b09      	cmp	r3, #9
 8009002:	d00e      	beq.n	8009022 <UART_SetConfig+0x109a>
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009008:	2b0a      	cmp	r3, #10
 800900a:	d008      	beq.n	800901e <UART_SetConfig+0x1096>
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009010:	2b0b      	cmp	r3, #11
 8009012:	d102      	bne.n	800901a <UART_SetConfig+0x1092>
 8009014:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009018:	e016      	b.n	8009048 <UART_SetConfig+0x10c0>
 800901a:	2301      	movs	r3, #1
 800901c:	e014      	b.n	8009048 <UART_SetConfig+0x10c0>
 800901e:	2380      	movs	r3, #128	; 0x80
 8009020:	e012      	b.n	8009048 <UART_SetConfig+0x10c0>
 8009022:	2340      	movs	r3, #64	; 0x40
 8009024:	e010      	b.n	8009048 <UART_SetConfig+0x10c0>
 8009026:	2320      	movs	r3, #32
 8009028:	e00e      	b.n	8009048 <UART_SetConfig+0x10c0>
 800902a:	2310      	movs	r3, #16
 800902c:	e00c      	b.n	8009048 <UART_SetConfig+0x10c0>
 800902e:	230c      	movs	r3, #12
 8009030:	e00a      	b.n	8009048 <UART_SetConfig+0x10c0>
 8009032:	230a      	movs	r3, #10
 8009034:	e008      	b.n	8009048 <UART_SetConfig+0x10c0>
 8009036:	2308      	movs	r3, #8
 8009038:	e006      	b.n	8009048 <UART_SetConfig+0x10c0>
 800903a:	2306      	movs	r3, #6
 800903c:	e004      	b.n	8009048 <UART_SetConfig+0x10c0>
 800903e:	2304      	movs	r3, #4
 8009040:	e002      	b.n	8009048 <UART_SetConfig+0x10c0>
 8009042:	2302      	movs	r3, #2
 8009044:	e000      	b.n	8009048 <UART_SetConfig+0x10c0>
 8009046:	2301      	movs	r3, #1
 8009048:	693a      	ldr	r2, [r7, #16]
 800904a:	fbb2 f2f3 	udiv	r2, r2, r3
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	685b      	ldr	r3, [r3, #4]
 8009052:	085b      	lsrs	r3, r3, #1
 8009054:	441a      	add	r2, r3
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	685b      	ldr	r3, [r3, #4]
 800905a:	fbb2 f3f3 	udiv	r3, r2, r3
 800905e:	b29b      	uxth	r3, r3
 8009060:	61fb      	str	r3, [r7, #28]
        break;
 8009062:	e112      	b.n	800928a <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009068:	2b00      	cmp	r3, #0
 800906a:	d044      	beq.n	80090f6 <UART_SetConfig+0x116e>
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009070:	2b01      	cmp	r3, #1
 8009072:	d03e      	beq.n	80090f2 <UART_SetConfig+0x116a>
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009078:	2b02      	cmp	r3, #2
 800907a:	d038      	beq.n	80090ee <UART_SetConfig+0x1166>
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009080:	2b03      	cmp	r3, #3
 8009082:	d032      	beq.n	80090ea <UART_SetConfig+0x1162>
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009088:	2b04      	cmp	r3, #4
 800908a:	d02c      	beq.n	80090e6 <UART_SetConfig+0x115e>
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009090:	2b05      	cmp	r3, #5
 8009092:	d026      	beq.n	80090e2 <UART_SetConfig+0x115a>
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009098:	2b06      	cmp	r3, #6
 800909a:	d020      	beq.n	80090de <UART_SetConfig+0x1156>
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090a0:	2b07      	cmp	r3, #7
 80090a2:	d01a      	beq.n	80090da <UART_SetConfig+0x1152>
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090a8:	2b08      	cmp	r3, #8
 80090aa:	d014      	beq.n	80090d6 <UART_SetConfig+0x114e>
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090b0:	2b09      	cmp	r3, #9
 80090b2:	d00e      	beq.n	80090d2 <UART_SetConfig+0x114a>
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090b8:	2b0a      	cmp	r3, #10
 80090ba:	d008      	beq.n	80090ce <UART_SetConfig+0x1146>
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090c0:	2b0b      	cmp	r3, #11
 80090c2:	d102      	bne.n	80090ca <UART_SetConfig+0x1142>
 80090c4:	f24f 4324 	movw	r3, #62500	; 0xf424
 80090c8:	e016      	b.n	80090f8 <UART_SetConfig+0x1170>
 80090ca:	4b81      	ldr	r3, [pc, #516]	; (80092d0 <UART_SetConfig+0x1348>)
 80090cc:	e014      	b.n	80090f8 <UART_SetConfig+0x1170>
 80090ce:	4b81      	ldr	r3, [pc, #516]	; (80092d4 <UART_SetConfig+0x134c>)
 80090d0:	e012      	b.n	80090f8 <UART_SetConfig+0x1170>
 80090d2:	4b81      	ldr	r3, [pc, #516]	; (80092d8 <UART_SetConfig+0x1350>)
 80090d4:	e010      	b.n	80090f8 <UART_SetConfig+0x1170>
 80090d6:	4b81      	ldr	r3, [pc, #516]	; (80092dc <UART_SetConfig+0x1354>)
 80090d8:	e00e      	b.n	80090f8 <UART_SetConfig+0x1170>
 80090da:	4b81      	ldr	r3, [pc, #516]	; (80092e0 <UART_SetConfig+0x1358>)
 80090dc:	e00c      	b.n	80090f8 <UART_SetConfig+0x1170>
 80090de:	4b81      	ldr	r3, [pc, #516]	; (80092e4 <UART_SetConfig+0x135c>)
 80090e0:	e00a      	b.n	80090f8 <UART_SetConfig+0x1170>
 80090e2:	4b81      	ldr	r3, [pc, #516]	; (80092e8 <UART_SetConfig+0x1360>)
 80090e4:	e008      	b.n	80090f8 <UART_SetConfig+0x1170>
 80090e6:	4b81      	ldr	r3, [pc, #516]	; (80092ec <UART_SetConfig+0x1364>)
 80090e8:	e006      	b.n	80090f8 <UART_SetConfig+0x1170>
 80090ea:	4b81      	ldr	r3, [pc, #516]	; (80092f0 <UART_SetConfig+0x1368>)
 80090ec:	e004      	b.n	80090f8 <UART_SetConfig+0x1170>
 80090ee:	4b81      	ldr	r3, [pc, #516]	; (80092f4 <UART_SetConfig+0x136c>)
 80090f0:	e002      	b.n	80090f8 <UART_SetConfig+0x1170>
 80090f2:	4b81      	ldr	r3, [pc, #516]	; (80092f8 <UART_SetConfig+0x1370>)
 80090f4:	e000      	b.n	80090f8 <UART_SetConfig+0x1170>
 80090f6:	4b76      	ldr	r3, [pc, #472]	; (80092d0 <UART_SetConfig+0x1348>)
 80090f8:	687a      	ldr	r2, [r7, #4]
 80090fa:	6852      	ldr	r2, [r2, #4]
 80090fc:	0852      	lsrs	r2, r2, #1
 80090fe:	441a      	add	r2, r3
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	685b      	ldr	r3, [r3, #4]
 8009104:	fbb2 f3f3 	udiv	r3, r2, r3
 8009108:	b29b      	uxth	r3, r3
 800910a:	61fb      	str	r3, [r7, #28]
        break;
 800910c:	e0bd      	b.n	800928a <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800910e:	f7fc ff0d 	bl	8005f2c <HAL_RCC_GetSysClockFreq>
 8009112:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009118:	2b00      	cmp	r3, #0
 800911a:	d044      	beq.n	80091a6 <UART_SetConfig+0x121e>
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009120:	2b01      	cmp	r3, #1
 8009122:	d03e      	beq.n	80091a2 <UART_SetConfig+0x121a>
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009128:	2b02      	cmp	r3, #2
 800912a:	d038      	beq.n	800919e <UART_SetConfig+0x1216>
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009130:	2b03      	cmp	r3, #3
 8009132:	d032      	beq.n	800919a <UART_SetConfig+0x1212>
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009138:	2b04      	cmp	r3, #4
 800913a:	d02c      	beq.n	8009196 <UART_SetConfig+0x120e>
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009140:	2b05      	cmp	r3, #5
 8009142:	d026      	beq.n	8009192 <UART_SetConfig+0x120a>
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009148:	2b06      	cmp	r3, #6
 800914a:	d020      	beq.n	800918e <UART_SetConfig+0x1206>
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009150:	2b07      	cmp	r3, #7
 8009152:	d01a      	beq.n	800918a <UART_SetConfig+0x1202>
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009158:	2b08      	cmp	r3, #8
 800915a:	d014      	beq.n	8009186 <UART_SetConfig+0x11fe>
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009160:	2b09      	cmp	r3, #9
 8009162:	d00e      	beq.n	8009182 <UART_SetConfig+0x11fa>
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009168:	2b0a      	cmp	r3, #10
 800916a:	d008      	beq.n	800917e <UART_SetConfig+0x11f6>
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009170:	2b0b      	cmp	r3, #11
 8009172:	d102      	bne.n	800917a <UART_SetConfig+0x11f2>
 8009174:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009178:	e016      	b.n	80091a8 <UART_SetConfig+0x1220>
 800917a:	2301      	movs	r3, #1
 800917c:	e014      	b.n	80091a8 <UART_SetConfig+0x1220>
 800917e:	2380      	movs	r3, #128	; 0x80
 8009180:	e012      	b.n	80091a8 <UART_SetConfig+0x1220>
 8009182:	2340      	movs	r3, #64	; 0x40
 8009184:	e010      	b.n	80091a8 <UART_SetConfig+0x1220>
 8009186:	2320      	movs	r3, #32
 8009188:	e00e      	b.n	80091a8 <UART_SetConfig+0x1220>
 800918a:	2310      	movs	r3, #16
 800918c:	e00c      	b.n	80091a8 <UART_SetConfig+0x1220>
 800918e:	230c      	movs	r3, #12
 8009190:	e00a      	b.n	80091a8 <UART_SetConfig+0x1220>
 8009192:	230a      	movs	r3, #10
 8009194:	e008      	b.n	80091a8 <UART_SetConfig+0x1220>
 8009196:	2308      	movs	r3, #8
 8009198:	e006      	b.n	80091a8 <UART_SetConfig+0x1220>
 800919a:	2306      	movs	r3, #6
 800919c:	e004      	b.n	80091a8 <UART_SetConfig+0x1220>
 800919e:	2304      	movs	r3, #4
 80091a0:	e002      	b.n	80091a8 <UART_SetConfig+0x1220>
 80091a2:	2302      	movs	r3, #2
 80091a4:	e000      	b.n	80091a8 <UART_SetConfig+0x1220>
 80091a6:	2301      	movs	r3, #1
 80091a8:	693a      	ldr	r2, [r7, #16]
 80091aa:	fbb2 f2f3 	udiv	r2, r2, r3
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	685b      	ldr	r3, [r3, #4]
 80091b2:	085b      	lsrs	r3, r3, #1
 80091b4:	441a      	add	r2, r3
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	685b      	ldr	r3, [r3, #4]
 80091ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80091be:	b29b      	uxth	r3, r3
 80091c0:	61fb      	str	r3, [r7, #28]
        break;
 80091c2:	e062      	b.n	800928a <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d04e      	beq.n	800926a <UART_SetConfig+0x12e2>
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091d0:	2b01      	cmp	r3, #1
 80091d2:	d047      	beq.n	8009264 <UART_SetConfig+0x12dc>
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091d8:	2b02      	cmp	r3, #2
 80091da:	d040      	beq.n	800925e <UART_SetConfig+0x12d6>
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091e0:	2b03      	cmp	r3, #3
 80091e2:	d039      	beq.n	8009258 <UART_SetConfig+0x12d0>
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091e8:	2b04      	cmp	r3, #4
 80091ea:	d032      	beq.n	8009252 <UART_SetConfig+0x12ca>
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091f0:	2b05      	cmp	r3, #5
 80091f2:	d02b      	beq.n	800924c <UART_SetConfig+0x12c4>
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091f8:	2b06      	cmp	r3, #6
 80091fa:	d024      	beq.n	8009246 <UART_SetConfig+0x12be>
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009200:	2b07      	cmp	r3, #7
 8009202:	d01d      	beq.n	8009240 <UART_SetConfig+0x12b8>
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009208:	2b08      	cmp	r3, #8
 800920a:	d016      	beq.n	800923a <UART_SetConfig+0x12b2>
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009210:	2b09      	cmp	r3, #9
 8009212:	d00f      	beq.n	8009234 <UART_SetConfig+0x12ac>
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009218:	2b0a      	cmp	r3, #10
 800921a:	d008      	beq.n	800922e <UART_SetConfig+0x12a6>
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009220:	2b0b      	cmp	r3, #11
 8009222:	d101      	bne.n	8009228 <UART_SetConfig+0x12a0>
 8009224:	2380      	movs	r3, #128	; 0x80
 8009226:	e022      	b.n	800926e <UART_SetConfig+0x12e6>
 8009228:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800922c:	e01f      	b.n	800926e <UART_SetConfig+0x12e6>
 800922e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009232:	e01c      	b.n	800926e <UART_SetConfig+0x12e6>
 8009234:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009238:	e019      	b.n	800926e <UART_SetConfig+0x12e6>
 800923a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800923e:	e016      	b.n	800926e <UART_SetConfig+0x12e6>
 8009240:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009244:	e013      	b.n	800926e <UART_SetConfig+0x12e6>
 8009246:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800924a:	e010      	b.n	800926e <UART_SetConfig+0x12e6>
 800924c:	f640 43cc 	movw	r3, #3276	; 0xccc
 8009250:	e00d      	b.n	800926e <UART_SetConfig+0x12e6>
 8009252:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009256:	e00a      	b.n	800926e <UART_SetConfig+0x12e6>
 8009258:	f241 5355 	movw	r3, #5461	; 0x1555
 800925c:	e007      	b.n	800926e <UART_SetConfig+0x12e6>
 800925e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009262:	e004      	b.n	800926e <UART_SetConfig+0x12e6>
 8009264:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009268:	e001      	b.n	800926e <UART_SetConfig+0x12e6>
 800926a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800926e:	687a      	ldr	r2, [r7, #4]
 8009270:	6852      	ldr	r2, [r2, #4]
 8009272:	0852      	lsrs	r2, r2, #1
 8009274:	441a      	add	r2, r3
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	685b      	ldr	r3, [r3, #4]
 800927a:	fbb2 f3f3 	udiv	r3, r2, r3
 800927e:	b29b      	uxth	r3, r3
 8009280:	61fb      	str	r3, [r7, #28]
        break;
 8009282:	e002      	b.n	800928a <UART_SetConfig+0x1302>
      default:
        ret = HAL_ERROR;
 8009284:	2301      	movs	r3, #1
 8009286:	76fb      	strb	r3, [r7, #27]
        break;
 8009288:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800928a:	69fb      	ldr	r3, [r7, #28]
 800928c:	2b0f      	cmp	r3, #15
 800928e:	d908      	bls.n	80092a2 <UART_SetConfig+0x131a>
 8009290:	69fb      	ldr	r3, [r7, #28]
 8009292:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009296:	d204      	bcs.n	80092a2 <UART_SetConfig+0x131a>
    {
      huart->Instance->BRR = usartdiv;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	69fa      	ldr	r2, [r7, #28]
 800929e:	60da      	str	r2, [r3, #12]
 80092a0:	e001      	b.n	80092a6 <UART_SetConfig+0x131e>
    }
    else
    {
      ret = HAL_ERROR;
 80092a2:	2301      	movs	r3, #1
 80092a4:	76fb      	strb	r3, [r7, #27]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	2201      	movs	r2, #1
 80092aa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	2201      	movs	r2, #1
 80092b2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	2200      	movs	r2, #0
 80092ba:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	2200      	movs	r2, #0
 80092c0:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80092c2:	7efb      	ldrb	r3, [r7, #27]
}
 80092c4:	4618      	mov	r0, r3
 80092c6:	3728      	adds	r7, #40	; 0x28
 80092c8:	46bd      	mov	sp, r7
 80092ca:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80092ce:	bf00      	nop
 80092d0:	00f42400 	.word	0x00f42400
 80092d4:	0001e848 	.word	0x0001e848
 80092d8:	0003d090 	.word	0x0003d090
 80092dc:	0007a120 	.word	0x0007a120
 80092e0:	000f4240 	.word	0x000f4240
 80092e4:	00145855 	.word	0x00145855
 80092e8:	00186a00 	.word	0x00186a00
 80092ec:	001e8480 	.word	0x001e8480
 80092f0:	0028b0aa 	.word	0x0028b0aa
 80092f4:	003d0900 	.word	0x003d0900
 80092f8:	007a1200 	.word	0x007a1200

080092fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80092fc:	b480      	push	{r7}
 80092fe:	b083      	sub	sp, #12
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009308:	f003 0301 	and.w	r3, r3, #1
 800930c:	2b00      	cmp	r3, #0
 800930e:	d00a      	beq.n	8009326 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	685b      	ldr	r3, [r3, #4]
 8009316:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	430a      	orrs	r2, r1
 8009324:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800932a:	f003 0302 	and.w	r3, r3, #2
 800932e:	2b00      	cmp	r3, #0
 8009330:	d00a      	beq.n	8009348 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	685b      	ldr	r3, [r3, #4]
 8009338:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	430a      	orrs	r2, r1
 8009346:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800934c:	f003 0304 	and.w	r3, r3, #4
 8009350:	2b00      	cmp	r3, #0
 8009352:	d00a      	beq.n	800936a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	685b      	ldr	r3, [r3, #4]
 800935a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	430a      	orrs	r2, r1
 8009368:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800936e:	f003 0308 	and.w	r3, r3, #8
 8009372:	2b00      	cmp	r3, #0
 8009374:	d00a      	beq.n	800938c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	685b      	ldr	r3, [r3, #4]
 800937c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	430a      	orrs	r2, r1
 800938a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009390:	f003 0310 	and.w	r3, r3, #16
 8009394:	2b00      	cmp	r3, #0
 8009396:	d00a      	beq.n	80093ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	689b      	ldr	r3, [r3, #8]
 800939e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	430a      	orrs	r2, r1
 80093ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093b2:	f003 0320 	and.w	r3, r3, #32
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d00a      	beq.n	80093d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	689b      	ldr	r3, [r3, #8]
 80093c0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	430a      	orrs	r2, r1
 80093ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d01a      	beq.n	8009412 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	685b      	ldr	r3, [r3, #4]
 80093e2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	430a      	orrs	r2, r1
 80093f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80093fa:	d10a      	bne.n	8009412 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	685b      	ldr	r3, [r3, #4]
 8009402:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	430a      	orrs	r2, r1
 8009410:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009416:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800941a:	2b00      	cmp	r3, #0
 800941c:	d00a      	beq.n	8009434 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	685b      	ldr	r3, [r3, #4]
 8009424:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	430a      	orrs	r2, r1
 8009432:	605a      	str	r2, [r3, #4]
  }
}
 8009434:	bf00      	nop
 8009436:	370c      	adds	r7, #12
 8009438:	46bd      	mov	sp, r7
 800943a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943e:	4770      	bx	lr

08009440 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b086      	sub	sp, #24
 8009444:	af02      	add	r7, sp, #8
 8009446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2200      	movs	r2, #0
 800944c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8009450:	f7f9 fb86 	bl	8002b60 <HAL_GetTick>
 8009454:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	f003 0308 	and.w	r3, r3, #8
 8009460:	2b08      	cmp	r3, #8
 8009462:	d10e      	bne.n	8009482 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009464:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009468:	9300      	str	r3, [sp, #0]
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	2200      	movs	r2, #0
 800946e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	f000 f82c 	bl	80094d0 <UART_WaitOnFlagUntilTimeout>
 8009478:	4603      	mov	r3, r0
 800947a:	2b00      	cmp	r3, #0
 800947c:	d001      	beq.n	8009482 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800947e:	2303      	movs	r3, #3
 8009480:	e022      	b.n	80094c8 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	f003 0304 	and.w	r3, r3, #4
 800948c:	2b04      	cmp	r3, #4
 800948e:	d10e      	bne.n	80094ae <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009490:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009494:	9300      	str	r3, [sp, #0]
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	2200      	movs	r2, #0
 800949a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800949e:	6878      	ldr	r0, [r7, #4]
 80094a0:	f000 f816 	bl	80094d0 <UART_WaitOnFlagUntilTimeout>
 80094a4:	4603      	mov	r3, r0
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d001      	beq.n	80094ae <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80094aa:	2303      	movs	r3, #3
 80094ac:	e00c      	b.n	80094c8 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	2220      	movs	r2, #32
 80094b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	2220      	movs	r2, #32
 80094ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	2200      	movs	r2, #0
 80094c2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80094c6:	2300      	movs	r3, #0
}
 80094c8:	4618      	mov	r0, r3
 80094ca:	3710      	adds	r7, #16
 80094cc:	46bd      	mov	sp, r7
 80094ce:	bd80      	pop	{r7, pc}

080094d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b084      	sub	sp, #16
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	60f8      	str	r0, [r7, #12]
 80094d8:	60b9      	str	r1, [r7, #8]
 80094da:	603b      	str	r3, [r7, #0]
 80094dc:	4613      	mov	r3, r2
 80094de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80094e0:	e02c      	b.n	800953c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80094e2:	69bb      	ldr	r3, [r7, #24]
 80094e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094e8:	d028      	beq.n	800953c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80094ea:	f7f9 fb39 	bl	8002b60 <HAL_GetTick>
 80094ee:	4602      	mov	r2, r0
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	1ad3      	subs	r3, r2, r3
 80094f4:	69ba      	ldr	r2, [r7, #24]
 80094f6:	429a      	cmp	r2, r3
 80094f8:	d302      	bcc.n	8009500 <UART_WaitOnFlagUntilTimeout+0x30>
 80094fa:	69bb      	ldr	r3, [r7, #24]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d11d      	bne.n	800953c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	681a      	ldr	r2, [r3, #0]
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800950e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	689a      	ldr	r2, [r3, #8]
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	f022 0201 	bic.w	r2, r2, #1
 800951e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	2220      	movs	r2, #32
 8009524:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	2220      	movs	r2, #32
 800952c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	2200      	movs	r2, #0
 8009534:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8009538:	2303      	movs	r3, #3
 800953a:	e00f      	b.n	800955c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	69da      	ldr	r2, [r3, #28]
 8009542:	68bb      	ldr	r3, [r7, #8]
 8009544:	4013      	ands	r3, r2
 8009546:	68ba      	ldr	r2, [r7, #8]
 8009548:	429a      	cmp	r2, r3
 800954a:	bf0c      	ite	eq
 800954c:	2301      	moveq	r3, #1
 800954e:	2300      	movne	r3, #0
 8009550:	b2db      	uxtb	r3, r3
 8009552:	461a      	mov	r2, r3
 8009554:	79fb      	ldrb	r3, [r7, #7]
 8009556:	429a      	cmp	r2, r3
 8009558:	d0c3      	beq.n	80094e2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800955a:	2300      	movs	r3, #0
}
 800955c:	4618      	mov	r0, r3
 800955e:	3710      	adds	r7, #16
 8009560:	46bd      	mov	sp, r7
 8009562:	bd80      	pop	{r7, pc}

08009564 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009564:	b480      	push	{r7}
 8009566:	b083      	sub	sp, #12
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	681a      	ldr	r2, [r3, #0]
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800957a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	689b      	ldr	r3, [r3, #8]
 8009582:	687a      	ldr	r2, [r7, #4]
 8009584:	6812      	ldr	r2, [r2, #0]
 8009586:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800958a:	f023 0301 	bic.w	r3, r3, #1
 800958e:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2220      	movs	r2, #32
 8009594:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	2200      	movs	r2, #0
 800959c:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800959e:	bf00      	nop
 80095a0:	370c      	adds	r7, #12
 80095a2:	46bd      	mov	sp, r7
 80095a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a8:	4770      	bx	lr

080095aa <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80095aa:	b580      	push	{r7, lr}
 80095ac:	b084      	sub	sp, #16
 80095ae:	af00      	add	r7, sp, #0
 80095b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095b6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	2200      	movs	r2, #0
 80095bc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	2200      	movs	r2, #0
 80095c4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80095c8:	68f8      	ldr	r0, [r7, #12]
 80095ca:	f7fe fcd3 	bl	8007f74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80095ce:	bf00      	nop
 80095d0:	3710      	adds	r7, #16
 80095d2:	46bd      	mov	sp, r7
 80095d4:	bd80      	pop	{r7, pc}

080095d6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80095d6:	b580      	push	{r7, lr}
 80095d8:	b082      	sub	sp, #8
 80095da:	af00      	add	r7, sp, #0
 80095dc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	681a      	ldr	r2, [r3, #0]
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80095ec:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	2220      	movs	r2, #32
 80095f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	2200      	movs	r2, #0
 80095fa:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80095fc:	6878      	ldr	r0, [r7, #4]
 80095fe:	f7fe fcaf 	bl	8007f60 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009602:	bf00      	nop
 8009604:	3708      	adds	r7, #8
 8009606:	46bd      	mov	sp, r7
 8009608:	bd80      	pop	{r7, pc}

0800960a <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800960a:	b580      	push	{r7, lr}
 800960c:	b084      	sub	sp, #16
 800960e:	af00      	add	r7, sp, #0
 8009610:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009618:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009620:	2b22      	cmp	r3, #34	; 0x22
 8009622:	d13b      	bne.n	800969c <UART_RxISR_8BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800962a:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800962c:	89bb      	ldrh	r3, [r7, #12]
 800962e:	b2d9      	uxtb	r1, r3
 8009630:	89fb      	ldrh	r3, [r7, #14]
 8009632:	b2da      	uxtb	r2, r3
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009638:	400a      	ands	r2, r1
 800963a:	b2d2      	uxtb	r2, r2
 800963c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009642:	1c5a      	adds	r2, r3, #1
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800964e:	b29b      	uxth	r3, r3
 8009650:	3b01      	subs	r3, #1
 8009652:	b29a      	uxth	r2, r3
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009660:	b29b      	uxth	r3, r3
 8009662:	2b00      	cmp	r3, #0
 8009664:	d122      	bne.n	80096ac <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	681a      	ldr	r2, [r3, #0]
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009674:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	689a      	ldr	r2, [r3, #8]
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	f022 0201 	bic.w	r2, r2, #1
 8009684:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2220      	movs	r2, #32
 800968a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	2200      	movs	r2, #0
 8009692:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8009694:	6878      	ldr	r0, [r7, #4]
 8009696:	f7f8 fcb5 	bl	8002004 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800969a:	e007      	b.n	80096ac <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	699a      	ldr	r2, [r3, #24]
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	f042 0208 	orr.w	r2, r2, #8
 80096aa:	619a      	str	r2, [r3, #24]
}
 80096ac:	bf00      	nop
 80096ae:	3710      	adds	r7, #16
 80096b0:	46bd      	mov	sp, r7
 80096b2:	bd80      	pop	{r7, pc}

080096b4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b084      	sub	sp, #16
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80096c2:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80096ca:	2b22      	cmp	r3, #34	; 0x22
 80096cc:	d13b      	bne.n	8009746 <UART_RxISR_16BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096d4:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096da:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80096dc:	89ba      	ldrh	r2, [r7, #12]
 80096de:	89fb      	ldrh	r3, [r7, #14]
 80096e0:	4013      	ands	r3, r2
 80096e2:	b29a      	uxth	r2, r3
 80096e4:	68bb      	ldr	r3, [r7, #8]
 80096e6:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096ec:	1c9a      	adds	r2, r3, #2
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80096f8:	b29b      	uxth	r3, r3
 80096fa:	3b01      	subs	r3, #1
 80096fc:	b29a      	uxth	r2, r3
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800970a:	b29b      	uxth	r3, r3
 800970c:	2b00      	cmp	r3, #0
 800970e:	d122      	bne.n	8009756 <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	681a      	ldr	r2, [r3, #0]
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800971e:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	689a      	ldr	r2, [r3, #8]
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	f022 0201 	bic.w	r2, r2, #1
 800972e:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	2220      	movs	r2, #32
 8009734:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2200      	movs	r2, #0
 800973c:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800973e:	6878      	ldr	r0, [r7, #4]
 8009740:	f7f8 fc60 	bl	8002004 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009744:	e007      	b.n	8009756 <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	699a      	ldr	r2, [r3, #24]
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	f042 0208 	orr.w	r2, r2, #8
 8009754:	619a      	str	r2, [r3, #24]
}
 8009756:	bf00      	nop
 8009758:	3710      	adds	r7, #16
 800975a:	46bd      	mov	sp, r7
 800975c:	bd80      	pop	{r7, pc}
	...

08009760 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b084      	sub	sp, #16
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800976e:	81bb      	strh	r3, [r7, #12]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009776:	2b22      	cmp	r3, #34	; 0x22
 8009778:	d168      	bne.n	800984c <UART_RxISR_8BIT_FIFOEN+0xec>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009780:	81fb      	strh	r3, [r7, #14]
 8009782:	e03f      	b.n	8009804 <UART_RxISR_8BIT_FIFOEN+0xa4>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800978a:	813b      	strh	r3, [r7, #8]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800978c:	893b      	ldrh	r3, [r7, #8]
 800978e:	b2d9      	uxtb	r1, r3
 8009790:	89bb      	ldrh	r3, [r7, #12]
 8009792:	b2da      	uxtb	r2, r3
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009798:	400a      	ands	r2, r1
 800979a:	b2d2      	uxtb	r2, r2
 800979c:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097a2:	1c5a      	adds	r2, r3, #1
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80097ae:	b29b      	uxth	r3, r3
 80097b0:	3b01      	subs	r3, #1
 80097b2:	b29a      	uxth	r2, r3
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80097c0:	b29b      	uxth	r3, r3
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d11b      	bne.n	80097fe <UART_RxISR_8BIT_FIFOEN+0x9e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	681a      	ldr	r2, [r3, #0]
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80097d4:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	689b      	ldr	r3, [r3, #8]
 80097dc:	687a      	ldr	r2, [r7, #4]
 80097de:	6812      	ldr	r2, [r2, #0]
 80097e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80097e4:	f023 0301 	bic.w	r3, r3, #1
 80097e8:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	2220      	movs	r2, #32
 80097ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	2200      	movs	r2, #0
 80097f6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80097f8:	6878      	ldr	r0, [r7, #4]
 80097fa:	f7f8 fc03 	bl	8002004 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80097fe:	89fb      	ldrh	r3, [r7, #14]
 8009800:	3b01      	subs	r3, #1
 8009802:	81fb      	strh	r3, [r7, #14]
 8009804:	89fb      	ldrh	r3, [r7, #14]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d1bc      	bne.n	8009784 <UART_RxISR_8BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009810:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009812:	897b      	ldrh	r3, [r7, #10]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d021      	beq.n	800985c <UART_RxISR_8BIT_FIFOEN+0xfc>
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800981e:	897a      	ldrh	r2, [r7, #10]
 8009820:	429a      	cmp	r2, r3
 8009822:	d21b      	bcs.n	800985c <UART_RxISR_8BIT_FIFOEN+0xfc>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	689a      	ldr	r2, [r3, #8]
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8009832:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	4a0b      	ldr	r2, [pc, #44]	; (8009864 <UART_RxISR_8BIT_FIFOEN+0x104>)
 8009838:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	681a      	ldr	r2, [r3, #0]
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	f042 0220 	orr.w	r2, r2, #32
 8009848:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800984a:	e007      	b.n	800985c <UART_RxISR_8BIT_FIFOEN+0xfc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	699a      	ldr	r2, [r3, #24]
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	f042 0208 	orr.w	r2, r2, #8
 800985a:	619a      	str	r2, [r3, #24]
}
 800985c:	bf00      	nop
 800985e:	3710      	adds	r7, #16
 8009860:	46bd      	mov	sp, r7
 8009862:	bd80      	pop	{r7, pc}
 8009864:	0800960b 	.word	0x0800960b

08009868 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b086      	sub	sp, #24
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009876:	82bb      	strh	r3, [r7, #20]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800987e:	2b22      	cmp	r3, #34	; 0x22
 8009880:	d168      	bne.n	8009954 <UART_RxISR_16BIT_FIFOEN+0xec>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009888:	82fb      	strh	r3, [r7, #22]
 800988a:	e03f      	b.n	800990c <UART_RxISR_16BIT_FIFOEN+0xa4>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009892:	823b      	strh	r3, [r7, #16]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009898:	60fb      	str	r3, [r7, #12]
      *tmp = (uint16_t)(uhdata & uhMask);
 800989a:	8a3a      	ldrh	r2, [r7, #16]
 800989c:	8abb      	ldrh	r3, [r7, #20]
 800989e:	4013      	ands	r3, r2
 80098a0:	b29a      	uxth	r2, r3
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098aa:	1c9a      	adds	r2, r3, #2
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80098b6:	b29b      	uxth	r3, r3
 80098b8:	3b01      	subs	r3, #1
 80098ba:	b29a      	uxth	r2, r3
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80098c8:	b29b      	uxth	r3, r3
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d11b      	bne.n	8009906 <UART_RxISR_16BIT_FIFOEN+0x9e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	681a      	ldr	r2, [r3, #0]
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80098dc:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	689b      	ldr	r3, [r3, #8]
 80098e4:	687a      	ldr	r2, [r7, #4]
 80098e6:	6812      	ldr	r2, [r2, #0]
 80098e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80098ec:	f023 0301 	bic.w	r3, r3, #1
 80098f0:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	2220      	movs	r2, #32
 80098f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	2200      	movs	r2, #0
 80098fe:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009900:	6878      	ldr	r0, [r7, #4]
 8009902:	f7f8 fb7f 	bl	8002004 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8009906:	8afb      	ldrh	r3, [r7, #22]
 8009908:	3b01      	subs	r3, #1
 800990a:	82fb      	strh	r3, [r7, #22]
 800990c:	8afb      	ldrh	r3, [r7, #22]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d1bc      	bne.n	800988c <UART_RxISR_16BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009918:	827b      	strh	r3, [r7, #18]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800991a:	8a7b      	ldrh	r3, [r7, #18]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d021      	beq.n	8009964 <UART_RxISR_16BIT_FIFOEN+0xfc>
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009926:	8a7a      	ldrh	r2, [r7, #18]
 8009928:	429a      	cmp	r2, r3
 800992a:	d21b      	bcs.n	8009964 <UART_RxISR_16BIT_FIFOEN+0xfc>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	689a      	ldr	r2, [r3, #8]
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800993a:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	4a0b      	ldr	r2, [pc, #44]	; (800996c <UART_RxISR_16BIT_FIFOEN+0x104>)
 8009940:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	681a      	ldr	r2, [r3, #0]
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	f042 0220 	orr.w	r2, r2, #32
 8009950:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009952:	e007      	b.n	8009964 <UART_RxISR_16BIT_FIFOEN+0xfc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	699a      	ldr	r2, [r3, #24]
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	f042 0208 	orr.w	r2, r2, #8
 8009962:	619a      	str	r2, [r3, #24]
}
 8009964:	bf00      	nop
 8009966:	3718      	adds	r7, #24
 8009968:	46bd      	mov	sp, r7
 800996a:	bd80      	pop	{r7, pc}
 800996c:	080096b5 	.word	0x080096b5

08009970 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009970:	b480      	push	{r7}
 8009972:	b083      	sub	sp, #12
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009978:	bf00      	nop
 800997a:	370c      	adds	r7, #12
 800997c:	46bd      	mov	sp, r7
 800997e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009982:	4770      	bx	lr

08009984 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009984:	b480      	push	{r7}
 8009986:	b083      	sub	sp, #12
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800998c:	bf00      	nop
 800998e:	370c      	adds	r7, #12
 8009990:	46bd      	mov	sp, r7
 8009992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009996:	4770      	bx	lr

08009998 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009998:	b480      	push	{r7}
 800999a:	b083      	sub	sp, #12
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80099a0:	bf00      	nop
 80099a2:	370c      	adds	r7, #12
 80099a4:	46bd      	mov	sp, r7
 80099a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099aa:	4770      	bx	lr

080099ac <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80099ac:	b480      	push	{r7}
 80099ae:	b085      	sub	sp, #20
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80099ba:	2b01      	cmp	r3, #1
 80099bc:	d101      	bne.n	80099c2 <HAL_UARTEx_DisableFifoMode+0x16>
 80099be:	2302      	movs	r3, #2
 80099c0:	e027      	b.n	8009a12 <HAL_UARTEx_DisableFifoMode+0x66>
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	2201      	movs	r2, #1
 80099c6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	2224      	movs	r2, #36	; 0x24
 80099ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	681a      	ldr	r2, [r3, #0]
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	f022 0201 	bic.w	r2, r2, #1
 80099e8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80099f0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	2200      	movs	r2, #0
 80099f6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	68fa      	ldr	r2, [r7, #12]
 80099fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	2220      	movs	r2, #32
 8009a04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009a10:	2300      	movs	r3, #0
}
 8009a12:	4618      	mov	r0, r3
 8009a14:	3714      	adds	r7, #20
 8009a16:	46bd      	mov	sp, r7
 8009a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1c:	4770      	bx	lr

08009a1e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009a1e:	b580      	push	{r7, lr}
 8009a20:	b084      	sub	sp, #16
 8009a22:	af00      	add	r7, sp, #0
 8009a24:	6078      	str	r0, [r7, #4]
 8009a26:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009a2e:	2b01      	cmp	r3, #1
 8009a30:	d101      	bne.n	8009a36 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009a32:	2302      	movs	r3, #2
 8009a34:	e02d      	b.n	8009a92 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	2201      	movs	r2, #1
 8009a3a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	2224      	movs	r2, #36	; 0x24
 8009a42:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	681a      	ldr	r2, [r3, #0]
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	f022 0201 	bic.w	r2, r2, #1
 8009a5c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	689b      	ldr	r3, [r3, #8]
 8009a64:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	683a      	ldr	r2, [r7, #0]
 8009a6e:	430a      	orrs	r2, r1
 8009a70:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009a72:	6878      	ldr	r0, [r7, #4]
 8009a74:	f000 f850 	bl	8009b18 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	68fa      	ldr	r2, [r7, #12]
 8009a7e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	2220      	movs	r2, #32
 8009a84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009a90:	2300      	movs	r3, #0
}
 8009a92:	4618      	mov	r0, r3
 8009a94:	3710      	adds	r7, #16
 8009a96:	46bd      	mov	sp, r7
 8009a98:	bd80      	pop	{r7, pc}

08009a9a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009a9a:	b580      	push	{r7, lr}
 8009a9c:	b084      	sub	sp, #16
 8009a9e:	af00      	add	r7, sp, #0
 8009aa0:	6078      	str	r0, [r7, #4]
 8009aa2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009aaa:	2b01      	cmp	r3, #1
 8009aac:	d101      	bne.n	8009ab2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009aae:	2302      	movs	r3, #2
 8009ab0:	e02d      	b.n	8009b0e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	2201      	movs	r2, #1
 8009ab6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	2224      	movs	r2, #36	; 0x24
 8009abe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	681a      	ldr	r2, [r3, #0]
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	f022 0201 	bic.w	r2, r2, #1
 8009ad8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	689b      	ldr	r3, [r3, #8]
 8009ae0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	683a      	ldr	r2, [r7, #0]
 8009aea:	430a      	orrs	r2, r1
 8009aec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009aee:	6878      	ldr	r0, [r7, #4]
 8009af0:	f000 f812 	bl	8009b18 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	68fa      	ldr	r2, [r7, #12]
 8009afa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2220      	movs	r2, #32
 8009b00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2200      	movs	r2, #0
 8009b08:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009b0c:	2300      	movs	r3, #0
}
 8009b0e:	4618      	mov	r0, r3
 8009b10:	3710      	adds	r7, #16
 8009b12:	46bd      	mov	sp, r7
 8009b14:	bd80      	pop	{r7, pc}
	...

08009b18 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009b18:	b480      	push	{r7}
 8009b1a:	b089      	sub	sp, #36	; 0x24
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8009b20:	4a2f      	ldr	r2, [pc, #188]	; (8009be0 <UARTEx_SetNbDataToProcess+0xc8>)
 8009b22:	f107 0314 	add.w	r3, r7, #20
 8009b26:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009b2a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8009b2e:	4a2d      	ldr	r2, [pc, #180]	; (8009be4 <UARTEx_SetNbDataToProcess+0xcc>)
 8009b30:	f107 030c 	add.w	r3, r7, #12
 8009b34:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009b38:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d108      	bne.n	8009b56 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2201      	movs	r2, #1
 8009b48:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	2201      	movs	r2, #1
 8009b50:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009b54:	e03d      	b.n	8009bd2 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009b56:	2308      	movs	r3, #8
 8009b58:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009b5a:	2308      	movs	r3, #8
 8009b5c:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	689b      	ldr	r3, [r3, #8]
 8009b64:	0e5b      	lsrs	r3, r3, #25
 8009b66:	b2db      	uxtb	r3, r3
 8009b68:	f003 0307 	and.w	r3, r3, #7
 8009b6c:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	689b      	ldr	r3, [r3, #8]
 8009b74:	0f5b      	lsrs	r3, r3, #29
 8009b76:	b2db      	uxtb	r3, r3
 8009b78:	f003 0307 	and.w	r3, r3, #7
 8009b7c:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8009b7e:	7fbb      	ldrb	r3, [r7, #30]
 8009b80:	7f3a      	ldrb	r2, [r7, #28]
 8009b82:	f107 0120 	add.w	r1, r7, #32
 8009b86:	440a      	add	r2, r1
 8009b88:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8009b8c:	fb02 f303 	mul.w	r3, r2, r3
 8009b90:	7f3a      	ldrb	r2, [r7, #28]
 8009b92:	f107 0120 	add.w	r1, r7, #32
 8009b96:	440a      	add	r2, r1
 8009b98:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8009b9c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009ba0:	b29a      	uxth	r2, r3
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8009ba8:	7ffb      	ldrb	r3, [r7, #31]
 8009baa:	7f7a      	ldrb	r2, [r7, #29]
 8009bac:	f107 0120 	add.w	r1, r7, #32
 8009bb0:	440a      	add	r2, r1
 8009bb2:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8009bb6:	fb02 f303 	mul.w	r3, r2, r3
 8009bba:	7f7a      	ldrb	r2, [r7, #29]
 8009bbc:	f107 0120 	add.w	r1, r7, #32
 8009bc0:	440a      	add	r2, r1
 8009bc2:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8009bc6:	fb93 f3f2 	sdiv	r3, r3, r2
 8009bca:	b29a      	uxth	r2, r3
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009bd2:	bf00      	nop
 8009bd4:	3724      	adds	r7, #36	; 0x24
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bdc:	4770      	bx	lr
 8009bde:	bf00      	nop
 8009be0:	0800df10 	.word	0x0800df10
 8009be4:	0800df18 	.word	0x0800df18

08009be8 <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b082      	sub	sp, #8
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
 8009bf0:	6039      	str	r1, [r7, #0]

  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	ed93 7a06 	vldr	s14, [r3, #24]
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	edd3 7a07 	vldr	s15, [r3, #28]
 8009bfe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	edd3 7a08 	vldr	s15, [r3, #32]
 8009c08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0 * S->Kd);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	edd3 7a06 	vldr	s15, [r3, #24]
 8009c18:	eeb1 7a67 	vneg.f32	s14, s15
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	edd3 7a08 	vldr	s15, [r3, #32]
 8009c22:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009c26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	6a1a      	ldr	r2, [r3, #32]
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 8009c38:	683b      	ldr	r3, [r7, #0]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d006      	beq.n	8009c4c <arm_pid_init_f32+0x64>
  {
    /* Clear the state buffer.  The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	330c      	adds	r3, #12
 8009c42:	220c      	movs	r2, #12
 8009c44:	2100      	movs	r1, #0
 8009c46:	4618      	mov	r0, r3
 8009c48:	f000 fa34 	bl	800a0b4 <memset>
  }

}
 8009c4c:	bf00      	nop
 8009c4e:	3708      	adds	r7, #8
 8009c50:	46bd      	mov	sp, r7
 8009c52:	bd80      	pop	{r7, pc}

08009c54 <arm_sin_cos_f32>:

void arm_sin_cos_f32(
                      float32_t theta,
                      float32_t * pSinVal,
                      float32_t * pCosVal)
{
 8009c54:	b480      	push	{r7}
 8009c56:	b091      	sub	sp, #68	; 0x44
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	ed87 0a03 	vstr	s0, [r7, #12]
 8009c5e:	60b8      	str	r0, [r7, #8]
 8009c60:	6079      	str	r1, [r7, #4]
    float32_t f1, f2, d1, d2;                        /* Two nearest output values */
    float32_t findex, Dn, Df, temp;

    /* input x is in degrees */
    /* Scale the input, divide input by 360, for cosine add 0.25 (pi/2) to read sine table */
    in = theta * 0.00277777777778f;
 8009c62:	edd7 7a03 	vldr	s15, [r7, #12]
 8009c66:	ed9f 7ab4 	vldr	s14, [pc, #720]	; 8009f38 <arm_sin_cos_f32+0x2e4>
 8009c6a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009c6e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    if (in < 0.0f)
 8009c72:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8009c76:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009c7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c7e:	d505      	bpl.n	8009c8c <arm_sin_cos_f32+0x38>
    {
        in = -in;
 8009c80:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8009c84:	eef1 7a67 	vneg.f32	s15, s15
 8009c88:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    }

    in = in - (int32_t)in;
 8009c8c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8009c90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009c94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009c98:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8009c9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009ca0:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    /* Calculation of index of the table */
    findex = (float32_t) FAST_MATH_TABLE_SIZE * in;
 8009ca4:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8009ca8:	ed9f 7aa4 	vldr	s14, [pc, #656]	; 8009f3c <arm_sin_cos_f32+0x2e8>
 8009cac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009cb0:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
    indexS = ((uint16_t)findex) & 0x1ff;
 8009cb4:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8009cb8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009cbc:	ee17 3a90 	vmov	r3, s15
 8009cc0:	b29b      	uxth	r3, r3
 8009cc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cc6:	86fb      	strh	r3, [r7, #54]	; 0x36
    indexC = (indexS + (FAST_MATH_TABLE_SIZE / 4)) & 0x1ff;
 8009cc8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009cca:	3380      	adds	r3, #128	; 0x80
 8009ccc:	b29b      	uxth	r3, r3
 8009cce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cd2:	86bb      	strh	r3, [r7, #52]	; 0x34

    /* fractional value calculation */
    fract = findex - (float32_t) indexS;
 8009cd4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009cd6:	ee07 3a90 	vmov	s15, r3
 8009cda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cde:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8009ce2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009ce6:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

    /* Read two nearest values of input value from the cos & sin tables */
    f1 = sinTable_f32[indexC+0];
 8009cea:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8009cec:	4a94      	ldr	r2, [pc, #592]	; (8009f40 <arm_sin_cos_f32+0x2ec>)
 8009cee:	009b      	lsls	r3, r3, #2
 8009cf0:	4413      	add	r3, r2
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
    f2 = sinTable_f32[indexC+1];
 8009cf6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8009cf8:	3301      	adds	r3, #1
 8009cfa:	4a91      	ldr	r2, [pc, #580]	; (8009f40 <arm_sin_cos_f32+0x2ec>)
 8009cfc:	009b      	lsls	r3, r3, #2
 8009cfe:	4413      	add	r3, r2
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	62bb      	str	r3, [r7, #40]	; 0x28
    d1 = -sinTable_f32[indexS+0];
 8009d04:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009d06:	4a8e      	ldr	r2, [pc, #568]	; (8009f40 <arm_sin_cos_f32+0x2ec>)
 8009d08:	009b      	lsls	r3, r3, #2
 8009d0a:	4413      	add	r3, r2
 8009d0c:	edd3 7a00 	vldr	s15, [r3]
 8009d10:	eef1 7a67 	vneg.f32	s15, s15
 8009d14:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    d2 = -sinTable_f32[indexS+1];
 8009d18:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009d1a:	3301      	adds	r3, #1
 8009d1c:	4a88      	ldr	r2, [pc, #544]	; (8009f40 <arm_sin_cos_f32+0x2ec>)
 8009d1e:	009b      	lsls	r3, r3, #2
 8009d20:	4413      	add	r3, r2
 8009d22:	edd3 7a00 	vldr	s15, [r3]
 8009d26:	eef1 7a67 	vneg.f32	s15, s15
 8009d2a:	edc7 7a08 	vstr	s15, [r7, #32]

    temp = (1.0f - fract) * f1 + fract * f2;
 8009d2e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009d32:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8009d36:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009d3a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8009d3e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009d42:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8009d46:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009d4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009d4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009d52:	edc7 7a07 	vstr	s15, [r7, #28]

    Dn = 0.0122718463030f; // delta between the two points (fixed), in this case 2*pi/FAST_MATH_TABLE_SIZE
 8009d56:	4b7b      	ldr	r3, [pc, #492]	; (8009f44 <arm_sin_cos_f32+0x2f0>)
 8009d58:	61bb      	str	r3, [r7, #24]
    Df = f2 - f1;          // delta between the values of the functions
 8009d5a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8009d5e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8009d62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009d66:	edc7 7a05 	vstr	s15, [r7, #20]

    temp = Dn *(d1 + d2) - 2 * Df;
 8009d6a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8009d6e:	edd7 7a08 	vldr	s15, [r7, #32]
 8009d72:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009d76:	edd7 7a06 	vldr	s15, [r7, #24]
 8009d7a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009d7e:	edd7 7a05 	vldr	s15, [r7, #20]
 8009d82:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009d86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009d8a:	edc7 7a07 	vstr	s15, [r7, #28]
    temp = fract * temp + (3 * Df - (d2 + 2 * d1) * Dn);
 8009d8e:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8009d92:	edd7 7a07 	vldr	s15, [r7, #28]
 8009d96:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009d9a:	edd7 7a05 	vldr	s15, [r7, #20]
 8009d9e:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8009da2:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8009da6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009daa:	ee37 6aa7 	vadd.f32	s12, s15, s15
 8009dae:	edd7 7a08 	vldr	s15, [r7, #32]
 8009db2:	ee36 6a27 	vadd.f32	s12, s12, s15
 8009db6:	edd7 7a06 	vldr	s15, [r7, #24]
 8009dba:	ee66 7a27 	vmul.f32	s15, s12, s15
 8009dbe:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8009dc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009dc6:	edc7 7a07 	vstr	s15, [r7, #28]
    temp = fract * temp + d1 * Dn;
 8009dca:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8009dce:	edd7 7a07 	vldr	s15, [r7, #28]
 8009dd2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009dd6:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8009dda:	edd7 7a06 	vldr	s15, [r7, #24]
 8009dde:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009de2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009de6:	edc7 7a07 	vstr	s15, [r7, #28]

    /* Calculation of cosine value */
    *pCosVal = fract * temp + f1;
 8009dea:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8009dee:	edd7 7a07 	vldr	s15, [r7, #28]
 8009df2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009df6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8009dfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	edc3 7a00 	vstr	s15, [r3]

    /* Read two nearest values of input value from the cos & sin tables */
    f1 = sinTable_f32[indexS+0];
 8009e04:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009e06:	4a4e      	ldr	r2, [pc, #312]	; (8009f40 <arm_sin_cos_f32+0x2ec>)
 8009e08:	009b      	lsls	r3, r3, #2
 8009e0a:	4413      	add	r3, r2
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    f2 = sinTable_f32[indexS+1];
 8009e10:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009e12:	3301      	adds	r3, #1
 8009e14:	4a4a      	ldr	r2, [pc, #296]	; (8009f40 <arm_sin_cos_f32+0x2ec>)
 8009e16:	009b      	lsls	r3, r3, #2
 8009e18:	4413      	add	r3, r2
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	62bb      	str	r3, [r7, #40]	; 0x28
    d1 = sinTable_f32[indexC+0];
 8009e1e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8009e20:	4a47      	ldr	r2, [pc, #284]	; (8009f40 <arm_sin_cos_f32+0x2ec>)
 8009e22:	009b      	lsls	r3, r3, #2
 8009e24:	4413      	add	r3, r2
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	627b      	str	r3, [r7, #36]	; 0x24
    d2 = sinTable_f32[indexC+1];
 8009e2a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8009e2c:	3301      	adds	r3, #1
 8009e2e:	4a44      	ldr	r2, [pc, #272]	; (8009f40 <arm_sin_cos_f32+0x2ec>)
 8009e30:	009b      	lsls	r3, r3, #2
 8009e32:	4413      	add	r3, r2
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	623b      	str	r3, [r7, #32]

    temp = (1.0f - fract) * f1 + fract * f2;
 8009e38:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009e3c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8009e40:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009e44:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8009e48:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009e4c:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8009e50:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009e54:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009e58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009e5c:	edc7 7a07 	vstr	s15, [r7, #28]

    Df = f2 - f1; // delta between the values of the functions
 8009e60:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8009e64:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8009e68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009e6c:	edc7 7a05 	vstr	s15, [r7, #20]
    temp = Dn*(d1 + d2) - 2*Df;
 8009e70:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8009e74:	edd7 7a08 	vldr	s15, [r7, #32]
 8009e78:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009e7c:	edd7 7a06 	vldr	s15, [r7, #24]
 8009e80:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009e84:	edd7 7a05 	vldr	s15, [r7, #20]
 8009e88:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009e8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009e90:	edc7 7a07 	vstr	s15, [r7, #28]
    temp = fract*temp + (3*Df - (d2 + 2*d1)*Dn);
 8009e94:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8009e98:	edd7 7a07 	vldr	s15, [r7, #28]
 8009e9c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009ea0:	edd7 7a05 	vldr	s15, [r7, #20]
 8009ea4:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8009ea8:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8009eac:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009eb0:	ee37 6aa7 	vadd.f32	s12, s15, s15
 8009eb4:	edd7 7a08 	vldr	s15, [r7, #32]
 8009eb8:	ee36 6a27 	vadd.f32	s12, s12, s15
 8009ebc:	edd7 7a06 	vldr	s15, [r7, #24]
 8009ec0:	ee66 7a27 	vmul.f32	s15, s12, s15
 8009ec4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8009ec8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009ecc:	edc7 7a07 	vstr	s15, [r7, #28]
    temp = fract*temp + d1*Dn;
 8009ed0:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8009ed4:	edd7 7a07 	vldr	s15, [r7, #28]
 8009ed8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009edc:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8009ee0:	edd7 7a06 	vldr	s15, [r7, #24]
 8009ee4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009ee8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009eec:	edc7 7a07 	vstr	s15, [r7, #28]

    /* Calculation of sine value */
    *pSinVal = fract*temp + f1;
 8009ef0:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8009ef4:	edd7 7a07 	vldr	s15, [r7, #28]
 8009ef8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009efc:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8009f00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009f04:	68bb      	ldr	r3, [r7, #8]
 8009f06:	edc3 7a00 	vstr	s15, [r3]

    if (theta < 0.0f)
 8009f0a:	edd7 7a03 	vldr	s15, [r7, #12]
 8009f0e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009f12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f16:	d400      	bmi.n	8009f1a <arm_sin_cos_f32+0x2c6>
    {
        *pSinVal = -*pSinVal;
    }
}
 8009f18:	e007      	b.n	8009f2a <arm_sin_cos_f32+0x2d6>
        *pSinVal = -*pSinVal;
 8009f1a:	68bb      	ldr	r3, [r7, #8]
 8009f1c:	edd3 7a00 	vldr	s15, [r3]
 8009f20:	eef1 7a67 	vneg.f32	s15, s15
 8009f24:	68bb      	ldr	r3, [r7, #8]
 8009f26:	edc3 7a00 	vstr	s15, [r3]
}
 8009f2a:	bf00      	nop
 8009f2c:	3744      	adds	r7, #68	; 0x44
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f34:	4770      	bx	lr
 8009f36:	bf00      	nop
 8009f38:	3b360b61 	.word	0x3b360b61
 8009f3c:	44000000 	.word	0x44000000
 8009f40:	0800df38 	.word	0x0800df38
 8009f44:	3c490fdb 	.word	0x3c490fdb

08009f48 <arm_sin_f32>:
 * @return  sin(x).
 */

float32_t arm_sin_f32(
  float32_t x)
{
 8009f48:	b480      	push	{r7}
 8009f4a:	b08b      	sub	sp, #44	; 0x2c
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	ed87 0a01 	vstr	s0, [r7, #4]
  float32_t a, b;                                        /* Two nearest output values */
  int32_t n;
  float32_t findex;

  /* Special case for small negative inputs */
  if ((x < 0.0f) && (x >= -1.9e-7f)) {
 8009f52:	edd7 7a01 	vldr	s15, [r7, #4]
 8009f56:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009f5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f5e:	d50a      	bpl.n	8009f76 <arm_sin_f32+0x2e>
 8009f60:	edd7 7a01 	vldr	s15, [r7, #4]
 8009f64:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 800a050 <arm_sin_f32+0x108>
 8009f68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009f6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f70:	db01      	blt.n	8009f76 <arm_sin_f32+0x2e>
     return x;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	e062      	b.n	800a03c <arm_sin_f32+0xf4>
  }

  /* input x is in radians */
  /* Scale the input to [0 1] range from [0 2*PI] , divide input by 2*pi */
  in = x * 0.159154943092f;
 8009f76:	edd7 7a01 	vldr	s15, [r7, #4]
 8009f7a:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800a054 <arm_sin_f32+0x10c>
 8009f7e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009f82:	edc7 7a08 	vstr	s15, [r7, #32]

  /* Calculation of floor value of input */
  n = (int32_t) in;
 8009f86:	edd7 7a08 	vldr	s15, [r7, #32]
 8009f8a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009f8e:	ee17 3a90 	vmov	r3, s15
 8009f92:	627b      	str	r3, [r7, #36]	; 0x24

  /* Make negative values towards -infinity */
  if (x < 0.0f)
 8009f94:	edd7 7a01 	vldr	s15, [r7, #4]
 8009f98:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009f9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fa0:	d502      	bpl.n	8009fa8 <arm_sin_f32+0x60>
  {
    n--;
 8009fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fa4:	3b01      	subs	r3, #1
 8009fa6:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Map input value to [0 1] */
  in = in - (float32_t) n;
 8009fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009faa:	ee07 3a90 	vmov	s15, r3
 8009fae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009fb2:	ed97 7a08 	vldr	s14, [r7, #32]
 8009fb6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009fba:	edc7 7a08 	vstr	s15, [r7, #32]

  /* Calculation of index of the table */
  findex = (float32_t) FAST_MATH_TABLE_SIZE * in;
 8009fbe:	edd7 7a08 	vldr	s15, [r7, #32]
 8009fc2:	ed9f 7a25 	vldr	s14, [pc, #148]	; 800a058 <arm_sin_f32+0x110>
 8009fc6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009fca:	edc7 7a07 	vstr	s15, [r7, #28]

  index = ((uint16_t)findex) & 0x1ff;
 8009fce:	edd7 7a07 	vldr	s15, [r7, #28]
 8009fd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009fd6:	ee17 3a90 	vmov	r3, s15
 8009fda:	b29b      	uxth	r3, r3
 8009fdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fe0:	837b      	strh	r3, [r7, #26]

  /* fractional value calculation */
  fract = findex - (float32_t) index;
 8009fe2:	8b7b      	ldrh	r3, [r7, #26]
 8009fe4:	ee07 3a90 	vmov	s15, r3
 8009fe8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fec:	ed97 7a07 	vldr	s14, [r7, #28]
 8009ff0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009ff4:	edc7 7a05 	vstr	s15, [r7, #20]

  /* Read two nearest values of input value from the sin table */
  a = sinTable_f32[index];
 8009ff8:	8b7b      	ldrh	r3, [r7, #26]
 8009ffa:	4a18      	ldr	r2, [pc, #96]	; (800a05c <arm_sin_f32+0x114>)
 8009ffc:	009b      	lsls	r3, r3, #2
 8009ffe:	4413      	add	r3, r2
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	613b      	str	r3, [r7, #16]
  b = sinTable_f32[index+1];
 800a004:	8b7b      	ldrh	r3, [r7, #26]
 800a006:	3301      	adds	r3, #1
 800a008:	4a14      	ldr	r2, [pc, #80]	; (800a05c <arm_sin_f32+0x114>)
 800a00a:	009b      	lsls	r3, r3, #2
 800a00c:	4413      	add	r3, r2
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	60fb      	str	r3, [r7, #12]

  /* Linear interpolation process */
  sinVal = (1.0f-fract)*a + fract*b;
 800a012:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a016:	edd7 7a05 	vldr	s15, [r7, #20]
 800a01a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a01e:	edd7 7a04 	vldr	s15, [r7, #16]
 800a022:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a026:	edd7 6a05 	vldr	s13, [r7, #20]
 800a02a:	edd7 7a03 	vldr	s15, [r7, #12]
 800a02e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a032:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a036:	edc7 7a02 	vstr	s15, [r7, #8]

  /* Return the output value */
  return (sinVal);
 800a03a:	68bb      	ldr	r3, [r7, #8]
 800a03c:	ee07 3a90 	vmov	s15, r3
}
 800a040:	eeb0 0a67 	vmov.f32	s0, s15
 800a044:	372c      	adds	r7, #44	; 0x2c
 800a046:	46bd      	mov	sp, r7
 800a048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04c:	4770      	bx	lr
 800a04e:	bf00      	nop
 800a050:	b44c02cd 	.word	0xb44c02cd
 800a054:	3e22f983 	.word	0x3e22f983
 800a058:	44000000 	.word	0x44000000
 800a05c:	0800df38 	.word	0x0800df38

0800a060 <__errno>:
 800a060:	4b01      	ldr	r3, [pc, #4]	; (800a068 <__errno+0x8>)
 800a062:	6818      	ldr	r0, [r3, #0]
 800a064:	4770      	bx	lr
 800a066:	bf00      	nop
 800a068:	2000000c 	.word	0x2000000c

0800a06c <__libc_init_array>:
 800a06c:	b570      	push	{r4, r5, r6, lr}
 800a06e:	4e0d      	ldr	r6, [pc, #52]	; (800a0a4 <__libc_init_array+0x38>)
 800a070:	4c0d      	ldr	r4, [pc, #52]	; (800a0a8 <__libc_init_array+0x3c>)
 800a072:	1ba4      	subs	r4, r4, r6
 800a074:	10a4      	asrs	r4, r4, #2
 800a076:	2500      	movs	r5, #0
 800a078:	42a5      	cmp	r5, r4
 800a07a:	d109      	bne.n	800a090 <__libc_init_array+0x24>
 800a07c:	4e0b      	ldr	r6, [pc, #44]	; (800a0ac <__libc_init_array+0x40>)
 800a07e:	4c0c      	ldr	r4, [pc, #48]	; (800a0b0 <__libc_init_array+0x44>)
 800a080:	f003 ff3a 	bl	800def8 <_init>
 800a084:	1ba4      	subs	r4, r4, r6
 800a086:	10a4      	asrs	r4, r4, #2
 800a088:	2500      	movs	r5, #0
 800a08a:	42a5      	cmp	r5, r4
 800a08c:	d105      	bne.n	800a09a <__libc_init_array+0x2e>
 800a08e:	bd70      	pop	{r4, r5, r6, pc}
 800a090:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a094:	4798      	blx	r3
 800a096:	3501      	adds	r5, #1
 800a098:	e7ee      	b.n	800a078 <__libc_init_array+0xc>
 800a09a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a09e:	4798      	blx	r3
 800a0a0:	3501      	adds	r5, #1
 800a0a2:	e7f2      	b.n	800a08a <__libc_init_array+0x1e>
 800a0a4:	0800ea1c 	.word	0x0800ea1c
 800a0a8:	0800ea1c 	.word	0x0800ea1c
 800a0ac:	0800ea1c 	.word	0x0800ea1c
 800a0b0:	0800ea20 	.word	0x0800ea20

0800a0b4 <memset>:
 800a0b4:	4402      	add	r2, r0
 800a0b6:	4603      	mov	r3, r0
 800a0b8:	4293      	cmp	r3, r2
 800a0ba:	d100      	bne.n	800a0be <memset+0xa>
 800a0bc:	4770      	bx	lr
 800a0be:	f803 1b01 	strb.w	r1, [r3], #1
 800a0c2:	e7f9      	b.n	800a0b8 <memset+0x4>

0800a0c4 <__cvt>:
 800a0c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a0c8:	ec55 4b10 	vmov	r4, r5, d0
 800a0cc:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800a0ce:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a0d2:	2d00      	cmp	r5, #0
 800a0d4:	460e      	mov	r6, r1
 800a0d6:	4691      	mov	r9, r2
 800a0d8:	4619      	mov	r1, r3
 800a0da:	bfb8      	it	lt
 800a0dc:	4622      	movlt	r2, r4
 800a0de:	462b      	mov	r3, r5
 800a0e0:	f027 0720 	bic.w	r7, r7, #32
 800a0e4:	bfbb      	ittet	lt
 800a0e6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a0ea:	461d      	movlt	r5, r3
 800a0ec:	2300      	movge	r3, #0
 800a0ee:	232d      	movlt	r3, #45	; 0x2d
 800a0f0:	bfb8      	it	lt
 800a0f2:	4614      	movlt	r4, r2
 800a0f4:	2f46      	cmp	r7, #70	; 0x46
 800a0f6:	700b      	strb	r3, [r1, #0]
 800a0f8:	d004      	beq.n	800a104 <__cvt+0x40>
 800a0fa:	2f45      	cmp	r7, #69	; 0x45
 800a0fc:	d100      	bne.n	800a100 <__cvt+0x3c>
 800a0fe:	3601      	adds	r6, #1
 800a100:	2102      	movs	r1, #2
 800a102:	e000      	b.n	800a106 <__cvt+0x42>
 800a104:	2103      	movs	r1, #3
 800a106:	ab03      	add	r3, sp, #12
 800a108:	9301      	str	r3, [sp, #4]
 800a10a:	ab02      	add	r3, sp, #8
 800a10c:	9300      	str	r3, [sp, #0]
 800a10e:	4632      	mov	r2, r6
 800a110:	4653      	mov	r3, sl
 800a112:	ec45 4b10 	vmov	d0, r4, r5
 800a116:	f001 fd77 	bl	800bc08 <_dtoa_r>
 800a11a:	2f47      	cmp	r7, #71	; 0x47
 800a11c:	4680      	mov	r8, r0
 800a11e:	d102      	bne.n	800a126 <__cvt+0x62>
 800a120:	f019 0f01 	tst.w	r9, #1
 800a124:	d026      	beq.n	800a174 <__cvt+0xb0>
 800a126:	2f46      	cmp	r7, #70	; 0x46
 800a128:	eb08 0906 	add.w	r9, r8, r6
 800a12c:	d111      	bne.n	800a152 <__cvt+0x8e>
 800a12e:	f898 3000 	ldrb.w	r3, [r8]
 800a132:	2b30      	cmp	r3, #48	; 0x30
 800a134:	d10a      	bne.n	800a14c <__cvt+0x88>
 800a136:	2200      	movs	r2, #0
 800a138:	2300      	movs	r3, #0
 800a13a:	4620      	mov	r0, r4
 800a13c:	4629      	mov	r1, r5
 800a13e:	f7f6 fceb 	bl	8000b18 <__aeabi_dcmpeq>
 800a142:	b918      	cbnz	r0, 800a14c <__cvt+0x88>
 800a144:	f1c6 0601 	rsb	r6, r6, #1
 800a148:	f8ca 6000 	str.w	r6, [sl]
 800a14c:	f8da 3000 	ldr.w	r3, [sl]
 800a150:	4499      	add	r9, r3
 800a152:	2200      	movs	r2, #0
 800a154:	2300      	movs	r3, #0
 800a156:	4620      	mov	r0, r4
 800a158:	4629      	mov	r1, r5
 800a15a:	f7f6 fcdd 	bl	8000b18 <__aeabi_dcmpeq>
 800a15e:	b938      	cbnz	r0, 800a170 <__cvt+0xac>
 800a160:	2230      	movs	r2, #48	; 0x30
 800a162:	9b03      	ldr	r3, [sp, #12]
 800a164:	454b      	cmp	r3, r9
 800a166:	d205      	bcs.n	800a174 <__cvt+0xb0>
 800a168:	1c59      	adds	r1, r3, #1
 800a16a:	9103      	str	r1, [sp, #12]
 800a16c:	701a      	strb	r2, [r3, #0]
 800a16e:	e7f8      	b.n	800a162 <__cvt+0x9e>
 800a170:	f8cd 900c 	str.w	r9, [sp, #12]
 800a174:	9b03      	ldr	r3, [sp, #12]
 800a176:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a178:	eba3 0308 	sub.w	r3, r3, r8
 800a17c:	4640      	mov	r0, r8
 800a17e:	6013      	str	r3, [r2, #0]
 800a180:	b004      	add	sp, #16
 800a182:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800a186 <__exponent>:
 800a186:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a188:	2900      	cmp	r1, #0
 800a18a:	4604      	mov	r4, r0
 800a18c:	bfba      	itte	lt
 800a18e:	4249      	neglt	r1, r1
 800a190:	232d      	movlt	r3, #45	; 0x2d
 800a192:	232b      	movge	r3, #43	; 0x2b
 800a194:	2909      	cmp	r1, #9
 800a196:	f804 2b02 	strb.w	r2, [r4], #2
 800a19a:	7043      	strb	r3, [r0, #1]
 800a19c:	dd20      	ble.n	800a1e0 <__exponent+0x5a>
 800a19e:	f10d 0307 	add.w	r3, sp, #7
 800a1a2:	461f      	mov	r7, r3
 800a1a4:	260a      	movs	r6, #10
 800a1a6:	fb91 f5f6 	sdiv	r5, r1, r6
 800a1aa:	fb06 1115 	mls	r1, r6, r5, r1
 800a1ae:	3130      	adds	r1, #48	; 0x30
 800a1b0:	2d09      	cmp	r5, #9
 800a1b2:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a1b6:	f103 32ff 	add.w	r2, r3, #4294967295
 800a1ba:	4629      	mov	r1, r5
 800a1bc:	dc09      	bgt.n	800a1d2 <__exponent+0x4c>
 800a1be:	3130      	adds	r1, #48	; 0x30
 800a1c0:	3b02      	subs	r3, #2
 800a1c2:	f802 1c01 	strb.w	r1, [r2, #-1]
 800a1c6:	42bb      	cmp	r3, r7
 800a1c8:	4622      	mov	r2, r4
 800a1ca:	d304      	bcc.n	800a1d6 <__exponent+0x50>
 800a1cc:	1a10      	subs	r0, r2, r0
 800a1ce:	b003      	add	sp, #12
 800a1d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a1d2:	4613      	mov	r3, r2
 800a1d4:	e7e7      	b.n	800a1a6 <__exponent+0x20>
 800a1d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a1da:	f804 2b01 	strb.w	r2, [r4], #1
 800a1de:	e7f2      	b.n	800a1c6 <__exponent+0x40>
 800a1e0:	2330      	movs	r3, #48	; 0x30
 800a1e2:	4419      	add	r1, r3
 800a1e4:	7083      	strb	r3, [r0, #2]
 800a1e6:	1d02      	adds	r2, r0, #4
 800a1e8:	70c1      	strb	r1, [r0, #3]
 800a1ea:	e7ef      	b.n	800a1cc <__exponent+0x46>

0800a1ec <_printf_float>:
 800a1ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1f0:	b08d      	sub	sp, #52	; 0x34
 800a1f2:	460c      	mov	r4, r1
 800a1f4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800a1f8:	4616      	mov	r6, r2
 800a1fa:	461f      	mov	r7, r3
 800a1fc:	4605      	mov	r5, r0
 800a1fe:	f002 fde7 	bl	800cdd0 <_localeconv_r>
 800a202:	6803      	ldr	r3, [r0, #0]
 800a204:	9304      	str	r3, [sp, #16]
 800a206:	4618      	mov	r0, r3
 800a208:	f7f6 f80a 	bl	8000220 <strlen>
 800a20c:	2300      	movs	r3, #0
 800a20e:	930a      	str	r3, [sp, #40]	; 0x28
 800a210:	f8d8 3000 	ldr.w	r3, [r8]
 800a214:	9005      	str	r0, [sp, #20]
 800a216:	3307      	adds	r3, #7
 800a218:	f023 0307 	bic.w	r3, r3, #7
 800a21c:	f103 0208 	add.w	r2, r3, #8
 800a220:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a224:	f8d4 b000 	ldr.w	fp, [r4]
 800a228:	f8c8 2000 	str.w	r2, [r8]
 800a22c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a230:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a234:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a238:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a23c:	9307      	str	r3, [sp, #28]
 800a23e:	f8cd 8018 	str.w	r8, [sp, #24]
 800a242:	f04f 32ff 	mov.w	r2, #4294967295
 800a246:	4ba7      	ldr	r3, [pc, #668]	; (800a4e4 <_printf_float+0x2f8>)
 800a248:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a24c:	f7f6 fc96 	bl	8000b7c <__aeabi_dcmpun>
 800a250:	bb70      	cbnz	r0, 800a2b0 <_printf_float+0xc4>
 800a252:	f04f 32ff 	mov.w	r2, #4294967295
 800a256:	4ba3      	ldr	r3, [pc, #652]	; (800a4e4 <_printf_float+0x2f8>)
 800a258:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a25c:	f7f6 fc70 	bl	8000b40 <__aeabi_dcmple>
 800a260:	bb30      	cbnz	r0, 800a2b0 <_printf_float+0xc4>
 800a262:	2200      	movs	r2, #0
 800a264:	2300      	movs	r3, #0
 800a266:	4640      	mov	r0, r8
 800a268:	4649      	mov	r1, r9
 800a26a:	f7f6 fc5f 	bl	8000b2c <__aeabi_dcmplt>
 800a26e:	b110      	cbz	r0, 800a276 <_printf_float+0x8a>
 800a270:	232d      	movs	r3, #45	; 0x2d
 800a272:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a276:	4a9c      	ldr	r2, [pc, #624]	; (800a4e8 <_printf_float+0x2fc>)
 800a278:	4b9c      	ldr	r3, [pc, #624]	; (800a4ec <_printf_float+0x300>)
 800a27a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800a27e:	bf8c      	ite	hi
 800a280:	4690      	movhi	r8, r2
 800a282:	4698      	movls	r8, r3
 800a284:	2303      	movs	r3, #3
 800a286:	f02b 0204 	bic.w	r2, fp, #4
 800a28a:	6123      	str	r3, [r4, #16]
 800a28c:	6022      	str	r2, [r4, #0]
 800a28e:	f04f 0900 	mov.w	r9, #0
 800a292:	9700      	str	r7, [sp, #0]
 800a294:	4633      	mov	r3, r6
 800a296:	aa0b      	add	r2, sp, #44	; 0x2c
 800a298:	4621      	mov	r1, r4
 800a29a:	4628      	mov	r0, r5
 800a29c:	f000 f9e6 	bl	800a66c <_printf_common>
 800a2a0:	3001      	adds	r0, #1
 800a2a2:	f040 808d 	bne.w	800a3c0 <_printf_float+0x1d4>
 800a2a6:	f04f 30ff 	mov.w	r0, #4294967295
 800a2aa:	b00d      	add	sp, #52	; 0x34
 800a2ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2b0:	4642      	mov	r2, r8
 800a2b2:	464b      	mov	r3, r9
 800a2b4:	4640      	mov	r0, r8
 800a2b6:	4649      	mov	r1, r9
 800a2b8:	f7f6 fc60 	bl	8000b7c <__aeabi_dcmpun>
 800a2bc:	b110      	cbz	r0, 800a2c4 <_printf_float+0xd8>
 800a2be:	4a8c      	ldr	r2, [pc, #560]	; (800a4f0 <_printf_float+0x304>)
 800a2c0:	4b8c      	ldr	r3, [pc, #560]	; (800a4f4 <_printf_float+0x308>)
 800a2c2:	e7da      	b.n	800a27a <_printf_float+0x8e>
 800a2c4:	6861      	ldr	r1, [r4, #4]
 800a2c6:	1c4b      	adds	r3, r1, #1
 800a2c8:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800a2cc:	a80a      	add	r0, sp, #40	; 0x28
 800a2ce:	d13e      	bne.n	800a34e <_printf_float+0x162>
 800a2d0:	2306      	movs	r3, #6
 800a2d2:	6063      	str	r3, [r4, #4]
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800a2da:	ab09      	add	r3, sp, #36	; 0x24
 800a2dc:	9300      	str	r3, [sp, #0]
 800a2de:	ec49 8b10 	vmov	d0, r8, r9
 800a2e2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a2e6:	6022      	str	r2, [r4, #0]
 800a2e8:	f8cd a004 	str.w	sl, [sp, #4]
 800a2ec:	6861      	ldr	r1, [r4, #4]
 800a2ee:	4628      	mov	r0, r5
 800a2f0:	f7ff fee8 	bl	800a0c4 <__cvt>
 800a2f4:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800a2f8:	2b47      	cmp	r3, #71	; 0x47
 800a2fa:	4680      	mov	r8, r0
 800a2fc:	d109      	bne.n	800a312 <_printf_float+0x126>
 800a2fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a300:	1cd8      	adds	r0, r3, #3
 800a302:	db02      	blt.n	800a30a <_printf_float+0x11e>
 800a304:	6862      	ldr	r2, [r4, #4]
 800a306:	4293      	cmp	r3, r2
 800a308:	dd47      	ble.n	800a39a <_printf_float+0x1ae>
 800a30a:	f1aa 0a02 	sub.w	sl, sl, #2
 800a30e:	fa5f fa8a 	uxtb.w	sl, sl
 800a312:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800a316:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a318:	d824      	bhi.n	800a364 <_printf_float+0x178>
 800a31a:	3901      	subs	r1, #1
 800a31c:	4652      	mov	r2, sl
 800a31e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a322:	9109      	str	r1, [sp, #36]	; 0x24
 800a324:	f7ff ff2f 	bl	800a186 <__exponent>
 800a328:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a32a:	1813      	adds	r3, r2, r0
 800a32c:	2a01      	cmp	r2, #1
 800a32e:	4681      	mov	r9, r0
 800a330:	6123      	str	r3, [r4, #16]
 800a332:	dc02      	bgt.n	800a33a <_printf_float+0x14e>
 800a334:	6822      	ldr	r2, [r4, #0]
 800a336:	07d1      	lsls	r1, r2, #31
 800a338:	d501      	bpl.n	800a33e <_printf_float+0x152>
 800a33a:	3301      	adds	r3, #1
 800a33c:	6123      	str	r3, [r4, #16]
 800a33e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a342:	2b00      	cmp	r3, #0
 800a344:	d0a5      	beq.n	800a292 <_printf_float+0xa6>
 800a346:	232d      	movs	r3, #45	; 0x2d
 800a348:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a34c:	e7a1      	b.n	800a292 <_printf_float+0xa6>
 800a34e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800a352:	f000 8177 	beq.w	800a644 <_printf_float+0x458>
 800a356:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800a35a:	d1bb      	bne.n	800a2d4 <_printf_float+0xe8>
 800a35c:	2900      	cmp	r1, #0
 800a35e:	d1b9      	bne.n	800a2d4 <_printf_float+0xe8>
 800a360:	2301      	movs	r3, #1
 800a362:	e7b6      	b.n	800a2d2 <_printf_float+0xe6>
 800a364:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800a368:	d119      	bne.n	800a39e <_printf_float+0x1b2>
 800a36a:	2900      	cmp	r1, #0
 800a36c:	6863      	ldr	r3, [r4, #4]
 800a36e:	dd0c      	ble.n	800a38a <_printf_float+0x19e>
 800a370:	6121      	str	r1, [r4, #16]
 800a372:	b913      	cbnz	r3, 800a37a <_printf_float+0x18e>
 800a374:	6822      	ldr	r2, [r4, #0]
 800a376:	07d2      	lsls	r2, r2, #31
 800a378:	d502      	bpl.n	800a380 <_printf_float+0x194>
 800a37a:	3301      	adds	r3, #1
 800a37c:	440b      	add	r3, r1
 800a37e:	6123      	str	r3, [r4, #16]
 800a380:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a382:	65a3      	str	r3, [r4, #88]	; 0x58
 800a384:	f04f 0900 	mov.w	r9, #0
 800a388:	e7d9      	b.n	800a33e <_printf_float+0x152>
 800a38a:	b913      	cbnz	r3, 800a392 <_printf_float+0x1a6>
 800a38c:	6822      	ldr	r2, [r4, #0]
 800a38e:	07d0      	lsls	r0, r2, #31
 800a390:	d501      	bpl.n	800a396 <_printf_float+0x1aa>
 800a392:	3302      	adds	r3, #2
 800a394:	e7f3      	b.n	800a37e <_printf_float+0x192>
 800a396:	2301      	movs	r3, #1
 800a398:	e7f1      	b.n	800a37e <_printf_float+0x192>
 800a39a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800a39e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a3a2:	4293      	cmp	r3, r2
 800a3a4:	db05      	blt.n	800a3b2 <_printf_float+0x1c6>
 800a3a6:	6822      	ldr	r2, [r4, #0]
 800a3a8:	6123      	str	r3, [r4, #16]
 800a3aa:	07d1      	lsls	r1, r2, #31
 800a3ac:	d5e8      	bpl.n	800a380 <_printf_float+0x194>
 800a3ae:	3301      	adds	r3, #1
 800a3b0:	e7e5      	b.n	800a37e <_printf_float+0x192>
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	bfd4      	ite	le
 800a3b6:	f1c3 0302 	rsble	r3, r3, #2
 800a3ba:	2301      	movgt	r3, #1
 800a3bc:	4413      	add	r3, r2
 800a3be:	e7de      	b.n	800a37e <_printf_float+0x192>
 800a3c0:	6823      	ldr	r3, [r4, #0]
 800a3c2:	055a      	lsls	r2, r3, #21
 800a3c4:	d407      	bmi.n	800a3d6 <_printf_float+0x1ea>
 800a3c6:	6923      	ldr	r3, [r4, #16]
 800a3c8:	4642      	mov	r2, r8
 800a3ca:	4631      	mov	r1, r6
 800a3cc:	4628      	mov	r0, r5
 800a3ce:	47b8      	blx	r7
 800a3d0:	3001      	adds	r0, #1
 800a3d2:	d12b      	bne.n	800a42c <_printf_float+0x240>
 800a3d4:	e767      	b.n	800a2a6 <_printf_float+0xba>
 800a3d6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800a3da:	f240 80dc 	bls.w	800a596 <_printf_float+0x3aa>
 800a3de:	2200      	movs	r2, #0
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a3e6:	f7f6 fb97 	bl	8000b18 <__aeabi_dcmpeq>
 800a3ea:	2800      	cmp	r0, #0
 800a3ec:	d033      	beq.n	800a456 <_printf_float+0x26a>
 800a3ee:	2301      	movs	r3, #1
 800a3f0:	4a41      	ldr	r2, [pc, #260]	; (800a4f8 <_printf_float+0x30c>)
 800a3f2:	4631      	mov	r1, r6
 800a3f4:	4628      	mov	r0, r5
 800a3f6:	47b8      	blx	r7
 800a3f8:	3001      	adds	r0, #1
 800a3fa:	f43f af54 	beq.w	800a2a6 <_printf_float+0xba>
 800a3fe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a402:	429a      	cmp	r2, r3
 800a404:	db02      	blt.n	800a40c <_printf_float+0x220>
 800a406:	6823      	ldr	r3, [r4, #0]
 800a408:	07d8      	lsls	r0, r3, #31
 800a40a:	d50f      	bpl.n	800a42c <_printf_float+0x240>
 800a40c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a410:	4631      	mov	r1, r6
 800a412:	4628      	mov	r0, r5
 800a414:	47b8      	blx	r7
 800a416:	3001      	adds	r0, #1
 800a418:	f43f af45 	beq.w	800a2a6 <_printf_float+0xba>
 800a41c:	f04f 0800 	mov.w	r8, #0
 800a420:	f104 091a 	add.w	r9, r4, #26
 800a424:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a426:	3b01      	subs	r3, #1
 800a428:	4543      	cmp	r3, r8
 800a42a:	dc09      	bgt.n	800a440 <_printf_float+0x254>
 800a42c:	6823      	ldr	r3, [r4, #0]
 800a42e:	079b      	lsls	r3, r3, #30
 800a430:	f100 8103 	bmi.w	800a63a <_printf_float+0x44e>
 800a434:	68e0      	ldr	r0, [r4, #12]
 800a436:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a438:	4298      	cmp	r0, r3
 800a43a:	bfb8      	it	lt
 800a43c:	4618      	movlt	r0, r3
 800a43e:	e734      	b.n	800a2aa <_printf_float+0xbe>
 800a440:	2301      	movs	r3, #1
 800a442:	464a      	mov	r2, r9
 800a444:	4631      	mov	r1, r6
 800a446:	4628      	mov	r0, r5
 800a448:	47b8      	blx	r7
 800a44a:	3001      	adds	r0, #1
 800a44c:	f43f af2b 	beq.w	800a2a6 <_printf_float+0xba>
 800a450:	f108 0801 	add.w	r8, r8, #1
 800a454:	e7e6      	b.n	800a424 <_printf_float+0x238>
 800a456:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a458:	2b00      	cmp	r3, #0
 800a45a:	dc2b      	bgt.n	800a4b4 <_printf_float+0x2c8>
 800a45c:	2301      	movs	r3, #1
 800a45e:	4a26      	ldr	r2, [pc, #152]	; (800a4f8 <_printf_float+0x30c>)
 800a460:	4631      	mov	r1, r6
 800a462:	4628      	mov	r0, r5
 800a464:	47b8      	blx	r7
 800a466:	3001      	adds	r0, #1
 800a468:	f43f af1d 	beq.w	800a2a6 <_printf_float+0xba>
 800a46c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a46e:	b923      	cbnz	r3, 800a47a <_printf_float+0x28e>
 800a470:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a472:	b913      	cbnz	r3, 800a47a <_printf_float+0x28e>
 800a474:	6823      	ldr	r3, [r4, #0]
 800a476:	07d9      	lsls	r1, r3, #31
 800a478:	d5d8      	bpl.n	800a42c <_printf_float+0x240>
 800a47a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a47e:	4631      	mov	r1, r6
 800a480:	4628      	mov	r0, r5
 800a482:	47b8      	blx	r7
 800a484:	3001      	adds	r0, #1
 800a486:	f43f af0e 	beq.w	800a2a6 <_printf_float+0xba>
 800a48a:	f04f 0900 	mov.w	r9, #0
 800a48e:	f104 0a1a 	add.w	sl, r4, #26
 800a492:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a494:	425b      	negs	r3, r3
 800a496:	454b      	cmp	r3, r9
 800a498:	dc01      	bgt.n	800a49e <_printf_float+0x2b2>
 800a49a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a49c:	e794      	b.n	800a3c8 <_printf_float+0x1dc>
 800a49e:	2301      	movs	r3, #1
 800a4a0:	4652      	mov	r2, sl
 800a4a2:	4631      	mov	r1, r6
 800a4a4:	4628      	mov	r0, r5
 800a4a6:	47b8      	blx	r7
 800a4a8:	3001      	adds	r0, #1
 800a4aa:	f43f aefc 	beq.w	800a2a6 <_printf_float+0xba>
 800a4ae:	f109 0901 	add.w	r9, r9, #1
 800a4b2:	e7ee      	b.n	800a492 <_printf_float+0x2a6>
 800a4b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a4b6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a4b8:	429a      	cmp	r2, r3
 800a4ba:	bfa8      	it	ge
 800a4bc:	461a      	movge	r2, r3
 800a4be:	2a00      	cmp	r2, #0
 800a4c0:	4691      	mov	r9, r2
 800a4c2:	dd07      	ble.n	800a4d4 <_printf_float+0x2e8>
 800a4c4:	4613      	mov	r3, r2
 800a4c6:	4631      	mov	r1, r6
 800a4c8:	4642      	mov	r2, r8
 800a4ca:	4628      	mov	r0, r5
 800a4cc:	47b8      	blx	r7
 800a4ce:	3001      	adds	r0, #1
 800a4d0:	f43f aee9 	beq.w	800a2a6 <_printf_float+0xba>
 800a4d4:	f104 031a 	add.w	r3, r4, #26
 800a4d8:	f04f 0b00 	mov.w	fp, #0
 800a4dc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a4e0:	9306      	str	r3, [sp, #24]
 800a4e2:	e015      	b.n	800a510 <_printf_float+0x324>
 800a4e4:	7fefffff 	.word	0x7fefffff
 800a4e8:	0800e740 	.word	0x0800e740
 800a4ec:	0800e73c 	.word	0x0800e73c
 800a4f0:	0800e748 	.word	0x0800e748
 800a4f4:	0800e744 	.word	0x0800e744
 800a4f8:	0800e74c 	.word	0x0800e74c
 800a4fc:	2301      	movs	r3, #1
 800a4fe:	9a06      	ldr	r2, [sp, #24]
 800a500:	4631      	mov	r1, r6
 800a502:	4628      	mov	r0, r5
 800a504:	47b8      	blx	r7
 800a506:	3001      	adds	r0, #1
 800a508:	f43f aecd 	beq.w	800a2a6 <_printf_float+0xba>
 800a50c:	f10b 0b01 	add.w	fp, fp, #1
 800a510:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800a514:	ebaa 0309 	sub.w	r3, sl, r9
 800a518:	455b      	cmp	r3, fp
 800a51a:	dcef      	bgt.n	800a4fc <_printf_float+0x310>
 800a51c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a520:	429a      	cmp	r2, r3
 800a522:	44d0      	add	r8, sl
 800a524:	db15      	blt.n	800a552 <_printf_float+0x366>
 800a526:	6823      	ldr	r3, [r4, #0]
 800a528:	07da      	lsls	r2, r3, #31
 800a52a:	d412      	bmi.n	800a552 <_printf_float+0x366>
 800a52c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a52e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a530:	eba3 020a 	sub.w	r2, r3, sl
 800a534:	eba3 0a01 	sub.w	sl, r3, r1
 800a538:	4592      	cmp	sl, r2
 800a53a:	bfa8      	it	ge
 800a53c:	4692      	movge	sl, r2
 800a53e:	f1ba 0f00 	cmp.w	sl, #0
 800a542:	dc0e      	bgt.n	800a562 <_printf_float+0x376>
 800a544:	f04f 0800 	mov.w	r8, #0
 800a548:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a54c:	f104 091a 	add.w	r9, r4, #26
 800a550:	e019      	b.n	800a586 <_printf_float+0x39a>
 800a552:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a556:	4631      	mov	r1, r6
 800a558:	4628      	mov	r0, r5
 800a55a:	47b8      	blx	r7
 800a55c:	3001      	adds	r0, #1
 800a55e:	d1e5      	bne.n	800a52c <_printf_float+0x340>
 800a560:	e6a1      	b.n	800a2a6 <_printf_float+0xba>
 800a562:	4653      	mov	r3, sl
 800a564:	4642      	mov	r2, r8
 800a566:	4631      	mov	r1, r6
 800a568:	4628      	mov	r0, r5
 800a56a:	47b8      	blx	r7
 800a56c:	3001      	adds	r0, #1
 800a56e:	d1e9      	bne.n	800a544 <_printf_float+0x358>
 800a570:	e699      	b.n	800a2a6 <_printf_float+0xba>
 800a572:	2301      	movs	r3, #1
 800a574:	464a      	mov	r2, r9
 800a576:	4631      	mov	r1, r6
 800a578:	4628      	mov	r0, r5
 800a57a:	47b8      	blx	r7
 800a57c:	3001      	adds	r0, #1
 800a57e:	f43f ae92 	beq.w	800a2a6 <_printf_float+0xba>
 800a582:	f108 0801 	add.w	r8, r8, #1
 800a586:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a58a:	1a9b      	subs	r3, r3, r2
 800a58c:	eba3 030a 	sub.w	r3, r3, sl
 800a590:	4543      	cmp	r3, r8
 800a592:	dcee      	bgt.n	800a572 <_printf_float+0x386>
 800a594:	e74a      	b.n	800a42c <_printf_float+0x240>
 800a596:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a598:	2a01      	cmp	r2, #1
 800a59a:	dc01      	bgt.n	800a5a0 <_printf_float+0x3b4>
 800a59c:	07db      	lsls	r3, r3, #31
 800a59e:	d53a      	bpl.n	800a616 <_printf_float+0x42a>
 800a5a0:	2301      	movs	r3, #1
 800a5a2:	4642      	mov	r2, r8
 800a5a4:	4631      	mov	r1, r6
 800a5a6:	4628      	mov	r0, r5
 800a5a8:	47b8      	blx	r7
 800a5aa:	3001      	adds	r0, #1
 800a5ac:	f43f ae7b 	beq.w	800a2a6 <_printf_float+0xba>
 800a5b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a5b4:	4631      	mov	r1, r6
 800a5b6:	4628      	mov	r0, r5
 800a5b8:	47b8      	blx	r7
 800a5ba:	3001      	adds	r0, #1
 800a5bc:	f108 0801 	add.w	r8, r8, #1
 800a5c0:	f43f ae71 	beq.w	800a2a6 <_printf_float+0xba>
 800a5c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5c6:	2200      	movs	r2, #0
 800a5c8:	f103 3aff 	add.w	sl, r3, #4294967295
 800a5cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	f7f6 faa1 	bl	8000b18 <__aeabi_dcmpeq>
 800a5d6:	b9c8      	cbnz	r0, 800a60c <_printf_float+0x420>
 800a5d8:	4653      	mov	r3, sl
 800a5da:	4642      	mov	r2, r8
 800a5dc:	4631      	mov	r1, r6
 800a5de:	4628      	mov	r0, r5
 800a5e0:	47b8      	blx	r7
 800a5e2:	3001      	adds	r0, #1
 800a5e4:	d10e      	bne.n	800a604 <_printf_float+0x418>
 800a5e6:	e65e      	b.n	800a2a6 <_printf_float+0xba>
 800a5e8:	2301      	movs	r3, #1
 800a5ea:	4652      	mov	r2, sl
 800a5ec:	4631      	mov	r1, r6
 800a5ee:	4628      	mov	r0, r5
 800a5f0:	47b8      	blx	r7
 800a5f2:	3001      	adds	r0, #1
 800a5f4:	f43f ae57 	beq.w	800a2a6 <_printf_float+0xba>
 800a5f8:	f108 0801 	add.w	r8, r8, #1
 800a5fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5fe:	3b01      	subs	r3, #1
 800a600:	4543      	cmp	r3, r8
 800a602:	dcf1      	bgt.n	800a5e8 <_printf_float+0x3fc>
 800a604:	464b      	mov	r3, r9
 800a606:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a60a:	e6de      	b.n	800a3ca <_printf_float+0x1de>
 800a60c:	f04f 0800 	mov.w	r8, #0
 800a610:	f104 0a1a 	add.w	sl, r4, #26
 800a614:	e7f2      	b.n	800a5fc <_printf_float+0x410>
 800a616:	2301      	movs	r3, #1
 800a618:	e7df      	b.n	800a5da <_printf_float+0x3ee>
 800a61a:	2301      	movs	r3, #1
 800a61c:	464a      	mov	r2, r9
 800a61e:	4631      	mov	r1, r6
 800a620:	4628      	mov	r0, r5
 800a622:	47b8      	blx	r7
 800a624:	3001      	adds	r0, #1
 800a626:	f43f ae3e 	beq.w	800a2a6 <_printf_float+0xba>
 800a62a:	f108 0801 	add.w	r8, r8, #1
 800a62e:	68e3      	ldr	r3, [r4, #12]
 800a630:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a632:	1a9b      	subs	r3, r3, r2
 800a634:	4543      	cmp	r3, r8
 800a636:	dcf0      	bgt.n	800a61a <_printf_float+0x42e>
 800a638:	e6fc      	b.n	800a434 <_printf_float+0x248>
 800a63a:	f04f 0800 	mov.w	r8, #0
 800a63e:	f104 0919 	add.w	r9, r4, #25
 800a642:	e7f4      	b.n	800a62e <_printf_float+0x442>
 800a644:	2900      	cmp	r1, #0
 800a646:	f43f ae8b 	beq.w	800a360 <_printf_float+0x174>
 800a64a:	2300      	movs	r3, #0
 800a64c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800a650:	ab09      	add	r3, sp, #36	; 0x24
 800a652:	9300      	str	r3, [sp, #0]
 800a654:	ec49 8b10 	vmov	d0, r8, r9
 800a658:	6022      	str	r2, [r4, #0]
 800a65a:	f8cd a004 	str.w	sl, [sp, #4]
 800a65e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a662:	4628      	mov	r0, r5
 800a664:	f7ff fd2e 	bl	800a0c4 <__cvt>
 800a668:	4680      	mov	r8, r0
 800a66a:	e648      	b.n	800a2fe <_printf_float+0x112>

0800a66c <_printf_common>:
 800a66c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a670:	4691      	mov	r9, r2
 800a672:	461f      	mov	r7, r3
 800a674:	688a      	ldr	r2, [r1, #8]
 800a676:	690b      	ldr	r3, [r1, #16]
 800a678:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a67c:	4293      	cmp	r3, r2
 800a67e:	bfb8      	it	lt
 800a680:	4613      	movlt	r3, r2
 800a682:	f8c9 3000 	str.w	r3, [r9]
 800a686:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a68a:	4606      	mov	r6, r0
 800a68c:	460c      	mov	r4, r1
 800a68e:	b112      	cbz	r2, 800a696 <_printf_common+0x2a>
 800a690:	3301      	adds	r3, #1
 800a692:	f8c9 3000 	str.w	r3, [r9]
 800a696:	6823      	ldr	r3, [r4, #0]
 800a698:	0699      	lsls	r1, r3, #26
 800a69a:	bf42      	ittt	mi
 800a69c:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a6a0:	3302      	addmi	r3, #2
 800a6a2:	f8c9 3000 	strmi.w	r3, [r9]
 800a6a6:	6825      	ldr	r5, [r4, #0]
 800a6a8:	f015 0506 	ands.w	r5, r5, #6
 800a6ac:	d107      	bne.n	800a6be <_printf_common+0x52>
 800a6ae:	f104 0a19 	add.w	sl, r4, #25
 800a6b2:	68e3      	ldr	r3, [r4, #12]
 800a6b4:	f8d9 2000 	ldr.w	r2, [r9]
 800a6b8:	1a9b      	subs	r3, r3, r2
 800a6ba:	42ab      	cmp	r3, r5
 800a6bc:	dc28      	bgt.n	800a710 <_printf_common+0xa4>
 800a6be:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a6c2:	6822      	ldr	r2, [r4, #0]
 800a6c4:	3300      	adds	r3, #0
 800a6c6:	bf18      	it	ne
 800a6c8:	2301      	movne	r3, #1
 800a6ca:	0692      	lsls	r2, r2, #26
 800a6cc:	d42d      	bmi.n	800a72a <_printf_common+0xbe>
 800a6ce:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a6d2:	4639      	mov	r1, r7
 800a6d4:	4630      	mov	r0, r6
 800a6d6:	47c0      	blx	r8
 800a6d8:	3001      	adds	r0, #1
 800a6da:	d020      	beq.n	800a71e <_printf_common+0xb2>
 800a6dc:	6823      	ldr	r3, [r4, #0]
 800a6de:	68e5      	ldr	r5, [r4, #12]
 800a6e0:	f8d9 2000 	ldr.w	r2, [r9]
 800a6e4:	f003 0306 	and.w	r3, r3, #6
 800a6e8:	2b04      	cmp	r3, #4
 800a6ea:	bf08      	it	eq
 800a6ec:	1aad      	subeq	r5, r5, r2
 800a6ee:	68a3      	ldr	r3, [r4, #8]
 800a6f0:	6922      	ldr	r2, [r4, #16]
 800a6f2:	bf0c      	ite	eq
 800a6f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a6f8:	2500      	movne	r5, #0
 800a6fa:	4293      	cmp	r3, r2
 800a6fc:	bfc4      	itt	gt
 800a6fe:	1a9b      	subgt	r3, r3, r2
 800a700:	18ed      	addgt	r5, r5, r3
 800a702:	f04f 0900 	mov.w	r9, #0
 800a706:	341a      	adds	r4, #26
 800a708:	454d      	cmp	r5, r9
 800a70a:	d11a      	bne.n	800a742 <_printf_common+0xd6>
 800a70c:	2000      	movs	r0, #0
 800a70e:	e008      	b.n	800a722 <_printf_common+0xb6>
 800a710:	2301      	movs	r3, #1
 800a712:	4652      	mov	r2, sl
 800a714:	4639      	mov	r1, r7
 800a716:	4630      	mov	r0, r6
 800a718:	47c0      	blx	r8
 800a71a:	3001      	adds	r0, #1
 800a71c:	d103      	bne.n	800a726 <_printf_common+0xba>
 800a71e:	f04f 30ff 	mov.w	r0, #4294967295
 800a722:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a726:	3501      	adds	r5, #1
 800a728:	e7c3      	b.n	800a6b2 <_printf_common+0x46>
 800a72a:	18e1      	adds	r1, r4, r3
 800a72c:	1c5a      	adds	r2, r3, #1
 800a72e:	2030      	movs	r0, #48	; 0x30
 800a730:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a734:	4422      	add	r2, r4
 800a736:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a73a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a73e:	3302      	adds	r3, #2
 800a740:	e7c5      	b.n	800a6ce <_printf_common+0x62>
 800a742:	2301      	movs	r3, #1
 800a744:	4622      	mov	r2, r4
 800a746:	4639      	mov	r1, r7
 800a748:	4630      	mov	r0, r6
 800a74a:	47c0      	blx	r8
 800a74c:	3001      	adds	r0, #1
 800a74e:	d0e6      	beq.n	800a71e <_printf_common+0xb2>
 800a750:	f109 0901 	add.w	r9, r9, #1
 800a754:	e7d8      	b.n	800a708 <_printf_common+0x9c>
	...

0800a758 <_printf_i>:
 800a758:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a75c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a760:	460c      	mov	r4, r1
 800a762:	7e09      	ldrb	r1, [r1, #24]
 800a764:	b085      	sub	sp, #20
 800a766:	296e      	cmp	r1, #110	; 0x6e
 800a768:	4617      	mov	r7, r2
 800a76a:	4606      	mov	r6, r0
 800a76c:	4698      	mov	r8, r3
 800a76e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a770:	f000 80b3 	beq.w	800a8da <_printf_i+0x182>
 800a774:	d822      	bhi.n	800a7bc <_printf_i+0x64>
 800a776:	2963      	cmp	r1, #99	; 0x63
 800a778:	d036      	beq.n	800a7e8 <_printf_i+0x90>
 800a77a:	d80a      	bhi.n	800a792 <_printf_i+0x3a>
 800a77c:	2900      	cmp	r1, #0
 800a77e:	f000 80b9 	beq.w	800a8f4 <_printf_i+0x19c>
 800a782:	2958      	cmp	r1, #88	; 0x58
 800a784:	f000 8083 	beq.w	800a88e <_printf_i+0x136>
 800a788:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a78c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a790:	e032      	b.n	800a7f8 <_printf_i+0xa0>
 800a792:	2964      	cmp	r1, #100	; 0x64
 800a794:	d001      	beq.n	800a79a <_printf_i+0x42>
 800a796:	2969      	cmp	r1, #105	; 0x69
 800a798:	d1f6      	bne.n	800a788 <_printf_i+0x30>
 800a79a:	6820      	ldr	r0, [r4, #0]
 800a79c:	6813      	ldr	r3, [r2, #0]
 800a79e:	0605      	lsls	r5, r0, #24
 800a7a0:	f103 0104 	add.w	r1, r3, #4
 800a7a4:	d52a      	bpl.n	800a7fc <_printf_i+0xa4>
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	6011      	str	r1, [r2, #0]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	da03      	bge.n	800a7b6 <_printf_i+0x5e>
 800a7ae:	222d      	movs	r2, #45	; 0x2d
 800a7b0:	425b      	negs	r3, r3
 800a7b2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a7b6:	486f      	ldr	r0, [pc, #444]	; (800a974 <_printf_i+0x21c>)
 800a7b8:	220a      	movs	r2, #10
 800a7ba:	e039      	b.n	800a830 <_printf_i+0xd8>
 800a7bc:	2973      	cmp	r1, #115	; 0x73
 800a7be:	f000 809d 	beq.w	800a8fc <_printf_i+0x1a4>
 800a7c2:	d808      	bhi.n	800a7d6 <_printf_i+0x7e>
 800a7c4:	296f      	cmp	r1, #111	; 0x6f
 800a7c6:	d020      	beq.n	800a80a <_printf_i+0xb2>
 800a7c8:	2970      	cmp	r1, #112	; 0x70
 800a7ca:	d1dd      	bne.n	800a788 <_printf_i+0x30>
 800a7cc:	6823      	ldr	r3, [r4, #0]
 800a7ce:	f043 0320 	orr.w	r3, r3, #32
 800a7d2:	6023      	str	r3, [r4, #0]
 800a7d4:	e003      	b.n	800a7de <_printf_i+0x86>
 800a7d6:	2975      	cmp	r1, #117	; 0x75
 800a7d8:	d017      	beq.n	800a80a <_printf_i+0xb2>
 800a7da:	2978      	cmp	r1, #120	; 0x78
 800a7dc:	d1d4      	bne.n	800a788 <_printf_i+0x30>
 800a7de:	2378      	movs	r3, #120	; 0x78
 800a7e0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a7e4:	4864      	ldr	r0, [pc, #400]	; (800a978 <_printf_i+0x220>)
 800a7e6:	e055      	b.n	800a894 <_printf_i+0x13c>
 800a7e8:	6813      	ldr	r3, [r2, #0]
 800a7ea:	1d19      	adds	r1, r3, #4
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	6011      	str	r1, [r2, #0]
 800a7f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a7f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a7f8:	2301      	movs	r3, #1
 800a7fa:	e08c      	b.n	800a916 <_printf_i+0x1be>
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	6011      	str	r1, [r2, #0]
 800a800:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a804:	bf18      	it	ne
 800a806:	b21b      	sxthne	r3, r3
 800a808:	e7cf      	b.n	800a7aa <_printf_i+0x52>
 800a80a:	6813      	ldr	r3, [r2, #0]
 800a80c:	6825      	ldr	r5, [r4, #0]
 800a80e:	1d18      	adds	r0, r3, #4
 800a810:	6010      	str	r0, [r2, #0]
 800a812:	0628      	lsls	r0, r5, #24
 800a814:	d501      	bpl.n	800a81a <_printf_i+0xc2>
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	e002      	b.n	800a820 <_printf_i+0xc8>
 800a81a:	0668      	lsls	r0, r5, #25
 800a81c:	d5fb      	bpl.n	800a816 <_printf_i+0xbe>
 800a81e:	881b      	ldrh	r3, [r3, #0]
 800a820:	4854      	ldr	r0, [pc, #336]	; (800a974 <_printf_i+0x21c>)
 800a822:	296f      	cmp	r1, #111	; 0x6f
 800a824:	bf14      	ite	ne
 800a826:	220a      	movne	r2, #10
 800a828:	2208      	moveq	r2, #8
 800a82a:	2100      	movs	r1, #0
 800a82c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a830:	6865      	ldr	r5, [r4, #4]
 800a832:	60a5      	str	r5, [r4, #8]
 800a834:	2d00      	cmp	r5, #0
 800a836:	f2c0 8095 	blt.w	800a964 <_printf_i+0x20c>
 800a83a:	6821      	ldr	r1, [r4, #0]
 800a83c:	f021 0104 	bic.w	r1, r1, #4
 800a840:	6021      	str	r1, [r4, #0]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d13d      	bne.n	800a8c2 <_printf_i+0x16a>
 800a846:	2d00      	cmp	r5, #0
 800a848:	f040 808e 	bne.w	800a968 <_printf_i+0x210>
 800a84c:	4665      	mov	r5, ip
 800a84e:	2a08      	cmp	r2, #8
 800a850:	d10b      	bne.n	800a86a <_printf_i+0x112>
 800a852:	6823      	ldr	r3, [r4, #0]
 800a854:	07db      	lsls	r3, r3, #31
 800a856:	d508      	bpl.n	800a86a <_printf_i+0x112>
 800a858:	6923      	ldr	r3, [r4, #16]
 800a85a:	6862      	ldr	r2, [r4, #4]
 800a85c:	429a      	cmp	r2, r3
 800a85e:	bfde      	ittt	le
 800a860:	2330      	movle	r3, #48	; 0x30
 800a862:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a866:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a86a:	ebac 0305 	sub.w	r3, ip, r5
 800a86e:	6123      	str	r3, [r4, #16]
 800a870:	f8cd 8000 	str.w	r8, [sp]
 800a874:	463b      	mov	r3, r7
 800a876:	aa03      	add	r2, sp, #12
 800a878:	4621      	mov	r1, r4
 800a87a:	4630      	mov	r0, r6
 800a87c:	f7ff fef6 	bl	800a66c <_printf_common>
 800a880:	3001      	adds	r0, #1
 800a882:	d14d      	bne.n	800a920 <_printf_i+0x1c8>
 800a884:	f04f 30ff 	mov.w	r0, #4294967295
 800a888:	b005      	add	sp, #20
 800a88a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a88e:	4839      	ldr	r0, [pc, #228]	; (800a974 <_printf_i+0x21c>)
 800a890:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a894:	6813      	ldr	r3, [r2, #0]
 800a896:	6821      	ldr	r1, [r4, #0]
 800a898:	1d1d      	adds	r5, r3, #4
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	6015      	str	r5, [r2, #0]
 800a89e:	060a      	lsls	r2, r1, #24
 800a8a0:	d50b      	bpl.n	800a8ba <_printf_i+0x162>
 800a8a2:	07ca      	lsls	r2, r1, #31
 800a8a4:	bf44      	itt	mi
 800a8a6:	f041 0120 	orrmi.w	r1, r1, #32
 800a8aa:	6021      	strmi	r1, [r4, #0]
 800a8ac:	b91b      	cbnz	r3, 800a8b6 <_printf_i+0x15e>
 800a8ae:	6822      	ldr	r2, [r4, #0]
 800a8b0:	f022 0220 	bic.w	r2, r2, #32
 800a8b4:	6022      	str	r2, [r4, #0]
 800a8b6:	2210      	movs	r2, #16
 800a8b8:	e7b7      	b.n	800a82a <_printf_i+0xd2>
 800a8ba:	064d      	lsls	r5, r1, #25
 800a8bc:	bf48      	it	mi
 800a8be:	b29b      	uxthmi	r3, r3
 800a8c0:	e7ef      	b.n	800a8a2 <_printf_i+0x14a>
 800a8c2:	4665      	mov	r5, ip
 800a8c4:	fbb3 f1f2 	udiv	r1, r3, r2
 800a8c8:	fb02 3311 	mls	r3, r2, r1, r3
 800a8cc:	5cc3      	ldrb	r3, [r0, r3]
 800a8ce:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a8d2:	460b      	mov	r3, r1
 800a8d4:	2900      	cmp	r1, #0
 800a8d6:	d1f5      	bne.n	800a8c4 <_printf_i+0x16c>
 800a8d8:	e7b9      	b.n	800a84e <_printf_i+0xf6>
 800a8da:	6813      	ldr	r3, [r2, #0]
 800a8dc:	6825      	ldr	r5, [r4, #0]
 800a8de:	6961      	ldr	r1, [r4, #20]
 800a8e0:	1d18      	adds	r0, r3, #4
 800a8e2:	6010      	str	r0, [r2, #0]
 800a8e4:	0628      	lsls	r0, r5, #24
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	d501      	bpl.n	800a8ee <_printf_i+0x196>
 800a8ea:	6019      	str	r1, [r3, #0]
 800a8ec:	e002      	b.n	800a8f4 <_printf_i+0x19c>
 800a8ee:	066a      	lsls	r2, r5, #25
 800a8f0:	d5fb      	bpl.n	800a8ea <_printf_i+0x192>
 800a8f2:	8019      	strh	r1, [r3, #0]
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	6123      	str	r3, [r4, #16]
 800a8f8:	4665      	mov	r5, ip
 800a8fa:	e7b9      	b.n	800a870 <_printf_i+0x118>
 800a8fc:	6813      	ldr	r3, [r2, #0]
 800a8fe:	1d19      	adds	r1, r3, #4
 800a900:	6011      	str	r1, [r2, #0]
 800a902:	681d      	ldr	r5, [r3, #0]
 800a904:	6862      	ldr	r2, [r4, #4]
 800a906:	2100      	movs	r1, #0
 800a908:	4628      	mov	r0, r5
 800a90a:	f7f5 fc91 	bl	8000230 <memchr>
 800a90e:	b108      	cbz	r0, 800a914 <_printf_i+0x1bc>
 800a910:	1b40      	subs	r0, r0, r5
 800a912:	6060      	str	r0, [r4, #4]
 800a914:	6863      	ldr	r3, [r4, #4]
 800a916:	6123      	str	r3, [r4, #16]
 800a918:	2300      	movs	r3, #0
 800a91a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a91e:	e7a7      	b.n	800a870 <_printf_i+0x118>
 800a920:	6923      	ldr	r3, [r4, #16]
 800a922:	462a      	mov	r2, r5
 800a924:	4639      	mov	r1, r7
 800a926:	4630      	mov	r0, r6
 800a928:	47c0      	blx	r8
 800a92a:	3001      	adds	r0, #1
 800a92c:	d0aa      	beq.n	800a884 <_printf_i+0x12c>
 800a92e:	6823      	ldr	r3, [r4, #0]
 800a930:	079b      	lsls	r3, r3, #30
 800a932:	d413      	bmi.n	800a95c <_printf_i+0x204>
 800a934:	68e0      	ldr	r0, [r4, #12]
 800a936:	9b03      	ldr	r3, [sp, #12]
 800a938:	4298      	cmp	r0, r3
 800a93a:	bfb8      	it	lt
 800a93c:	4618      	movlt	r0, r3
 800a93e:	e7a3      	b.n	800a888 <_printf_i+0x130>
 800a940:	2301      	movs	r3, #1
 800a942:	464a      	mov	r2, r9
 800a944:	4639      	mov	r1, r7
 800a946:	4630      	mov	r0, r6
 800a948:	47c0      	blx	r8
 800a94a:	3001      	adds	r0, #1
 800a94c:	d09a      	beq.n	800a884 <_printf_i+0x12c>
 800a94e:	3501      	adds	r5, #1
 800a950:	68e3      	ldr	r3, [r4, #12]
 800a952:	9a03      	ldr	r2, [sp, #12]
 800a954:	1a9b      	subs	r3, r3, r2
 800a956:	42ab      	cmp	r3, r5
 800a958:	dcf2      	bgt.n	800a940 <_printf_i+0x1e8>
 800a95a:	e7eb      	b.n	800a934 <_printf_i+0x1dc>
 800a95c:	2500      	movs	r5, #0
 800a95e:	f104 0919 	add.w	r9, r4, #25
 800a962:	e7f5      	b.n	800a950 <_printf_i+0x1f8>
 800a964:	2b00      	cmp	r3, #0
 800a966:	d1ac      	bne.n	800a8c2 <_printf_i+0x16a>
 800a968:	7803      	ldrb	r3, [r0, #0]
 800a96a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a96e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a972:	e76c      	b.n	800a84e <_printf_i+0xf6>
 800a974:	0800e74e 	.word	0x0800e74e
 800a978:	0800e75f 	.word	0x0800e75f

0800a97c <_scanf_float>:
 800a97c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a980:	469a      	mov	sl, r3
 800a982:	688b      	ldr	r3, [r1, #8]
 800a984:	4616      	mov	r6, r2
 800a986:	1e5a      	subs	r2, r3, #1
 800a988:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a98c:	b087      	sub	sp, #28
 800a98e:	bf83      	ittte	hi
 800a990:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800a994:	189b      	addhi	r3, r3, r2
 800a996:	9301      	strhi	r3, [sp, #4]
 800a998:	2300      	movls	r3, #0
 800a99a:	bf86      	itte	hi
 800a99c:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a9a0:	608b      	strhi	r3, [r1, #8]
 800a9a2:	9301      	strls	r3, [sp, #4]
 800a9a4:	680b      	ldr	r3, [r1, #0]
 800a9a6:	4688      	mov	r8, r1
 800a9a8:	f04f 0b00 	mov.w	fp, #0
 800a9ac:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800a9b0:	f848 3b1c 	str.w	r3, [r8], #28
 800a9b4:	e9cd bb03 	strd	fp, fp, [sp, #12]
 800a9b8:	4607      	mov	r7, r0
 800a9ba:	460c      	mov	r4, r1
 800a9bc:	4645      	mov	r5, r8
 800a9be:	465a      	mov	r2, fp
 800a9c0:	46d9      	mov	r9, fp
 800a9c2:	f8cd b008 	str.w	fp, [sp, #8]
 800a9c6:	68a1      	ldr	r1, [r4, #8]
 800a9c8:	b181      	cbz	r1, 800a9ec <_scanf_float+0x70>
 800a9ca:	6833      	ldr	r3, [r6, #0]
 800a9cc:	781b      	ldrb	r3, [r3, #0]
 800a9ce:	2b49      	cmp	r3, #73	; 0x49
 800a9d0:	d071      	beq.n	800aab6 <_scanf_float+0x13a>
 800a9d2:	d84d      	bhi.n	800aa70 <_scanf_float+0xf4>
 800a9d4:	2b39      	cmp	r3, #57	; 0x39
 800a9d6:	d840      	bhi.n	800aa5a <_scanf_float+0xde>
 800a9d8:	2b31      	cmp	r3, #49	; 0x31
 800a9da:	f080 8088 	bcs.w	800aaee <_scanf_float+0x172>
 800a9de:	2b2d      	cmp	r3, #45	; 0x2d
 800a9e0:	f000 8090 	beq.w	800ab04 <_scanf_float+0x188>
 800a9e4:	d815      	bhi.n	800aa12 <_scanf_float+0x96>
 800a9e6:	2b2b      	cmp	r3, #43	; 0x2b
 800a9e8:	f000 808c 	beq.w	800ab04 <_scanf_float+0x188>
 800a9ec:	f1b9 0f00 	cmp.w	r9, #0
 800a9f0:	d003      	beq.n	800a9fa <_scanf_float+0x7e>
 800a9f2:	6823      	ldr	r3, [r4, #0]
 800a9f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a9f8:	6023      	str	r3, [r4, #0]
 800a9fa:	3a01      	subs	r2, #1
 800a9fc:	2a01      	cmp	r2, #1
 800a9fe:	f200 80ea 	bhi.w	800abd6 <_scanf_float+0x25a>
 800aa02:	4545      	cmp	r5, r8
 800aa04:	f200 80dc 	bhi.w	800abc0 <_scanf_float+0x244>
 800aa08:	2601      	movs	r6, #1
 800aa0a:	4630      	mov	r0, r6
 800aa0c:	b007      	add	sp, #28
 800aa0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa12:	2b2e      	cmp	r3, #46	; 0x2e
 800aa14:	f000 809f 	beq.w	800ab56 <_scanf_float+0x1da>
 800aa18:	2b30      	cmp	r3, #48	; 0x30
 800aa1a:	d1e7      	bne.n	800a9ec <_scanf_float+0x70>
 800aa1c:	6820      	ldr	r0, [r4, #0]
 800aa1e:	f410 7f80 	tst.w	r0, #256	; 0x100
 800aa22:	d064      	beq.n	800aaee <_scanf_float+0x172>
 800aa24:	9b01      	ldr	r3, [sp, #4]
 800aa26:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800aa2a:	6020      	str	r0, [r4, #0]
 800aa2c:	f109 0901 	add.w	r9, r9, #1
 800aa30:	b11b      	cbz	r3, 800aa3a <_scanf_float+0xbe>
 800aa32:	3b01      	subs	r3, #1
 800aa34:	3101      	adds	r1, #1
 800aa36:	9301      	str	r3, [sp, #4]
 800aa38:	60a1      	str	r1, [r4, #8]
 800aa3a:	68a3      	ldr	r3, [r4, #8]
 800aa3c:	3b01      	subs	r3, #1
 800aa3e:	60a3      	str	r3, [r4, #8]
 800aa40:	6923      	ldr	r3, [r4, #16]
 800aa42:	3301      	adds	r3, #1
 800aa44:	6123      	str	r3, [r4, #16]
 800aa46:	6873      	ldr	r3, [r6, #4]
 800aa48:	3b01      	subs	r3, #1
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	6073      	str	r3, [r6, #4]
 800aa4e:	f340 80ac 	ble.w	800abaa <_scanf_float+0x22e>
 800aa52:	6833      	ldr	r3, [r6, #0]
 800aa54:	3301      	adds	r3, #1
 800aa56:	6033      	str	r3, [r6, #0]
 800aa58:	e7b5      	b.n	800a9c6 <_scanf_float+0x4a>
 800aa5a:	2b45      	cmp	r3, #69	; 0x45
 800aa5c:	f000 8085 	beq.w	800ab6a <_scanf_float+0x1ee>
 800aa60:	2b46      	cmp	r3, #70	; 0x46
 800aa62:	d06a      	beq.n	800ab3a <_scanf_float+0x1be>
 800aa64:	2b41      	cmp	r3, #65	; 0x41
 800aa66:	d1c1      	bne.n	800a9ec <_scanf_float+0x70>
 800aa68:	2a01      	cmp	r2, #1
 800aa6a:	d1bf      	bne.n	800a9ec <_scanf_float+0x70>
 800aa6c:	2202      	movs	r2, #2
 800aa6e:	e046      	b.n	800aafe <_scanf_float+0x182>
 800aa70:	2b65      	cmp	r3, #101	; 0x65
 800aa72:	d07a      	beq.n	800ab6a <_scanf_float+0x1ee>
 800aa74:	d818      	bhi.n	800aaa8 <_scanf_float+0x12c>
 800aa76:	2b54      	cmp	r3, #84	; 0x54
 800aa78:	d066      	beq.n	800ab48 <_scanf_float+0x1cc>
 800aa7a:	d811      	bhi.n	800aaa0 <_scanf_float+0x124>
 800aa7c:	2b4e      	cmp	r3, #78	; 0x4e
 800aa7e:	d1b5      	bne.n	800a9ec <_scanf_float+0x70>
 800aa80:	2a00      	cmp	r2, #0
 800aa82:	d146      	bne.n	800ab12 <_scanf_float+0x196>
 800aa84:	f1b9 0f00 	cmp.w	r9, #0
 800aa88:	d145      	bne.n	800ab16 <_scanf_float+0x19a>
 800aa8a:	6821      	ldr	r1, [r4, #0]
 800aa8c:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800aa90:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800aa94:	d13f      	bne.n	800ab16 <_scanf_float+0x19a>
 800aa96:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800aa9a:	6021      	str	r1, [r4, #0]
 800aa9c:	2201      	movs	r2, #1
 800aa9e:	e02e      	b.n	800aafe <_scanf_float+0x182>
 800aaa0:	2b59      	cmp	r3, #89	; 0x59
 800aaa2:	d01e      	beq.n	800aae2 <_scanf_float+0x166>
 800aaa4:	2b61      	cmp	r3, #97	; 0x61
 800aaa6:	e7de      	b.n	800aa66 <_scanf_float+0xea>
 800aaa8:	2b6e      	cmp	r3, #110	; 0x6e
 800aaaa:	d0e9      	beq.n	800aa80 <_scanf_float+0x104>
 800aaac:	d815      	bhi.n	800aada <_scanf_float+0x15e>
 800aaae:	2b66      	cmp	r3, #102	; 0x66
 800aab0:	d043      	beq.n	800ab3a <_scanf_float+0x1be>
 800aab2:	2b69      	cmp	r3, #105	; 0x69
 800aab4:	d19a      	bne.n	800a9ec <_scanf_float+0x70>
 800aab6:	f1bb 0f00 	cmp.w	fp, #0
 800aaba:	d138      	bne.n	800ab2e <_scanf_float+0x1b2>
 800aabc:	f1b9 0f00 	cmp.w	r9, #0
 800aac0:	d197      	bne.n	800a9f2 <_scanf_float+0x76>
 800aac2:	6821      	ldr	r1, [r4, #0]
 800aac4:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800aac8:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800aacc:	d195      	bne.n	800a9fa <_scanf_float+0x7e>
 800aace:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800aad2:	6021      	str	r1, [r4, #0]
 800aad4:	f04f 0b01 	mov.w	fp, #1
 800aad8:	e011      	b.n	800aafe <_scanf_float+0x182>
 800aada:	2b74      	cmp	r3, #116	; 0x74
 800aadc:	d034      	beq.n	800ab48 <_scanf_float+0x1cc>
 800aade:	2b79      	cmp	r3, #121	; 0x79
 800aae0:	d184      	bne.n	800a9ec <_scanf_float+0x70>
 800aae2:	f1bb 0f07 	cmp.w	fp, #7
 800aae6:	d181      	bne.n	800a9ec <_scanf_float+0x70>
 800aae8:	f04f 0b08 	mov.w	fp, #8
 800aaec:	e007      	b.n	800aafe <_scanf_float+0x182>
 800aaee:	eb12 0f0b 	cmn.w	r2, fp
 800aaf2:	f47f af7b 	bne.w	800a9ec <_scanf_float+0x70>
 800aaf6:	6821      	ldr	r1, [r4, #0]
 800aaf8:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 800aafc:	6021      	str	r1, [r4, #0]
 800aafe:	702b      	strb	r3, [r5, #0]
 800ab00:	3501      	adds	r5, #1
 800ab02:	e79a      	b.n	800aa3a <_scanf_float+0xbe>
 800ab04:	6821      	ldr	r1, [r4, #0]
 800ab06:	0608      	lsls	r0, r1, #24
 800ab08:	f57f af70 	bpl.w	800a9ec <_scanf_float+0x70>
 800ab0c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800ab10:	e7f4      	b.n	800aafc <_scanf_float+0x180>
 800ab12:	2a02      	cmp	r2, #2
 800ab14:	d047      	beq.n	800aba6 <_scanf_float+0x22a>
 800ab16:	f1bb 0f01 	cmp.w	fp, #1
 800ab1a:	d003      	beq.n	800ab24 <_scanf_float+0x1a8>
 800ab1c:	f1bb 0f04 	cmp.w	fp, #4
 800ab20:	f47f af64 	bne.w	800a9ec <_scanf_float+0x70>
 800ab24:	f10b 0b01 	add.w	fp, fp, #1
 800ab28:	fa5f fb8b 	uxtb.w	fp, fp
 800ab2c:	e7e7      	b.n	800aafe <_scanf_float+0x182>
 800ab2e:	f1bb 0f03 	cmp.w	fp, #3
 800ab32:	d0f7      	beq.n	800ab24 <_scanf_float+0x1a8>
 800ab34:	f1bb 0f05 	cmp.w	fp, #5
 800ab38:	e7f2      	b.n	800ab20 <_scanf_float+0x1a4>
 800ab3a:	f1bb 0f02 	cmp.w	fp, #2
 800ab3e:	f47f af55 	bne.w	800a9ec <_scanf_float+0x70>
 800ab42:	f04f 0b03 	mov.w	fp, #3
 800ab46:	e7da      	b.n	800aafe <_scanf_float+0x182>
 800ab48:	f1bb 0f06 	cmp.w	fp, #6
 800ab4c:	f47f af4e 	bne.w	800a9ec <_scanf_float+0x70>
 800ab50:	f04f 0b07 	mov.w	fp, #7
 800ab54:	e7d3      	b.n	800aafe <_scanf_float+0x182>
 800ab56:	6821      	ldr	r1, [r4, #0]
 800ab58:	0588      	lsls	r0, r1, #22
 800ab5a:	f57f af47 	bpl.w	800a9ec <_scanf_float+0x70>
 800ab5e:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800ab62:	6021      	str	r1, [r4, #0]
 800ab64:	f8cd 9008 	str.w	r9, [sp, #8]
 800ab68:	e7c9      	b.n	800aafe <_scanf_float+0x182>
 800ab6a:	6821      	ldr	r1, [r4, #0]
 800ab6c:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800ab70:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800ab74:	d006      	beq.n	800ab84 <_scanf_float+0x208>
 800ab76:	0548      	lsls	r0, r1, #21
 800ab78:	f57f af38 	bpl.w	800a9ec <_scanf_float+0x70>
 800ab7c:	f1b9 0f00 	cmp.w	r9, #0
 800ab80:	f43f af3b 	beq.w	800a9fa <_scanf_float+0x7e>
 800ab84:	0588      	lsls	r0, r1, #22
 800ab86:	bf58      	it	pl
 800ab88:	9802      	ldrpl	r0, [sp, #8]
 800ab8a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800ab8e:	bf58      	it	pl
 800ab90:	eba9 0000 	subpl.w	r0, r9, r0
 800ab94:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800ab98:	bf58      	it	pl
 800ab9a:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800ab9e:	6021      	str	r1, [r4, #0]
 800aba0:	f04f 0900 	mov.w	r9, #0
 800aba4:	e7ab      	b.n	800aafe <_scanf_float+0x182>
 800aba6:	2203      	movs	r2, #3
 800aba8:	e7a9      	b.n	800aafe <_scanf_float+0x182>
 800abaa:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800abae:	9205      	str	r2, [sp, #20]
 800abb0:	4631      	mov	r1, r6
 800abb2:	4638      	mov	r0, r7
 800abb4:	4798      	blx	r3
 800abb6:	9a05      	ldr	r2, [sp, #20]
 800abb8:	2800      	cmp	r0, #0
 800abba:	f43f af04 	beq.w	800a9c6 <_scanf_float+0x4a>
 800abbe:	e715      	b.n	800a9ec <_scanf_float+0x70>
 800abc0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800abc4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800abc8:	4632      	mov	r2, r6
 800abca:	4638      	mov	r0, r7
 800abcc:	4798      	blx	r3
 800abce:	6923      	ldr	r3, [r4, #16]
 800abd0:	3b01      	subs	r3, #1
 800abd2:	6123      	str	r3, [r4, #16]
 800abd4:	e715      	b.n	800aa02 <_scanf_float+0x86>
 800abd6:	f10b 33ff 	add.w	r3, fp, #4294967295
 800abda:	2b06      	cmp	r3, #6
 800abdc:	d80a      	bhi.n	800abf4 <_scanf_float+0x278>
 800abde:	f1bb 0f02 	cmp.w	fp, #2
 800abe2:	d968      	bls.n	800acb6 <_scanf_float+0x33a>
 800abe4:	f1ab 0b03 	sub.w	fp, fp, #3
 800abe8:	fa5f fb8b 	uxtb.w	fp, fp
 800abec:	eba5 0b0b 	sub.w	fp, r5, fp
 800abf0:	455d      	cmp	r5, fp
 800abf2:	d14b      	bne.n	800ac8c <_scanf_float+0x310>
 800abf4:	6823      	ldr	r3, [r4, #0]
 800abf6:	05da      	lsls	r2, r3, #23
 800abf8:	d51f      	bpl.n	800ac3a <_scanf_float+0x2be>
 800abfa:	055b      	lsls	r3, r3, #21
 800abfc:	d468      	bmi.n	800acd0 <_scanf_float+0x354>
 800abfe:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800ac02:	6923      	ldr	r3, [r4, #16]
 800ac04:	2965      	cmp	r1, #101	; 0x65
 800ac06:	f103 33ff 	add.w	r3, r3, #4294967295
 800ac0a:	f105 3bff 	add.w	fp, r5, #4294967295
 800ac0e:	6123      	str	r3, [r4, #16]
 800ac10:	d00d      	beq.n	800ac2e <_scanf_float+0x2b2>
 800ac12:	2945      	cmp	r1, #69	; 0x45
 800ac14:	d00b      	beq.n	800ac2e <_scanf_float+0x2b2>
 800ac16:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ac1a:	4632      	mov	r2, r6
 800ac1c:	4638      	mov	r0, r7
 800ac1e:	4798      	blx	r3
 800ac20:	6923      	ldr	r3, [r4, #16]
 800ac22:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800ac26:	3b01      	subs	r3, #1
 800ac28:	f1a5 0b02 	sub.w	fp, r5, #2
 800ac2c:	6123      	str	r3, [r4, #16]
 800ac2e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ac32:	4632      	mov	r2, r6
 800ac34:	4638      	mov	r0, r7
 800ac36:	4798      	blx	r3
 800ac38:	465d      	mov	r5, fp
 800ac3a:	6826      	ldr	r6, [r4, #0]
 800ac3c:	f016 0610 	ands.w	r6, r6, #16
 800ac40:	d17a      	bne.n	800ad38 <_scanf_float+0x3bc>
 800ac42:	702e      	strb	r6, [r5, #0]
 800ac44:	6823      	ldr	r3, [r4, #0]
 800ac46:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ac4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ac4e:	d142      	bne.n	800acd6 <_scanf_float+0x35a>
 800ac50:	9b02      	ldr	r3, [sp, #8]
 800ac52:	eba9 0303 	sub.w	r3, r9, r3
 800ac56:	425a      	negs	r2, r3
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d149      	bne.n	800acf0 <_scanf_float+0x374>
 800ac5c:	2200      	movs	r2, #0
 800ac5e:	4641      	mov	r1, r8
 800ac60:	4638      	mov	r0, r7
 800ac62:	f000 fea5 	bl	800b9b0 <_strtod_r>
 800ac66:	6825      	ldr	r5, [r4, #0]
 800ac68:	f8da 3000 	ldr.w	r3, [sl]
 800ac6c:	f015 0f02 	tst.w	r5, #2
 800ac70:	f103 0204 	add.w	r2, r3, #4
 800ac74:	ec59 8b10 	vmov	r8, r9, d0
 800ac78:	f8ca 2000 	str.w	r2, [sl]
 800ac7c:	d043      	beq.n	800ad06 <_scanf_float+0x38a>
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	e9c3 8900 	strd	r8, r9, [r3]
 800ac84:	68e3      	ldr	r3, [r4, #12]
 800ac86:	3301      	adds	r3, #1
 800ac88:	60e3      	str	r3, [r4, #12]
 800ac8a:	e6be      	b.n	800aa0a <_scanf_float+0x8e>
 800ac8c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ac90:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800ac94:	4632      	mov	r2, r6
 800ac96:	4638      	mov	r0, r7
 800ac98:	4798      	blx	r3
 800ac9a:	6923      	ldr	r3, [r4, #16]
 800ac9c:	3b01      	subs	r3, #1
 800ac9e:	6123      	str	r3, [r4, #16]
 800aca0:	e7a6      	b.n	800abf0 <_scanf_float+0x274>
 800aca2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800aca6:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800acaa:	4632      	mov	r2, r6
 800acac:	4638      	mov	r0, r7
 800acae:	4798      	blx	r3
 800acb0:	6923      	ldr	r3, [r4, #16]
 800acb2:	3b01      	subs	r3, #1
 800acb4:	6123      	str	r3, [r4, #16]
 800acb6:	4545      	cmp	r5, r8
 800acb8:	d8f3      	bhi.n	800aca2 <_scanf_float+0x326>
 800acba:	e6a5      	b.n	800aa08 <_scanf_float+0x8c>
 800acbc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800acc0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800acc4:	4632      	mov	r2, r6
 800acc6:	4638      	mov	r0, r7
 800acc8:	4798      	blx	r3
 800acca:	6923      	ldr	r3, [r4, #16]
 800accc:	3b01      	subs	r3, #1
 800acce:	6123      	str	r3, [r4, #16]
 800acd0:	4545      	cmp	r5, r8
 800acd2:	d8f3      	bhi.n	800acbc <_scanf_float+0x340>
 800acd4:	e698      	b.n	800aa08 <_scanf_float+0x8c>
 800acd6:	9b03      	ldr	r3, [sp, #12]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d0bf      	beq.n	800ac5c <_scanf_float+0x2e0>
 800acdc:	9904      	ldr	r1, [sp, #16]
 800acde:	230a      	movs	r3, #10
 800ace0:	4632      	mov	r2, r6
 800ace2:	3101      	adds	r1, #1
 800ace4:	4638      	mov	r0, r7
 800ace6:	f000 feef 	bl	800bac8 <_strtol_r>
 800acea:	9b03      	ldr	r3, [sp, #12]
 800acec:	9d04      	ldr	r5, [sp, #16]
 800acee:	1ac2      	subs	r2, r0, r3
 800acf0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800acf4:	429d      	cmp	r5, r3
 800acf6:	bf28      	it	cs
 800acf8:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 800acfc:	490f      	ldr	r1, [pc, #60]	; (800ad3c <_scanf_float+0x3c0>)
 800acfe:	4628      	mov	r0, r5
 800ad00:	f000 f824 	bl	800ad4c <siprintf>
 800ad04:	e7aa      	b.n	800ac5c <_scanf_float+0x2e0>
 800ad06:	f015 0504 	ands.w	r5, r5, #4
 800ad0a:	d1b8      	bne.n	800ac7e <_scanf_float+0x302>
 800ad0c:	681f      	ldr	r7, [r3, #0]
 800ad0e:	ee10 2a10 	vmov	r2, s0
 800ad12:	464b      	mov	r3, r9
 800ad14:	ee10 0a10 	vmov	r0, s0
 800ad18:	4649      	mov	r1, r9
 800ad1a:	f7f5 ff2f 	bl	8000b7c <__aeabi_dcmpun>
 800ad1e:	b128      	cbz	r0, 800ad2c <_scanf_float+0x3b0>
 800ad20:	4628      	mov	r0, r5
 800ad22:	f000 f80d 	bl	800ad40 <nanf>
 800ad26:	ed87 0a00 	vstr	s0, [r7]
 800ad2a:	e7ab      	b.n	800ac84 <_scanf_float+0x308>
 800ad2c:	4640      	mov	r0, r8
 800ad2e:	4649      	mov	r1, r9
 800ad30:	f7f5 ff82 	bl	8000c38 <__aeabi_d2f>
 800ad34:	6038      	str	r0, [r7, #0]
 800ad36:	e7a5      	b.n	800ac84 <_scanf_float+0x308>
 800ad38:	2600      	movs	r6, #0
 800ad3a:	e666      	b.n	800aa0a <_scanf_float+0x8e>
 800ad3c:	0800e770 	.word	0x0800e770

0800ad40 <nanf>:
 800ad40:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ad48 <nanf+0x8>
 800ad44:	4770      	bx	lr
 800ad46:	bf00      	nop
 800ad48:	7fc00000 	.word	0x7fc00000

0800ad4c <siprintf>:
 800ad4c:	b40e      	push	{r1, r2, r3}
 800ad4e:	b500      	push	{lr}
 800ad50:	b09c      	sub	sp, #112	; 0x70
 800ad52:	ab1d      	add	r3, sp, #116	; 0x74
 800ad54:	9002      	str	r0, [sp, #8]
 800ad56:	9006      	str	r0, [sp, #24]
 800ad58:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ad5c:	4809      	ldr	r0, [pc, #36]	; (800ad84 <siprintf+0x38>)
 800ad5e:	9107      	str	r1, [sp, #28]
 800ad60:	9104      	str	r1, [sp, #16]
 800ad62:	4909      	ldr	r1, [pc, #36]	; (800ad88 <siprintf+0x3c>)
 800ad64:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad68:	9105      	str	r1, [sp, #20]
 800ad6a:	6800      	ldr	r0, [r0, #0]
 800ad6c:	9301      	str	r3, [sp, #4]
 800ad6e:	a902      	add	r1, sp, #8
 800ad70:	f002 fd70 	bl	800d854 <_svfiprintf_r>
 800ad74:	9b02      	ldr	r3, [sp, #8]
 800ad76:	2200      	movs	r2, #0
 800ad78:	701a      	strb	r2, [r3, #0]
 800ad7a:	b01c      	add	sp, #112	; 0x70
 800ad7c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ad80:	b003      	add	sp, #12
 800ad82:	4770      	bx	lr
 800ad84:	2000000c 	.word	0x2000000c
 800ad88:	ffff0208 	.word	0xffff0208

0800ad8c <sulp>:
 800ad8c:	b570      	push	{r4, r5, r6, lr}
 800ad8e:	4604      	mov	r4, r0
 800ad90:	460d      	mov	r5, r1
 800ad92:	ec45 4b10 	vmov	d0, r4, r5
 800ad96:	4616      	mov	r6, r2
 800ad98:	f002 fb18 	bl	800d3cc <__ulp>
 800ad9c:	ec51 0b10 	vmov	r0, r1, d0
 800ada0:	b17e      	cbz	r6, 800adc2 <sulp+0x36>
 800ada2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ada6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800adaa:	2b00      	cmp	r3, #0
 800adac:	dd09      	ble.n	800adc2 <sulp+0x36>
 800adae:	051b      	lsls	r3, r3, #20
 800adb0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800adb4:	2400      	movs	r4, #0
 800adb6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800adba:	4622      	mov	r2, r4
 800adbc:	462b      	mov	r3, r5
 800adbe:	f7f5 fc43 	bl	8000648 <__aeabi_dmul>
 800adc2:	bd70      	pop	{r4, r5, r6, pc}
 800adc4:	0000      	movs	r0, r0
	...

0800adc8 <_strtod_l>:
 800adc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adcc:	461f      	mov	r7, r3
 800adce:	b0a1      	sub	sp, #132	; 0x84
 800add0:	2300      	movs	r3, #0
 800add2:	4681      	mov	r9, r0
 800add4:	4638      	mov	r0, r7
 800add6:	460e      	mov	r6, r1
 800add8:	9217      	str	r2, [sp, #92]	; 0x5c
 800adda:	931c      	str	r3, [sp, #112]	; 0x70
 800addc:	f001 fff5 	bl	800cdca <__localeconv_l>
 800ade0:	4680      	mov	r8, r0
 800ade2:	6800      	ldr	r0, [r0, #0]
 800ade4:	f7f5 fa1c 	bl	8000220 <strlen>
 800ade8:	f04f 0a00 	mov.w	sl, #0
 800adec:	4604      	mov	r4, r0
 800adee:	f04f 0b00 	mov.w	fp, #0
 800adf2:	961b      	str	r6, [sp, #108]	; 0x6c
 800adf4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800adf6:	781a      	ldrb	r2, [r3, #0]
 800adf8:	2a0d      	cmp	r2, #13
 800adfa:	d832      	bhi.n	800ae62 <_strtod_l+0x9a>
 800adfc:	2a09      	cmp	r2, #9
 800adfe:	d236      	bcs.n	800ae6e <_strtod_l+0xa6>
 800ae00:	2a00      	cmp	r2, #0
 800ae02:	d03e      	beq.n	800ae82 <_strtod_l+0xba>
 800ae04:	2300      	movs	r3, #0
 800ae06:	930d      	str	r3, [sp, #52]	; 0x34
 800ae08:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800ae0a:	782b      	ldrb	r3, [r5, #0]
 800ae0c:	2b30      	cmp	r3, #48	; 0x30
 800ae0e:	f040 80ac 	bne.w	800af6a <_strtod_l+0x1a2>
 800ae12:	786b      	ldrb	r3, [r5, #1]
 800ae14:	2b58      	cmp	r3, #88	; 0x58
 800ae16:	d001      	beq.n	800ae1c <_strtod_l+0x54>
 800ae18:	2b78      	cmp	r3, #120	; 0x78
 800ae1a:	d167      	bne.n	800aeec <_strtod_l+0x124>
 800ae1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ae1e:	9301      	str	r3, [sp, #4]
 800ae20:	ab1c      	add	r3, sp, #112	; 0x70
 800ae22:	9300      	str	r3, [sp, #0]
 800ae24:	9702      	str	r7, [sp, #8]
 800ae26:	ab1d      	add	r3, sp, #116	; 0x74
 800ae28:	4a88      	ldr	r2, [pc, #544]	; (800b04c <_strtod_l+0x284>)
 800ae2a:	a91b      	add	r1, sp, #108	; 0x6c
 800ae2c:	4648      	mov	r0, r9
 800ae2e:	f001 fcf2 	bl	800c816 <__gethex>
 800ae32:	f010 0407 	ands.w	r4, r0, #7
 800ae36:	4606      	mov	r6, r0
 800ae38:	d005      	beq.n	800ae46 <_strtod_l+0x7e>
 800ae3a:	2c06      	cmp	r4, #6
 800ae3c:	d12b      	bne.n	800ae96 <_strtod_l+0xce>
 800ae3e:	3501      	adds	r5, #1
 800ae40:	2300      	movs	r3, #0
 800ae42:	951b      	str	r5, [sp, #108]	; 0x6c
 800ae44:	930d      	str	r3, [sp, #52]	; 0x34
 800ae46:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	f040 859a 	bne.w	800b982 <_strtod_l+0xbba>
 800ae4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ae50:	b1e3      	cbz	r3, 800ae8c <_strtod_l+0xc4>
 800ae52:	4652      	mov	r2, sl
 800ae54:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ae58:	ec43 2b10 	vmov	d0, r2, r3
 800ae5c:	b021      	add	sp, #132	; 0x84
 800ae5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae62:	2a2b      	cmp	r2, #43	; 0x2b
 800ae64:	d015      	beq.n	800ae92 <_strtod_l+0xca>
 800ae66:	2a2d      	cmp	r2, #45	; 0x2d
 800ae68:	d004      	beq.n	800ae74 <_strtod_l+0xac>
 800ae6a:	2a20      	cmp	r2, #32
 800ae6c:	d1ca      	bne.n	800ae04 <_strtod_l+0x3c>
 800ae6e:	3301      	adds	r3, #1
 800ae70:	931b      	str	r3, [sp, #108]	; 0x6c
 800ae72:	e7bf      	b.n	800adf4 <_strtod_l+0x2c>
 800ae74:	2201      	movs	r2, #1
 800ae76:	920d      	str	r2, [sp, #52]	; 0x34
 800ae78:	1c5a      	adds	r2, r3, #1
 800ae7a:	921b      	str	r2, [sp, #108]	; 0x6c
 800ae7c:	785b      	ldrb	r3, [r3, #1]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d1c2      	bne.n	800ae08 <_strtod_l+0x40>
 800ae82:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ae84:	961b      	str	r6, [sp, #108]	; 0x6c
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	f040 8579 	bne.w	800b97e <_strtod_l+0xbb6>
 800ae8c:	4652      	mov	r2, sl
 800ae8e:	465b      	mov	r3, fp
 800ae90:	e7e2      	b.n	800ae58 <_strtod_l+0x90>
 800ae92:	2200      	movs	r2, #0
 800ae94:	e7ef      	b.n	800ae76 <_strtod_l+0xae>
 800ae96:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800ae98:	b13a      	cbz	r2, 800aeaa <_strtod_l+0xe2>
 800ae9a:	2135      	movs	r1, #53	; 0x35
 800ae9c:	a81e      	add	r0, sp, #120	; 0x78
 800ae9e:	f002 fb8d 	bl	800d5bc <__copybits>
 800aea2:	991c      	ldr	r1, [sp, #112]	; 0x70
 800aea4:	4648      	mov	r0, r9
 800aea6:	f001 fffa 	bl	800ce9e <_Bfree>
 800aeaa:	3c01      	subs	r4, #1
 800aeac:	2c04      	cmp	r4, #4
 800aeae:	d806      	bhi.n	800aebe <_strtod_l+0xf6>
 800aeb0:	e8df f004 	tbb	[pc, r4]
 800aeb4:	1714030a 	.word	0x1714030a
 800aeb8:	0a          	.byte	0x0a
 800aeb9:	00          	.byte	0x00
 800aeba:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800aebe:	0730      	lsls	r0, r6, #28
 800aec0:	d5c1      	bpl.n	800ae46 <_strtod_l+0x7e>
 800aec2:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800aec6:	e7be      	b.n	800ae46 <_strtod_l+0x7e>
 800aec8:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800aecc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800aece:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800aed2:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800aed6:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800aeda:	e7f0      	b.n	800aebe <_strtod_l+0xf6>
 800aedc:	f8df b170 	ldr.w	fp, [pc, #368]	; 800b050 <_strtod_l+0x288>
 800aee0:	e7ed      	b.n	800aebe <_strtod_l+0xf6>
 800aee2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800aee6:	f04f 3aff 	mov.w	sl, #4294967295
 800aeea:	e7e8      	b.n	800aebe <_strtod_l+0xf6>
 800aeec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800aeee:	1c5a      	adds	r2, r3, #1
 800aef0:	921b      	str	r2, [sp, #108]	; 0x6c
 800aef2:	785b      	ldrb	r3, [r3, #1]
 800aef4:	2b30      	cmp	r3, #48	; 0x30
 800aef6:	d0f9      	beq.n	800aeec <_strtod_l+0x124>
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d0a4      	beq.n	800ae46 <_strtod_l+0x7e>
 800aefc:	2301      	movs	r3, #1
 800aefe:	2500      	movs	r5, #0
 800af00:	9306      	str	r3, [sp, #24]
 800af02:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800af04:	9308      	str	r3, [sp, #32]
 800af06:	9507      	str	r5, [sp, #28]
 800af08:	9505      	str	r5, [sp, #20]
 800af0a:	220a      	movs	r2, #10
 800af0c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800af0e:	7807      	ldrb	r7, [r0, #0]
 800af10:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800af14:	b2d9      	uxtb	r1, r3
 800af16:	2909      	cmp	r1, #9
 800af18:	d929      	bls.n	800af6e <_strtod_l+0x1a6>
 800af1a:	4622      	mov	r2, r4
 800af1c:	f8d8 1000 	ldr.w	r1, [r8]
 800af20:	f002 fda0 	bl	800da64 <strncmp>
 800af24:	2800      	cmp	r0, #0
 800af26:	d031      	beq.n	800af8c <_strtod_l+0x1c4>
 800af28:	2000      	movs	r0, #0
 800af2a:	9c05      	ldr	r4, [sp, #20]
 800af2c:	9004      	str	r0, [sp, #16]
 800af2e:	463b      	mov	r3, r7
 800af30:	4602      	mov	r2, r0
 800af32:	2b65      	cmp	r3, #101	; 0x65
 800af34:	d001      	beq.n	800af3a <_strtod_l+0x172>
 800af36:	2b45      	cmp	r3, #69	; 0x45
 800af38:	d114      	bne.n	800af64 <_strtod_l+0x19c>
 800af3a:	b924      	cbnz	r4, 800af46 <_strtod_l+0x17e>
 800af3c:	b910      	cbnz	r0, 800af44 <_strtod_l+0x17c>
 800af3e:	9b06      	ldr	r3, [sp, #24]
 800af40:	2b00      	cmp	r3, #0
 800af42:	d09e      	beq.n	800ae82 <_strtod_l+0xba>
 800af44:	2400      	movs	r4, #0
 800af46:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800af48:	1c73      	adds	r3, r6, #1
 800af4a:	931b      	str	r3, [sp, #108]	; 0x6c
 800af4c:	7873      	ldrb	r3, [r6, #1]
 800af4e:	2b2b      	cmp	r3, #43	; 0x2b
 800af50:	d078      	beq.n	800b044 <_strtod_l+0x27c>
 800af52:	2b2d      	cmp	r3, #45	; 0x2d
 800af54:	d070      	beq.n	800b038 <_strtod_l+0x270>
 800af56:	f04f 0c00 	mov.w	ip, #0
 800af5a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800af5e:	2f09      	cmp	r7, #9
 800af60:	d97c      	bls.n	800b05c <_strtod_l+0x294>
 800af62:	961b      	str	r6, [sp, #108]	; 0x6c
 800af64:	f04f 0e00 	mov.w	lr, #0
 800af68:	e09a      	b.n	800b0a0 <_strtod_l+0x2d8>
 800af6a:	2300      	movs	r3, #0
 800af6c:	e7c7      	b.n	800aefe <_strtod_l+0x136>
 800af6e:	9905      	ldr	r1, [sp, #20]
 800af70:	2908      	cmp	r1, #8
 800af72:	bfdd      	ittte	le
 800af74:	9907      	ldrle	r1, [sp, #28]
 800af76:	fb02 3301 	mlale	r3, r2, r1, r3
 800af7a:	9307      	strle	r3, [sp, #28]
 800af7c:	fb02 3505 	mlagt	r5, r2, r5, r3
 800af80:	9b05      	ldr	r3, [sp, #20]
 800af82:	3001      	adds	r0, #1
 800af84:	3301      	adds	r3, #1
 800af86:	9305      	str	r3, [sp, #20]
 800af88:	901b      	str	r0, [sp, #108]	; 0x6c
 800af8a:	e7bf      	b.n	800af0c <_strtod_l+0x144>
 800af8c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800af8e:	191a      	adds	r2, r3, r4
 800af90:	921b      	str	r2, [sp, #108]	; 0x6c
 800af92:	9a05      	ldr	r2, [sp, #20]
 800af94:	5d1b      	ldrb	r3, [r3, r4]
 800af96:	2a00      	cmp	r2, #0
 800af98:	d037      	beq.n	800b00a <_strtod_l+0x242>
 800af9a:	9c05      	ldr	r4, [sp, #20]
 800af9c:	4602      	mov	r2, r0
 800af9e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800afa2:	2909      	cmp	r1, #9
 800afa4:	d913      	bls.n	800afce <_strtod_l+0x206>
 800afa6:	2101      	movs	r1, #1
 800afa8:	9104      	str	r1, [sp, #16]
 800afaa:	e7c2      	b.n	800af32 <_strtod_l+0x16a>
 800afac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800afae:	1c5a      	adds	r2, r3, #1
 800afb0:	921b      	str	r2, [sp, #108]	; 0x6c
 800afb2:	785b      	ldrb	r3, [r3, #1]
 800afb4:	3001      	adds	r0, #1
 800afb6:	2b30      	cmp	r3, #48	; 0x30
 800afb8:	d0f8      	beq.n	800afac <_strtod_l+0x1e4>
 800afba:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800afbe:	2a08      	cmp	r2, #8
 800afc0:	f200 84e4 	bhi.w	800b98c <_strtod_l+0xbc4>
 800afc4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800afc6:	9208      	str	r2, [sp, #32]
 800afc8:	4602      	mov	r2, r0
 800afca:	2000      	movs	r0, #0
 800afcc:	4604      	mov	r4, r0
 800afce:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800afd2:	f100 0101 	add.w	r1, r0, #1
 800afd6:	d012      	beq.n	800affe <_strtod_l+0x236>
 800afd8:	440a      	add	r2, r1
 800afda:	eb00 0c04 	add.w	ip, r0, r4
 800afde:	4621      	mov	r1, r4
 800afe0:	270a      	movs	r7, #10
 800afe2:	458c      	cmp	ip, r1
 800afe4:	d113      	bne.n	800b00e <_strtod_l+0x246>
 800afe6:	1821      	adds	r1, r4, r0
 800afe8:	2908      	cmp	r1, #8
 800afea:	f104 0401 	add.w	r4, r4, #1
 800afee:	4404      	add	r4, r0
 800aff0:	dc19      	bgt.n	800b026 <_strtod_l+0x25e>
 800aff2:	9b07      	ldr	r3, [sp, #28]
 800aff4:	210a      	movs	r1, #10
 800aff6:	fb01 e303 	mla	r3, r1, r3, lr
 800affa:	9307      	str	r3, [sp, #28]
 800affc:	2100      	movs	r1, #0
 800affe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b000:	1c58      	adds	r0, r3, #1
 800b002:	901b      	str	r0, [sp, #108]	; 0x6c
 800b004:	785b      	ldrb	r3, [r3, #1]
 800b006:	4608      	mov	r0, r1
 800b008:	e7c9      	b.n	800af9e <_strtod_l+0x1d6>
 800b00a:	9805      	ldr	r0, [sp, #20]
 800b00c:	e7d3      	b.n	800afb6 <_strtod_l+0x1ee>
 800b00e:	2908      	cmp	r1, #8
 800b010:	f101 0101 	add.w	r1, r1, #1
 800b014:	dc03      	bgt.n	800b01e <_strtod_l+0x256>
 800b016:	9b07      	ldr	r3, [sp, #28]
 800b018:	437b      	muls	r3, r7
 800b01a:	9307      	str	r3, [sp, #28]
 800b01c:	e7e1      	b.n	800afe2 <_strtod_l+0x21a>
 800b01e:	2910      	cmp	r1, #16
 800b020:	bfd8      	it	le
 800b022:	437d      	mulle	r5, r7
 800b024:	e7dd      	b.n	800afe2 <_strtod_l+0x21a>
 800b026:	2c10      	cmp	r4, #16
 800b028:	bfdc      	itt	le
 800b02a:	210a      	movle	r1, #10
 800b02c:	fb01 e505 	mlale	r5, r1, r5, lr
 800b030:	e7e4      	b.n	800affc <_strtod_l+0x234>
 800b032:	2301      	movs	r3, #1
 800b034:	9304      	str	r3, [sp, #16]
 800b036:	e781      	b.n	800af3c <_strtod_l+0x174>
 800b038:	f04f 0c01 	mov.w	ip, #1
 800b03c:	1cb3      	adds	r3, r6, #2
 800b03e:	931b      	str	r3, [sp, #108]	; 0x6c
 800b040:	78b3      	ldrb	r3, [r6, #2]
 800b042:	e78a      	b.n	800af5a <_strtod_l+0x192>
 800b044:	f04f 0c00 	mov.w	ip, #0
 800b048:	e7f8      	b.n	800b03c <_strtod_l+0x274>
 800b04a:	bf00      	nop
 800b04c:	0800e778 	.word	0x0800e778
 800b050:	7ff00000 	.word	0x7ff00000
 800b054:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b056:	1c5f      	adds	r7, r3, #1
 800b058:	971b      	str	r7, [sp, #108]	; 0x6c
 800b05a:	785b      	ldrb	r3, [r3, #1]
 800b05c:	2b30      	cmp	r3, #48	; 0x30
 800b05e:	d0f9      	beq.n	800b054 <_strtod_l+0x28c>
 800b060:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800b064:	2f08      	cmp	r7, #8
 800b066:	f63f af7d 	bhi.w	800af64 <_strtod_l+0x19c>
 800b06a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800b06e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b070:	930a      	str	r3, [sp, #40]	; 0x28
 800b072:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b074:	1c5f      	adds	r7, r3, #1
 800b076:	971b      	str	r7, [sp, #108]	; 0x6c
 800b078:	785b      	ldrb	r3, [r3, #1]
 800b07a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800b07e:	f1b8 0f09 	cmp.w	r8, #9
 800b082:	d937      	bls.n	800b0f4 <_strtod_l+0x32c>
 800b084:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b086:	1a7f      	subs	r7, r7, r1
 800b088:	2f08      	cmp	r7, #8
 800b08a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800b08e:	dc37      	bgt.n	800b100 <_strtod_l+0x338>
 800b090:	45be      	cmp	lr, r7
 800b092:	bfa8      	it	ge
 800b094:	46be      	movge	lr, r7
 800b096:	f1bc 0f00 	cmp.w	ip, #0
 800b09a:	d001      	beq.n	800b0a0 <_strtod_l+0x2d8>
 800b09c:	f1ce 0e00 	rsb	lr, lr, #0
 800b0a0:	2c00      	cmp	r4, #0
 800b0a2:	d151      	bne.n	800b148 <_strtod_l+0x380>
 800b0a4:	2800      	cmp	r0, #0
 800b0a6:	f47f aece 	bne.w	800ae46 <_strtod_l+0x7e>
 800b0aa:	9a06      	ldr	r2, [sp, #24]
 800b0ac:	2a00      	cmp	r2, #0
 800b0ae:	f47f aeca 	bne.w	800ae46 <_strtod_l+0x7e>
 800b0b2:	9a04      	ldr	r2, [sp, #16]
 800b0b4:	2a00      	cmp	r2, #0
 800b0b6:	f47f aee4 	bne.w	800ae82 <_strtod_l+0xba>
 800b0ba:	2b4e      	cmp	r3, #78	; 0x4e
 800b0bc:	d027      	beq.n	800b10e <_strtod_l+0x346>
 800b0be:	dc21      	bgt.n	800b104 <_strtod_l+0x33c>
 800b0c0:	2b49      	cmp	r3, #73	; 0x49
 800b0c2:	f47f aede 	bne.w	800ae82 <_strtod_l+0xba>
 800b0c6:	49a0      	ldr	r1, [pc, #640]	; (800b348 <_strtod_l+0x580>)
 800b0c8:	a81b      	add	r0, sp, #108	; 0x6c
 800b0ca:	f001 fdd7 	bl	800cc7c <__match>
 800b0ce:	2800      	cmp	r0, #0
 800b0d0:	f43f aed7 	beq.w	800ae82 <_strtod_l+0xba>
 800b0d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b0d6:	499d      	ldr	r1, [pc, #628]	; (800b34c <_strtod_l+0x584>)
 800b0d8:	3b01      	subs	r3, #1
 800b0da:	a81b      	add	r0, sp, #108	; 0x6c
 800b0dc:	931b      	str	r3, [sp, #108]	; 0x6c
 800b0de:	f001 fdcd 	bl	800cc7c <__match>
 800b0e2:	b910      	cbnz	r0, 800b0ea <_strtod_l+0x322>
 800b0e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b0e6:	3301      	adds	r3, #1
 800b0e8:	931b      	str	r3, [sp, #108]	; 0x6c
 800b0ea:	f8df b274 	ldr.w	fp, [pc, #628]	; 800b360 <_strtod_l+0x598>
 800b0ee:	f04f 0a00 	mov.w	sl, #0
 800b0f2:	e6a8      	b.n	800ae46 <_strtod_l+0x7e>
 800b0f4:	210a      	movs	r1, #10
 800b0f6:	fb01 3e0e 	mla	lr, r1, lr, r3
 800b0fa:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800b0fe:	e7b8      	b.n	800b072 <_strtod_l+0x2aa>
 800b100:	46be      	mov	lr, r7
 800b102:	e7c8      	b.n	800b096 <_strtod_l+0x2ce>
 800b104:	2b69      	cmp	r3, #105	; 0x69
 800b106:	d0de      	beq.n	800b0c6 <_strtod_l+0x2fe>
 800b108:	2b6e      	cmp	r3, #110	; 0x6e
 800b10a:	f47f aeba 	bne.w	800ae82 <_strtod_l+0xba>
 800b10e:	4990      	ldr	r1, [pc, #576]	; (800b350 <_strtod_l+0x588>)
 800b110:	a81b      	add	r0, sp, #108	; 0x6c
 800b112:	f001 fdb3 	bl	800cc7c <__match>
 800b116:	2800      	cmp	r0, #0
 800b118:	f43f aeb3 	beq.w	800ae82 <_strtod_l+0xba>
 800b11c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b11e:	781b      	ldrb	r3, [r3, #0]
 800b120:	2b28      	cmp	r3, #40	; 0x28
 800b122:	d10e      	bne.n	800b142 <_strtod_l+0x37a>
 800b124:	aa1e      	add	r2, sp, #120	; 0x78
 800b126:	498b      	ldr	r1, [pc, #556]	; (800b354 <_strtod_l+0x58c>)
 800b128:	a81b      	add	r0, sp, #108	; 0x6c
 800b12a:	f001 fdbb 	bl	800cca4 <__hexnan>
 800b12e:	2805      	cmp	r0, #5
 800b130:	d107      	bne.n	800b142 <_strtod_l+0x37a>
 800b132:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b134:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 800b138:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800b13c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800b140:	e681      	b.n	800ae46 <_strtod_l+0x7e>
 800b142:	f8df b224 	ldr.w	fp, [pc, #548]	; 800b368 <_strtod_l+0x5a0>
 800b146:	e7d2      	b.n	800b0ee <_strtod_l+0x326>
 800b148:	ebae 0302 	sub.w	r3, lr, r2
 800b14c:	9306      	str	r3, [sp, #24]
 800b14e:	9b05      	ldr	r3, [sp, #20]
 800b150:	9807      	ldr	r0, [sp, #28]
 800b152:	2b00      	cmp	r3, #0
 800b154:	bf08      	it	eq
 800b156:	4623      	moveq	r3, r4
 800b158:	2c10      	cmp	r4, #16
 800b15a:	9305      	str	r3, [sp, #20]
 800b15c:	46a0      	mov	r8, r4
 800b15e:	bfa8      	it	ge
 800b160:	f04f 0810 	movge.w	r8, #16
 800b164:	f7f5 f9f6 	bl	8000554 <__aeabi_ui2d>
 800b168:	2c09      	cmp	r4, #9
 800b16a:	4682      	mov	sl, r0
 800b16c:	468b      	mov	fp, r1
 800b16e:	dc13      	bgt.n	800b198 <_strtod_l+0x3d0>
 800b170:	9b06      	ldr	r3, [sp, #24]
 800b172:	2b00      	cmp	r3, #0
 800b174:	f43f ae67 	beq.w	800ae46 <_strtod_l+0x7e>
 800b178:	9b06      	ldr	r3, [sp, #24]
 800b17a:	dd7a      	ble.n	800b272 <_strtod_l+0x4aa>
 800b17c:	2b16      	cmp	r3, #22
 800b17e:	dc61      	bgt.n	800b244 <_strtod_l+0x47c>
 800b180:	4a75      	ldr	r2, [pc, #468]	; (800b358 <_strtod_l+0x590>)
 800b182:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800b186:	e9de 0100 	ldrd	r0, r1, [lr]
 800b18a:	4652      	mov	r2, sl
 800b18c:	465b      	mov	r3, fp
 800b18e:	f7f5 fa5b 	bl	8000648 <__aeabi_dmul>
 800b192:	4682      	mov	sl, r0
 800b194:	468b      	mov	fp, r1
 800b196:	e656      	b.n	800ae46 <_strtod_l+0x7e>
 800b198:	4b6f      	ldr	r3, [pc, #444]	; (800b358 <_strtod_l+0x590>)
 800b19a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b19e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800b1a2:	f7f5 fa51 	bl	8000648 <__aeabi_dmul>
 800b1a6:	4606      	mov	r6, r0
 800b1a8:	4628      	mov	r0, r5
 800b1aa:	460f      	mov	r7, r1
 800b1ac:	f7f5 f9d2 	bl	8000554 <__aeabi_ui2d>
 800b1b0:	4602      	mov	r2, r0
 800b1b2:	460b      	mov	r3, r1
 800b1b4:	4630      	mov	r0, r6
 800b1b6:	4639      	mov	r1, r7
 800b1b8:	f7f5 f890 	bl	80002dc <__adddf3>
 800b1bc:	2c0f      	cmp	r4, #15
 800b1be:	4682      	mov	sl, r0
 800b1c0:	468b      	mov	fp, r1
 800b1c2:	ddd5      	ble.n	800b170 <_strtod_l+0x3a8>
 800b1c4:	9b06      	ldr	r3, [sp, #24]
 800b1c6:	eba4 0808 	sub.w	r8, r4, r8
 800b1ca:	4498      	add	r8, r3
 800b1cc:	f1b8 0f00 	cmp.w	r8, #0
 800b1d0:	f340 8096 	ble.w	800b300 <_strtod_l+0x538>
 800b1d4:	f018 030f 	ands.w	r3, r8, #15
 800b1d8:	d00a      	beq.n	800b1f0 <_strtod_l+0x428>
 800b1da:	495f      	ldr	r1, [pc, #380]	; (800b358 <_strtod_l+0x590>)
 800b1dc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b1e0:	4652      	mov	r2, sl
 800b1e2:	465b      	mov	r3, fp
 800b1e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b1e8:	f7f5 fa2e 	bl	8000648 <__aeabi_dmul>
 800b1ec:	4682      	mov	sl, r0
 800b1ee:	468b      	mov	fp, r1
 800b1f0:	f038 080f 	bics.w	r8, r8, #15
 800b1f4:	d073      	beq.n	800b2de <_strtod_l+0x516>
 800b1f6:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800b1fa:	dd47      	ble.n	800b28c <_strtod_l+0x4c4>
 800b1fc:	2400      	movs	r4, #0
 800b1fe:	46a0      	mov	r8, r4
 800b200:	9407      	str	r4, [sp, #28]
 800b202:	9405      	str	r4, [sp, #20]
 800b204:	2322      	movs	r3, #34	; 0x22
 800b206:	f8df b158 	ldr.w	fp, [pc, #344]	; 800b360 <_strtod_l+0x598>
 800b20a:	f8c9 3000 	str.w	r3, [r9]
 800b20e:	f04f 0a00 	mov.w	sl, #0
 800b212:	9b07      	ldr	r3, [sp, #28]
 800b214:	2b00      	cmp	r3, #0
 800b216:	f43f ae16 	beq.w	800ae46 <_strtod_l+0x7e>
 800b21a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b21c:	4648      	mov	r0, r9
 800b21e:	f001 fe3e 	bl	800ce9e <_Bfree>
 800b222:	9905      	ldr	r1, [sp, #20]
 800b224:	4648      	mov	r0, r9
 800b226:	f001 fe3a 	bl	800ce9e <_Bfree>
 800b22a:	4641      	mov	r1, r8
 800b22c:	4648      	mov	r0, r9
 800b22e:	f001 fe36 	bl	800ce9e <_Bfree>
 800b232:	9907      	ldr	r1, [sp, #28]
 800b234:	4648      	mov	r0, r9
 800b236:	f001 fe32 	bl	800ce9e <_Bfree>
 800b23a:	4621      	mov	r1, r4
 800b23c:	4648      	mov	r0, r9
 800b23e:	f001 fe2e 	bl	800ce9e <_Bfree>
 800b242:	e600      	b.n	800ae46 <_strtod_l+0x7e>
 800b244:	9a06      	ldr	r2, [sp, #24]
 800b246:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800b24a:	4293      	cmp	r3, r2
 800b24c:	dbba      	blt.n	800b1c4 <_strtod_l+0x3fc>
 800b24e:	4d42      	ldr	r5, [pc, #264]	; (800b358 <_strtod_l+0x590>)
 800b250:	f1c4 040f 	rsb	r4, r4, #15
 800b254:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800b258:	4652      	mov	r2, sl
 800b25a:	465b      	mov	r3, fp
 800b25c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b260:	f7f5 f9f2 	bl	8000648 <__aeabi_dmul>
 800b264:	9b06      	ldr	r3, [sp, #24]
 800b266:	1b1c      	subs	r4, r3, r4
 800b268:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800b26c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b270:	e78d      	b.n	800b18e <_strtod_l+0x3c6>
 800b272:	f113 0f16 	cmn.w	r3, #22
 800b276:	dba5      	blt.n	800b1c4 <_strtod_l+0x3fc>
 800b278:	4a37      	ldr	r2, [pc, #220]	; (800b358 <_strtod_l+0x590>)
 800b27a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800b27e:	e9d2 2300 	ldrd	r2, r3, [r2]
 800b282:	4650      	mov	r0, sl
 800b284:	4659      	mov	r1, fp
 800b286:	f7f5 fb09 	bl	800089c <__aeabi_ddiv>
 800b28a:	e782      	b.n	800b192 <_strtod_l+0x3ca>
 800b28c:	2300      	movs	r3, #0
 800b28e:	4e33      	ldr	r6, [pc, #204]	; (800b35c <_strtod_l+0x594>)
 800b290:	ea4f 1828 	mov.w	r8, r8, asr #4
 800b294:	4650      	mov	r0, sl
 800b296:	4659      	mov	r1, fp
 800b298:	461d      	mov	r5, r3
 800b29a:	f1b8 0f01 	cmp.w	r8, #1
 800b29e:	dc21      	bgt.n	800b2e4 <_strtod_l+0x51c>
 800b2a0:	b10b      	cbz	r3, 800b2a6 <_strtod_l+0x4de>
 800b2a2:	4682      	mov	sl, r0
 800b2a4:	468b      	mov	fp, r1
 800b2a6:	4b2d      	ldr	r3, [pc, #180]	; (800b35c <_strtod_l+0x594>)
 800b2a8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800b2ac:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800b2b0:	4652      	mov	r2, sl
 800b2b2:	465b      	mov	r3, fp
 800b2b4:	e9d5 0100 	ldrd	r0, r1, [r5]
 800b2b8:	f7f5 f9c6 	bl	8000648 <__aeabi_dmul>
 800b2bc:	4b28      	ldr	r3, [pc, #160]	; (800b360 <_strtod_l+0x598>)
 800b2be:	460a      	mov	r2, r1
 800b2c0:	400b      	ands	r3, r1
 800b2c2:	4928      	ldr	r1, [pc, #160]	; (800b364 <_strtod_l+0x59c>)
 800b2c4:	428b      	cmp	r3, r1
 800b2c6:	4682      	mov	sl, r0
 800b2c8:	d898      	bhi.n	800b1fc <_strtod_l+0x434>
 800b2ca:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800b2ce:	428b      	cmp	r3, r1
 800b2d0:	bf86      	itte	hi
 800b2d2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800b36c <_strtod_l+0x5a4>
 800b2d6:	f04f 3aff 	movhi.w	sl, #4294967295
 800b2da:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800b2de:	2300      	movs	r3, #0
 800b2e0:	9304      	str	r3, [sp, #16]
 800b2e2:	e077      	b.n	800b3d4 <_strtod_l+0x60c>
 800b2e4:	f018 0f01 	tst.w	r8, #1
 800b2e8:	d006      	beq.n	800b2f8 <_strtod_l+0x530>
 800b2ea:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800b2ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2f2:	f7f5 f9a9 	bl	8000648 <__aeabi_dmul>
 800b2f6:	2301      	movs	r3, #1
 800b2f8:	3501      	adds	r5, #1
 800b2fa:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b2fe:	e7cc      	b.n	800b29a <_strtod_l+0x4d2>
 800b300:	d0ed      	beq.n	800b2de <_strtod_l+0x516>
 800b302:	f1c8 0800 	rsb	r8, r8, #0
 800b306:	f018 020f 	ands.w	r2, r8, #15
 800b30a:	d00a      	beq.n	800b322 <_strtod_l+0x55a>
 800b30c:	4b12      	ldr	r3, [pc, #72]	; (800b358 <_strtod_l+0x590>)
 800b30e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b312:	4650      	mov	r0, sl
 800b314:	4659      	mov	r1, fp
 800b316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b31a:	f7f5 fabf 	bl	800089c <__aeabi_ddiv>
 800b31e:	4682      	mov	sl, r0
 800b320:	468b      	mov	fp, r1
 800b322:	ea5f 1828 	movs.w	r8, r8, asr #4
 800b326:	d0da      	beq.n	800b2de <_strtod_l+0x516>
 800b328:	f1b8 0f1f 	cmp.w	r8, #31
 800b32c:	dd20      	ble.n	800b370 <_strtod_l+0x5a8>
 800b32e:	2400      	movs	r4, #0
 800b330:	46a0      	mov	r8, r4
 800b332:	9407      	str	r4, [sp, #28]
 800b334:	9405      	str	r4, [sp, #20]
 800b336:	2322      	movs	r3, #34	; 0x22
 800b338:	f04f 0a00 	mov.w	sl, #0
 800b33c:	f04f 0b00 	mov.w	fp, #0
 800b340:	f8c9 3000 	str.w	r3, [r9]
 800b344:	e765      	b.n	800b212 <_strtod_l+0x44a>
 800b346:	bf00      	nop
 800b348:	0800e741 	.word	0x0800e741
 800b34c:	0800e7cb 	.word	0x0800e7cb
 800b350:	0800e749 	.word	0x0800e749
 800b354:	0800e78c 	.word	0x0800e78c
 800b358:	0800e808 	.word	0x0800e808
 800b35c:	0800e7e0 	.word	0x0800e7e0
 800b360:	7ff00000 	.word	0x7ff00000
 800b364:	7ca00000 	.word	0x7ca00000
 800b368:	fff80000 	.word	0xfff80000
 800b36c:	7fefffff 	.word	0x7fefffff
 800b370:	f018 0310 	ands.w	r3, r8, #16
 800b374:	bf18      	it	ne
 800b376:	236a      	movne	r3, #106	; 0x6a
 800b378:	4da0      	ldr	r5, [pc, #640]	; (800b5fc <_strtod_l+0x834>)
 800b37a:	9304      	str	r3, [sp, #16]
 800b37c:	4650      	mov	r0, sl
 800b37e:	4659      	mov	r1, fp
 800b380:	2300      	movs	r3, #0
 800b382:	f1b8 0f00 	cmp.w	r8, #0
 800b386:	f300 810a 	bgt.w	800b59e <_strtod_l+0x7d6>
 800b38a:	b10b      	cbz	r3, 800b390 <_strtod_l+0x5c8>
 800b38c:	4682      	mov	sl, r0
 800b38e:	468b      	mov	fp, r1
 800b390:	9b04      	ldr	r3, [sp, #16]
 800b392:	b1bb      	cbz	r3, 800b3c4 <_strtod_l+0x5fc>
 800b394:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800b398:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	4659      	mov	r1, fp
 800b3a0:	dd10      	ble.n	800b3c4 <_strtod_l+0x5fc>
 800b3a2:	2b1f      	cmp	r3, #31
 800b3a4:	f340 8107 	ble.w	800b5b6 <_strtod_l+0x7ee>
 800b3a8:	2b34      	cmp	r3, #52	; 0x34
 800b3aa:	bfde      	ittt	le
 800b3ac:	3b20      	suble	r3, #32
 800b3ae:	f04f 32ff 	movle.w	r2, #4294967295
 800b3b2:	fa02 f303 	lslle.w	r3, r2, r3
 800b3b6:	f04f 0a00 	mov.w	sl, #0
 800b3ba:	bfcc      	ite	gt
 800b3bc:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800b3c0:	ea03 0b01 	andle.w	fp, r3, r1
 800b3c4:	2200      	movs	r2, #0
 800b3c6:	2300      	movs	r3, #0
 800b3c8:	4650      	mov	r0, sl
 800b3ca:	4659      	mov	r1, fp
 800b3cc:	f7f5 fba4 	bl	8000b18 <__aeabi_dcmpeq>
 800b3d0:	2800      	cmp	r0, #0
 800b3d2:	d1ac      	bne.n	800b32e <_strtod_l+0x566>
 800b3d4:	9b07      	ldr	r3, [sp, #28]
 800b3d6:	9300      	str	r3, [sp, #0]
 800b3d8:	9a05      	ldr	r2, [sp, #20]
 800b3da:	9908      	ldr	r1, [sp, #32]
 800b3dc:	4623      	mov	r3, r4
 800b3de:	4648      	mov	r0, r9
 800b3e0:	f001 fdaf 	bl	800cf42 <__s2b>
 800b3e4:	9007      	str	r0, [sp, #28]
 800b3e6:	2800      	cmp	r0, #0
 800b3e8:	f43f af08 	beq.w	800b1fc <_strtod_l+0x434>
 800b3ec:	9a06      	ldr	r2, [sp, #24]
 800b3ee:	9b06      	ldr	r3, [sp, #24]
 800b3f0:	2a00      	cmp	r2, #0
 800b3f2:	f1c3 0300 	rsb	r3, r3, #0
 800b3f6:	bfa8      	it	ge
 800b3f8:	2300      	movge	r3, #0
 800b3fa:	930e      	str	r3, [sp, #56]	; 0x38
 800b3fc:	2400      	movs	r4, #0
 800b3fe:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b402:	9316      	str	r3, [sp, #88]	; 0x58
 800b404:	46a0      	mov	r8, r4
 800b406:	9b07      	ldr	r3, [sp, #28]
 800b408:	4648      	mov	r0, r9
 800b40a:	6859      	ldr	r1, [r3, #4]
 800b40c:	f001 fd13 	bl	800ce36 <_Balloc>
 800b410:	9005      	str	r0, [sp, #20]
 800b412:	2800      	cmp	r0, #0
 800b414:	f43f aef6 	beq.w	800b204 <_strtod_l+0x43c>
 800b418:	9b07      	ldr	r3, [sp, #28]
 800b41a:	691a      	ldr	r2, [r3, #16]
 800b41c:	3202      	adds	r2, #2
 800b41e:	f103 010c 	add.w	r1, r3, #12
 800b422:	0092      	lsls	r2, r2, #2
 800b424:	300c      	adds	r0, #12
 800b426:	f001 fcfb 	bl	800ce20 <memcpy>
 800b42a:	aa1e      	add	r2, sp, #120	; 0x78
 800b42c:	a91d      	add	r1, sp, #116	; 0x74
 800b42e:	ec4b ab10 	vmov	d0, sl, fp
 800b432:	4648      	mov	r0, r9
 800b434:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800b438:	f002 f83e 	bl	800d4b8 <__d2b>
 800b43c:	901c      	str	r0, [sp, #112]	; 0x70
 800b43e:	2800      	cmp	r0, #0
 800b440:	f43f aee0 	beq.w	800b204 <_strtod_l+0x43c>
 800b444:	2101      	movs	r1, #1
 800b446:	4648      	mov	r0, r9
 800b448:	f001 fe07 	bl	800d05a <__i2b>
 800b44c:	4680      	mov	r8, r0
 800b44e:	2800      	cmp	r0, #0
 800b450:	f43f aed8 	beq.w	800b204 <_strtod_l+0x43c>
 800b454:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800b456:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800b458:	2e00      	cmp	r6, #0
 800b45a:	bfab      	itete	ge
 800b45c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800b45e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800b460:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800b462:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800b464:	bfac      	ite	ge
 800b466:	18f7      	addge	r7, r6, r3
 800b468:	1b9d      	sublt	r5, r3, r6
 800b46a:	9b04      	ldr	r3, [sp, #16]
 800b46c:	1af6      	subs	r6, r6, r3
 800b46e:	4416      	add	r6, r2
 800b470:	4b63      	ldr	r3, [pc, #396]	; (800b600 <_strtod_l+0x838>)
 800b472:	3e01      	subs	r6, #1
 800b474:	429e      	cmp	r6, r3
 800b476:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b47a:	f280 80af 	bge.w	800b5dc <_strtod_l+0x814>
 800b47e:	1b9b      	subs	r3, r3, r6
 800b480:	2b1f      	cmp	r3, #31
 800b482:	eba2 0203 	sub.w	r2, r2, r3
 800b486:	f04f 0101 	mov.w	r1, #1
 800b48a:	f300 809b 	bgt.w	800b5c4 <_strtod_l+0x7fc>
 800b48e:	fa01 f303 	lsl.w	r3, r1, r3
 800b492:	930f      	str	r3, [sp, #60]	; 0x3c
 800b494:	2300      	movs	r3, #0
 800b496:	930a      	str	r3, [sp, #40]	; 0x28
 800b498:	18be      	adds	r6, r7, r2
 800b49a:	9b04      	ldr	r3, [sp, #16]
 800b49c:	42b7      	cmp	r7, r6
 800b49e:	4415      	add	r5, r2
 800b4a0:	441d      	add	r5, r3
 800b4a2:	463b      	mov	r3, r7
 800b4a4:	bfa8      	it	ge
 800b4a6:	4633      	movge	r3, r6
 800b4a8:	42ab      	cmp	r3, r5
 800b4aa:	bfa8      	it	ge
 800b4ac:	462b      	movge	r3, r5
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	bfc2      	ittt	gt
 800b4b2:	1af6      	subgt	r6, r6, r3
 800b4b4:	1aed      	subgt	r5, r5, r3
 800b4b6:	1aff      	subgt	r7, r7, r3
 800b4b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b4ba:	b1bb      	cbz	r3, 800b4ec <_strtod_l+0x724>
 800b4bc:	4641      	mov	r1, r8
 800b4be:	461a      	mov	r2, r3
 800b4c0:	4648      	mov	r0, r9
 800b4c2:	f001 fe69 	bl	800d198 <__pow5mult>
 800b4c6:	4680      	mov	r8, r0
 800b4c8:	2800      	cmp	r0, #0
 800b4ca:	f43f ae9b 	beq.w	800b204 <_strtod_l+0x43c>
 800b4ce:	4601      	mov	r1, r0
 800b4d0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800b4d2:	4648      	mov	r0, r9
 800b4d4:	f001 fdca 	bl	800d06c <__multiply>
 800b4d8:	900c      	str	r0, [sp, #48]	; 0x30
 800b4da:	2800      	cmp	r0, #0
 800b4dc:	f43f ae92 	beq.w	800b204 <_strtod_l+0x43c>
 800b4e0:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b4e2:	4648      	mov	r0, r9
 800b4e4:	f001 fcdb 	bl	800ce9e <_Bfree>
 800b4e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b4ea:	931c      	str	r3, [sp, #112]	; 0x70
 800b4ec:	2e00      	cmp	r6, #0
 800b4ee:	dc7a      	bgt.n	800b5e6 <_strtod_l+0x81e>
 800b4f0:	9b06      	ldr	r3, [sp, #24]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	dd08      	ble.n	800b508 <_strtod_l+0x740>
 800b4f6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b4f8:	9905      	ldr	r1, [sp, #20]
 800b4fa:	4648      	mov	r0, r9
 800b4fc:	f001 fe4c 	bl	800d198 <__pow5mult>
 800b500:	9005      	str	r0, [sp, #20]
 800b502:	2800      	cmp	r0, #0
 800b504:	f43f ae7e 	beq.w	800b204 <_strtod_l+0x43c>
 800b508:	2d00      	cmp	r5, #0
 800b50a:	dd08      	ble.n	800b51e <_strtod_l+0x756>
 800b50c:	462a      	mov	r2, r5
 800b50e:	9905      	ldr	r1, [sp, #20]
 800b510:	4648      	mov	r0, r9
 800b512:	f001 fe8f 	bl	800d234 <__lshift>
 800b516:	9005      	str	r0, [sp, #20]
 800b518:	2800      	cmp	r0, #0
 800b51a:	f43f ae73 	beq.w	800b204 <_strtod_l+0x43c>
 800b51e:	2f00      	cmp	r7, #0
 800b520:	dd08      	ble.n	800b534 <_strtod_l+0x76c>
 800b522:	4641      	mov	r1, r8
 800b524:	463a      	mov	r2, r7
 800b526:	4648      	mov	r0, r9
 800b528:	f001 fe84 	bl	800d234 <__lshift>
 800b52c:	4680      	mov	r8, r0
 800b52e:	2800      	cmp	r0, #0
 800b530:	f43f ae68 	beq.w	800b204 <_strtod_l+0x43c>
 800b534:	9a05      	ldr	r2, [sp, #20]
 800b536:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b538:	4648      	mov	r0, r9
 800b53a:	f001 fee9 	bl	800d310 <__mdiff>
 800b53e:	4604      	mov	r4, r0
 800b540:	2800      	cmp	r0, #0
 800b542:	f43f ae5f 	beq.w	800b204 <_strtod_l+0x43c>
 800b546:	68c3      	ldr	r3, [r0, #12]
 800b548:	930c      	str	r3, [sp, #48]	; 0x30
 800b54a:	2300      	movs	r3, #0
 800b54c:	60c3      	str	r3, [r0, #12]
 800b54e:	4641      	mov	r1, r8
 800b550:	f001 fec4 	bl	800d2dc <__mcmp>
 800b554:	2800      	cmp	r0, #0
 800b556:	da55      	bge.n	800b604 <_strtod_l+0x83c>
 800b558:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b55a:	b9e3      	cbnz	r3, 800b596 <_strtod_l+0x7ce>
 800b55c:	f1ba 0f00 	cmp.w	sl, #0
 800b560:	d119      	bne.n	800b596 <_strtod_l+0x7ce>
 800b562:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b566:	b9b3      	cbnz	r3, 800b596 <_strtod_l+0x7ce>
 800b568:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b56c:	0d1b      	lsrs	r3, r3, #20
 800b56e:	051b      	lsls	r3, r3, #20
 800b570:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b574:	d90f      	bls.n	800b596 <_strtod_l+0x7ce>
 800b576:	6963      	ldr	r3, [r4, #20]
 800b578:	b913      	cbnz	r3, 800b580 <_strtod_l+0x7b8>
 800b57a:	6923      	ldr	r3, [r4, #16]
 800b57c:	2b01      	cmp	r3, #1
 800b57e:	dd0a      	ble.n	800b596 <_strtod_l+0x7ce>
 800b580:	4621      	mov	r1, r4
 800b582:	2201      	movs	r2, #1
 800b584:	4648      	mov	r0, r9
 800b586:	f001 fe55 	bl	800d234 <__lshift>
 800b58a:	4641      	mov	r1, r8
 800b58c:	4604      	mov	r4, r0
 800b58e:	f001 fea5 	bl	800d2dc <__mcmp>
 800b592:	2800      	cmp	r0, #0
 800b594:	dc67      	bgt.n	800b666 <_strtod_l+0x89e>
 800b596:	9b04      	ldr	r3, [sp, #16]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d171      	bne.n	800b680 <_strtod_l+0x8b8>
 800b59c:	e63d      	b.n	800b21a <_strtod_l+0x452>
 800b59e:	f018 0f01 	tst.w	r8, #1
 800b5a2:	d004      	beq.n	800b5ae <_strtod_l+0x7e6>
 800b5a4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b5a8:	f7f5 f84e 	bl	8000648 <__aeabi_dmul>
 800b5ac:	2301      	movs	r3, #1
 800b5ae:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b5b2:	3508      	adds	r5, #8
 800b5b4:	e6e5      	b.n	800b382 <_strtod_l+0x5ba>
 800b5b6:	f04f 32ff 	mov.w	r2, #4294967295
 800b5ba:	fa02 f303 	lsl.w	r3, r2, r3
 800b5be:	ea03 0a0a 	and.w	sl, r3, sl
 800b5c2:	e6ff      	b.n	800b3c4 <_strtod_l+0x5fc>
 800b5c4:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800b5c8:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800b5cc:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800b5d0:	36e2      	adds	r6, #226	; 0xe2
 800b5d2:	fa01 f306 	lsl.w	r3, r1, r6
 800b5d6:	930a      	str	r3, [sp, #40]	; 0x28
 800b5d8:	910f      	str	r1, [sp, #60]	; 0x3c
 800b5da:	e75d      	b.n	800b498 <_strtod_l+0x6d0>
 800b5dc:	2300      	movs	r3, #0
 800b5de:	930a      	str	r3, [sp, #40]	; 0x28
 800b5e0:	2301      	movs	r3, #1
 800b5e2:	930f      	str	r3, [sp, #60]	; 0x3c
 800b5e4:	e758      	b.n	800b498 <_strtod_l+0x6d0>
 800b5e6:	4632      	mov	r2, r6
 800b5e8:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b5ea:	4648      	mov	r0, r9
 800b5ec:	f001 fe22 	bl	800d234 <__lshift>
 800b5f0:	901c      	str	r0, [sp, #112]	; 0x70
 800b5f2:	2800      	cmp	r0, #0
 800b5f4:	f47f af7c 	bne.w	800b4f0 <_strtod_l+0x728>
 800b5f8:	e604      	b.n	800b204 <_strtod_l+0x43c>
 800b5fa:	bf00      	nop
 800b5fc:	0800e7a0 	.word	0x0800e7a0
 800b600:	fffffc02 	.word	0xfffffc02
 800b604:	465d      	mov	r5, fp
 800b606:	f040 8086 	bne.w	800b716 <_strtod_l+0x94e>
 800b60a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b60c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b610:	b32a      	cbz	r2, 800b65e <_strtod_l+0x896>
 800b612:	4aaf      	ldr	r2, [pc, #700]	; (800b8d0 <_strtod_l+0xb08>)
 800b614:	4293      	cmp	r3, r2
 800b616:	d153      	bne.n	800b6c0 <_strtod_l+0x8f8>
 800b618:	9b04      	ldr	r3, [sp, #16]
 800b61a:	4650      	mov	r0, sl
 800b61c:	b1d3      	cbz	r3, 800b654 <_strtod_l+0x88c>
 800b61e:	4aad      	ldr	r2, [pc, #692]	; (800b8d4 <_strtod_l+0xb0c>)
 800b620:	402a      	ands	r2, r5
 800b622:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800b626:	f04f 31ff 	mov.w	r1, #4294967295
 800b62a:	d816      	bhi.n	800b65a <_strtod_l+0x892>
 800b62c:	0d12      	lsrs	r2, r2, #20
 800b62e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b632:	fa01 f303 	lsl.w	r3, r1, r3
 800b636:	4298      	cmp	r0, r3
 800b638:	d142      	bne.n	800b6c0 <_strtod_l+0x8f8>
 800b63a:	4ba7      	ldr	r3, [pc, #668]	; (800b8d8 <_strtod_l+0xb10>)
 800b63c:	429d      	cmp	r5, r3
 800b63e:	d102      	bne.n	800b646 <_strtod_l+0x87e>
 800b640:	3001      	adds	r0, #1
 800b642:	f43f addf 	beq.w	800b204 <_strtod_l+0x43c>
 800b646:	4ba3      	ldr	r3, [pc, #652]	; (800b8d4 <_strtod_l+0xb0c>)
 800b648:	402b      	ands	r3, r5
 800b64a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800b64e:	f04f 0a00 	mov.w	sl, #0
 800b652:	e7a0      	b.n	800b596 <_strtod_l+0x7ce>
 800b654:	f04f 33ff 	mov.w	r3, #4294967295
 800b658:	e7ed      	b.n	800b636 <_strtod_l+0x86e>
 800b65a:	460b      	mov	r3, r1
 800b65c:	e7eb      	b.n	800b636 <_strtod_l+0x86e>
 800b65e:	bb7b      	cbnz	r3, 800b6c0 <_strtod_l+0x8f8>
 800b660:	f1ba 0f00 	cmp.w	sl, #0
 800b664:	d12c      	bne.n	800b6c0 <_strtod_l+0x8f8>
 800b666:	9904      	ldr	r1, [sp, #16]
 800b668:	4a9a      	ldr	r2, [pc, #616]	; (800b8d4 <_strtod_l+0xb0c>)
 800b66a:	465b      	mov	r3, fp
 800b66c:	b1f1      	cbz	r1, 800b6ac <_strtod_l+0x8e4>
 800b66e:	ea02 010b 	and.w	r1, r2, fp
 800b672:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b676:	dc19      	bgt.n	800b6ac <_strtod_l+0x8e4>
 800b678:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b67c:	f77f ae5b 	ble.w	800b336 <_strtod_l+0x56e>
 800b680:	4a96      	ldr	r2, [pc, #600]	; (800b8dc <_strtod_l+0xb14>)
 800b682:	2300      	movs	r3, #0
 800b684:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800b688:	4650      	mov	r0, sl
 800b68a:	4659      	mov	r1, fp
 800b68c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800b690:	f7f4 ffda 	bl	8000648 <__aeabi_dmul>
 800b694:	4682      	mov	sl, r0
 800b696:	468b      	mov	fp, r1
 800b698:	2900      	cmp	r1, #0
 800b69a:	f47f adbe 	bne.w	800b21a <_strtod_l+0x452>
 800b69e:	2800      	cmp	r0, #0
 800b6a0:	f47f adbb 	bne.w	800b21a <_strtod_l+0x452>
 800b6a4:	2322      	movs	r3, #34	; 0x22
 800b6a6:	f8c9 3000 	str.w	r3, [r9]
 800b6aa:	e5b6      	b.n	800b21a <_strtod_l+0x452>
 800b6ac:	4013      	ands	r3, r2
 800b6ae:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b6b2:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b6b6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b6ba:	f04f 3aff 	mov.w	sl, #4294967295
 800b6be:	e76a      	b.n	800b596 <_strtod_l+0x7ce>
 800b6c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b6c2:	b193      	cbz	r3, 800b6ea <_strtod_l+0x922>
 800b6c4:	422b      	tst	r3, r5
 800b6c6:	f43f af66 	beq.w	800b596 <_strtod_l+0x7ce>
 800b6ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b6cc:	9a04      	ldr	r2, [sp, #16]
 800b6ce:	4650      	mov	r0, sl
 800b6d0:	4659      	mov	r1, fp
 800b6d2:	b173      	cbz	r3, 800b6f2 <_strtod_l+0x92a>
 800b6d4:	f7ff fb5a 	bl	800ad8c <sulp>
 800b6d8:	4602      	mov	r2, r0
 800b6da:	460b      	mov	r3, r1
 800b6dc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b6e0:	f7f4 fdfc 	bl	80002dc <__adddf3>
 800b6e4:	4682      	mov	sl, r0
 800b6e6:	468b      	mov	fp, r1
 800b6e8:	e755      	b.n	800b596 <_strtod_l+0x7ce>
 800b6ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b6ec:	ea13 0f0a 	tst.w	r3, sl
 800b6f0:	e7e9      	b.n	800b6c6 <_strtod_l+0x8fe>
 800b6f2:	f7ff fb4b 	bl	800ad8c <sulp>
 800b6f6:	4602      	mov	r2, r0
 800b6f8:	460b      	mov	r3, r1
 800b6fa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b6fe:	f7f4 fdeb 	bl	80002d8 <__aeabi_dsub>
 800b702:	2200      	movs	r2, #0
 800b704:	2300      	movs	r3, #0
 800b706:	4682      	mov	sl, r0
 800b708:	468b      	mov	fp, r1
 800b70a:	f7f5 fa05 	bl	8000b18 <__aeabi_dcmpeq>
 800b70e:	2800      	cmp	r0, #0
 800b710:	f47f ae11 	bne.w	800b336 <_strtod_l+0x56e>
 800b714:	e73f      	b.n	800b596 <_strtod_l+0x7ce>
 800b716:	4641      	mov	r1, r8
 800b718:	4620      	mov	r0, r4
 800b71a:	f001 ff1c 	bl	800d556 <__ratio>
 800b71e:	ec57 6b10 	vmov	r6, r7, d0
 800b722:	2200      	movs	r2, #0
 800b724:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b728:	ee10 0a10 	vmov	r0, s0
 800b72c:	4639      	mov	r1, r7
 800b72e:	f7f5 fa07 	bl	8000b40 <__aeabi_dcmple>
 800b732:	2800      	cmp	r0, #0
 800b734:	d077      	beq.n	800b826 <_strtod_l+0xa5e>
 800b736:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d04a      	beq.n	800b7d2 <_strtod_l+0xa0a>
 800b73c:	4b68      	ldr	r3, [pc, #416]	; (800b8e0 <_strtod_l+0xb18>)
 800b73e:	2200      	movs	r2, #0
 800b740:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800b744:	4f66      	ldr	r7, [pc, #408]	; (800b8e0 <_strtod_l+0xb18>)
 800b746:	2600      	movs	r6, #0
 800b748:	4b62      	ldr	r3, [pc, #392]	; (800b8d4 <_strtod_l+0xb0c>)
 800b74a:	402b      	ands	r3, r5
 800b74c:	930f      	str	r3, [sp, #60]	; 0x3c
 800b74e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b750:	4b64      	ldr	r3, [pc, #400]	; (800b8e4 <_strtod_l+0xb1c>)
 800b752:	429a      	cmp	r2, r3
 800b754:	f040 80ce 	bne.w	800b8f4 <_strtod_l+0xb2c>
 800b758:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b75c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b760:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800b764:	ec4b ab10 	vmov	d0, sl, fp
 800b768:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800b76c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b770:	f001 fe2c 	bl	800d3cc <__ulp>
 800b774:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b778:	ec53 2b10 	vmov	r2, r3, d0
 800b77c:	f7f4 ff64 	bl	8000648 <__aeabi_dmul>
 800b780:	4652      	mov	r2, sl
 800b782:	465b      	mov	r3, fp
 800b784:	f7f4 fdaa 	bl	80002dc <__adddf3>
 800b788:	460b      	mov	r3, r1
 800b78a:	4952      	ldr	r1, [pc, #328]	; (800b8d4 <_strtod_l+0xb0c>)
 800b78c:	4a56      	ldr	r2, [pc, #344]	; (800b8e8 <_strtod_l+0xb20>)
 800b78e:	4019      	ands	r1, r3
 800b790:	4291      	cmp	r1, r2
 800b792:	4682      	mov	sl, r0
 800b794:	d95b      	bls.n	800b84e <_strtod_l+0xa86>
 800b796:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b798:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800b79c:	4293      	cmp	r3, r2
 800b79e:	d103      	bne.n	800b7a8 <_strtod_l+0x9e0>
 800b7a0:	9b08      	ldr	r3, [sp, #32]
 800b7a2:	3301      	adds	r3, #1
 800b7a4:	f43f ad2e 	beq.w	800b204 <_strtod_l+0x43c>
 800b7a8:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800b8d8 <_strtod_l+0xb10>
 800b7ac:	f04f 3aff 	mov.w	sl, #4294967295
 800b7b0:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b7b2:	4648      	mov	r0, r9
 800b7b4:	f001 fb73 	bl	800ce9e <_Bfree>
 800b7b8:	9905      	ldr	r1, [sp, #20]
 800b7ba:	4648      	mov	r0, r9
 800b7bc:	f001 fb6f 	bl	800ce9e <_Bfree>
 800b7c0:	4641      	mov	r1, r8
 800b7c2:	4648      	mov	r0, r9
 800b7c4:	f001 fb6b 	bl	800ce9e <_Bfree>
 800b7c8:	4621      	mov	r1, r4
 800b7ca:	4648      	mov	r0, r9
 800b7cc:	f001 fb67 	bl	800ce9e <_Bfree>
 800b7d0:	e619      	b.n	800b406 <_strtod_l+0x63e>
 800b7d2:	f1ba 0f00 	cmp.w	sl, #0
 800b7d6:	d11a      	bne.n	800b80e <_strtod_l+0xa46>
 800b7d8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b7dc:	b9eb      	cbnz	r3, 800b81a <_strtod_l+0xa52>
 800b7de:	2200      	movs	r2, #0
 800b7e0:	4b3f      	ldr	r3, [pc, #252]	; (800b8e0 <_strtod_l+0xb18>)
 800b7e2:	4630      	mov	r0, r6
 800b7e4:	4639      	mov	r1, r7
 800b7e6:	f7f5 f9a1 	bl	8000b2c <__aeabi_dcmplt>
 800b7ea:	b9c8      	cbnz	r0, 800b820 <_strtod_l+0xa58>
 800b7ec:	4630      	mov	r0, r6
 800b7ee:	4639      	mov	r1, r7
 800b7f0:	2200      	movs	r2, #0
 800b7f2:	4b3e      	ldr	r3, [pc, #248]	; (800b8ec <_strtod_l+0xb24>)
 800b7f4:	f7f4 ff28 	bl	8000648 <__aeabi_dmul>
 800b7f8:	4606      	mov	r6, r0
 800b7fa:	460f      	mov	r7, r1
 800b7fc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800b800:	9618      	str	r6, [sp, #96]	; 0x60
 800b802:	9319      	str	r3, [sp, #100]	; 0x64
 800b804:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800b808:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800b80c:	e79c      	b.n	800b748 <_strtod_l+0x980>
 800b80e:	f1ba 0f01 	cmp.w	sl, #1
 800b812:	d102      	bne.n	800b81a <_strtod_l+0xa52>
 800b814:	2d00      	cmp	r5, #0
 800b816:	f43f ad8e 	beq.w	800b336 <_strtod_l+0x56e>
 800b81a:	2200      	movs	r2, #0
 800b81c:	4b34      	ldr	r3, [pc, #208]	; (800b8f0 <_strtod_l+0xb28>)
 800b81e:	e78f      	b.n	800b740 <_strtod_l+0x978>
 800b820:	2600      	movs	r6, #0
 800b822:	4f32      	ldr	r7, [pc, #200]	; (800b8ec <_strtod_l+0xb24>)
 800b824:	e7ea      	b.n	800b7fc <_strtod_l+0xa34>
 800b826:	4b31      	ldr	r3, [pc, #196]	; (800b8ec <_strtod_l+0xb24>)
 800b828:	4630      	mov	r0, r6
 800b82a:	4639      	mov	r1, r7
 800b82c:	2200      	movs	r2, #0
 800b82e:	f7f4 ff0b 	bl	8000648 <__aeabi_dmul>
 800b832:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b834:	4606      	mov	r6, r0
 800b836:	460f      	mov	r7, r1
 800b838:	b933      	cbnz	r3, 800b848 <_strtod_l+0xa80>
 800b83a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b83e:	9010      	str	r0, [sp, #64]	; 0x40
 800b840:	9311      	str	r3, [sp, #68]	; 0x44
 800b842:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b846:	e7df      	b.n	800b808 <_strtod_l+0xa40>
 800b848:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800b84c:	e7f9      	b.n	800b842 <_strtod_l+0xa7a>
 800b84e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800b852:	9b04      	ldr	r3, [sp, #16]
 800b854:	2b00      	cmp	r3, #0
 800b856:	d1ab      	bne.n	800b7b0 <_strtod_l+0x9e8>
 800b858:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b85c:	0d1b      	lsrs	r3, r3, #20
 800b85e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b860:	051b      	lsls	r3, r3, #20
 800b862:	429a      	cmp	r2, r3
 800b864:	465d      	mov	r5, fp
 800b866:	d1a3      	bne.n	800b7b0 <_strtod_l+0x9e8>
 800b868:	4639      	mov	r1, r7
 800b86a:	4630      	mov	r0, r6
 800b86c:	f7f5 f99c 	bl	8000ba8 <__aeabi_d2iz>
 800b870:	f7f4 fe80 	bl	8000574 <__aeabi_i2d>
 800b874:	460b      	mov	r3, r1
 800b876:	4602      	mov	r2, r0
 800b878:	4639      	mov	r1, r7
 800b87a:	4630      	mov	r0, r6
 800b87c:	f7f4 fd2c 	bl	80002d8 <__aeabi_dsub>
 800b880:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b882:	4606      	mov	r6, r0
 800b884:	460f      	mov	r7, r1
 800b886:	b933      	cbnz	r3, 800b896 <_strtod_l+0xace>
 800b888:	f1ba 0f00 	cmp.w	sl, #0
 800b88c:	d103      	bne.n	800b896 <_strtod_l+0xace>
 800b88e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800b892:	2d00      	cmp	r5, #0
 800b894:	d06d      	beq.n	800b972 <_strtod_l+0xbaa>
 800b896:	a30a      	add	r3, pc, #40	; (adr r3, 800b8c0 <_strtod_l+0xaf8>)
 800b898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b89c:	4630      	mov	r0, r6
 800b89e:	4639      	mov	r1, r7
 800b8a0:	f7f5 f944 	bl	8000b2c <__aeabi_dcmplt>
 800b8a4:	2800      	cmp	r0, #0
 800b8a6:	f47f acb8 	bne.w	800b21a <_strtod_l+0x452>
 800b8aa:	a307      	add	r3, pc, #28	; (adr r3, 800b8c8 <_strtod_l+0xb00>)
 800b8ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8b0:	4630      	mov	r0, r6
 800b8b2:	4639      	mov	r1, r7
 800b8b4:	f7f5 f958 	bl	8000b68 <__aeabi_dcmpgt>
 800b8b8:	2800      	cmp	r0, #0
 800b8ba:	f43f af79 	beq.w	800b7b0 <_strtod_l+0x9e8>
 800b8be:	e4ac      	b.n	800b21a <_strtod_l+0x452>
 800b8c0:	94a03595 	.word	0x94a03595
 800b8c4:	3fdfffff 	.word	0x3fdfffff
 800b8c8:	35afe535 	.word	0x35afe535
 800b8cc:	3fe00000 	.word	0x3fe00000
 800b8d0:	000fffff 	.word	0x000fffff
 800b8d4:	7ff00000 	.word	0x7ff00000
 800b8d8:	7fefffff 	.word	0x7fefffff
 800b8dc:	39500000 	.word	0x39500000
 800b8e0:	3ff00000 	.word	0x3ff00000
 800b8e4:	7fe00000 	.word	0x7fe00000
 800b8e8:	7c9fffff 	.word	0x7c9fffff
 800b8ec:	3fe00000 	.word	0x3fe00000
 800b8f0:	bff00000 	.word	0xbff00000
 800b8f4:	9b04      	ldr	r3, [sp, #16]
 800b8f6:	b333      	cbz	r3, 800b946 <_strtod_l+0xb7e>
 800b8f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b8fa:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b8fe:	d822      	bhi.n	800b946 <_strtod_l+0xb7e>
 800b900:	a327      	add	r3, pc, #156	; (adr r3, 800b9a0 <_strtod_l+0xbd8>)
 800b902:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b906:	4630      	mov	r0, r6
 800b908:	4639      	mov	r1, r7
 800b90a:	f7f5 f919 	bl	8000b40 <__aeabi_dcmple>
 800b90e:	b1a0      	cbz	r0, 800b93a <_strtod_l+0xb72>
 800b910:	4639      	mov	r1, r7
 800b912:	4630      	mov	r0, r6
 800b914:	f7f5 f970 	bl	8000bf8 <__aeabi_d2uiz>
 800b918:	2800      	cmp	r0, #0
 800b91a:	bf08      	it	eq
 800b91c:	2001      	moveq	r0, #1
 800b91e:	f7f4 fe19 	bl	8000554 <__aeabi_ui2d>
 800b922:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b924:	4606      	mov	r6, r0
 800b926:	460f      	mov	r7, r1
 800b928:	bb03      	cbnz	r3, 800b96c <_strtod_l+0xba4>
 800b92a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b92e:	9012      	str	r0, [sp, #72]	; 0x48
 800b930:	9313      	str	r3, [sp, #76]	; 0x4c
 800b932:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800b936:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800b93a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b93c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b93e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b942:	1a9b      	subs	r3, r3, r2
 800b944:	930b      	str	r3, [sp, #44]	; 0x2c
 800b946:	ed9d 0b08 	vldr	d0, [sp, #32]
 800b94a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800b94e:	f001 fd3d 	bl	800d3cc <__ulp>
 800b952:	4650      	mov	r0, sl
 800b954:	ec53 2b10 	vmov	r2, r3, d0
 800b958:	4659      	mov	r1, fp
 800b95a:	f7f4 fe75 	bl	8000648 <__aeabi_dmul>
 800b95e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b962:	f7f4 fcbb 	bl	80002dc <__adddf3>
 800b966:	4682      	mov	sl, r0
 800b968:	468b      	mov	fp, r1
 800b96a:	e772      	b.n	800b852 <_strtod_l+0xa8a>
 800b96c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 800b970:	e7df      	b.n	800b932 <_strtod_l+0xb6a>
 800b972:	a30d      	add	r3, pc, #52	; (adr r3, 800b9a8 <_strtod_l+0xbe0>)
 800b974:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b978:	f7f5 f8d8 	bl	8000b2c <__aeabi_dcmplt>
 800b97c:	e79c      	b.n	800b8b8 <_strtod_l+0xaf0>
 800b97e:	2300      	movs	r3, #0
 800b980:	930d      	str	r3, [sp, #52]	; 0x34
 800b982:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b984:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b986:	6013      	str	r3, [r2, #0]
 800b988:	f7ff ba61 	b.w	800ae4e <_strtod_l+0x86>
 800b98c:	2b65      	cmp	r3, #101	; 0x65
 800b98e:	f04f 0200 	mov.w	r2, #0
 800b992:	f43f ab4e 	beq.w	800b032 <_strtod_l+0x26a>
 800b996:	2101      	movs	r1, #1
 800b998:	4614      	mov	r4, r2
 800b99a:	9104      	str	r1, [sp, #16]
 800b99c:	f7ff bacb 	b.w	800af36 <_strtod_l+0x16e>
 800b9a0:	ffc00000 	.word	0xffc00000
 800b9a4:	41dfffff 	.word	0x41dfffff
 800b9a8:	94a03595 	.word	0x94a03595
 800b9ac:	3fcfffff 	.word	0x3fcfffff

0800b9b0 <_strtod_r>:
 800b9b0:	4b05      	ldr	r3, [pc, #20]	; (800b9c8 <_strtod_r+0x18>)
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	b410      	push	{r4}
 800b9b6:	6a1b      	ldr	r3, [r3, #32]
 800b9b8:	4c04      	ldr	r4, [pc, #16]	; (800b9cc <_strtod_r+0x1c>)
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	bf08      	it	eq
 800b9be:	4623      	moveq	r3, r4
 800b9c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b9c4:	f7ff ba00 	b.w	800adc8 <_strtod_l>
 800b9c8:	2000000c 	.word	0x2000000c
 800b9cc:	20000070 	.word	0x20000070

0800b9d0 <_strtol_l.isra.0>:
 800b9d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b9d4:	4680      	mov	r8, r0
 800b9d6:	4689      	mov	r9, r1
 800b9d8:	4692      	mov	sl, r2
 800b9da:	461e      	mov	r6, r3
 800b9dc:	460f      	mov	r7, r1
 800b9de:	463d      	mov	r5, r7
 800b9e0:	9808      	ldr	r0, [sp, #32]
 800b9e2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b9e6:	f001 f9ed 	bl	800cdc4 <__locale_ctype_ptr_l>
 800b9ea:	4420      	add	r0, r4
 800b9ec:	7843      	ldrb	r3, [r0, #1]
 800b9ee:	f013 0308 	ands.w	r3, r3, #8
 800b9f2:	d132      	bne.n	800ba5a <_strtol_l.isra.0+0x8a>
 800b9f4:	2c2d      	cmp	r4, #45	; 0x2d
 800b9f6:	d132      	bne.n	800ba5e <_strtol_l.isra.0+0x8e>
 800b9f8:	787c      	ldrb	r4, [r7, #1]
 800b9fa:	1cbd      	adds	r5, r7, #2
 800b9fc:	2201      	movs	r2, #1
 800b9fe:	2e00      	cmp	r6, #0
 800ba00:	d05d      	beq.n	800babe <_strtol_l.isra.0+0xee>
 800ba02:	2e10      	cmp	r6, #16
 800ba04:	d109      	bne.n	800ba1a <_strtol_l.isra.0+0x4a>
 800ba06:	2c30      	cmp	r4, #48	; 0x30
 800ba08:	d107      	bne.n	800ba1a <_strtol_l.isra.0+0x4a>
 800ba0a:	782b      	ldrb	r3, [r5, #0]
 800ba0c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ba10:	2b58      	cmp	r3, #88	; 0x58
 800ba12:	d14f      	bne.n	800bab4 <_strtol_l.isra.0+0xe4>
 800ba14:	786c      	ldrb	r4, [r5, #1]
 800ba16:	2610      	movs	r6, #16
 800ba18:	3502      	adds	r5, #2
 800ba1a:	2a00      	cmp	r2, #0
 800ba1c:	bf14      	ite	ne
 800ba1e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800ba22:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800ba26:	2700      	movs	r7, #0
 800ba28:	fbb1 fcf6 	udiv	ip, r1, r6
 800ba2c:	4638      	mov	r0, r7
 800ba2e:	fb06 1e1c 	mls	lr, r6, ip, r1
 800ba32:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800ba36:	2b09      	cmp	r3, #9
 800ba38:	d817      	bhi.n	800ba6a <_strtol_l.isra.0+0x9a>
 800ba3a:	461c      	mov	r4, r3
 800ba3c:	42a6      	cmp	r6, r4
 800ba3e:	dd23      	ble.n	800ba88 <_strtol_l.isra.0+0xb8>
 800ba40:	1c7b      	adds	r3, r7, #1
 800ba42:	d007      	beq.n	800ba54 <_strtol_l.isra.0+0x84>
 800ba44:	4584      	cmp	ip, r0
 800ba46:	d31c      	bcc.n	800ba82 <_strtol_l.isra.0+0xb2>
 800ba48:	d101      	bne.n	800ba4e <_strtol_l.isra.0+0x7e>
 800ba4a:	45a6      	cmp	lr, r4
 800ba4c:	db19      	blt.n	800ba82 <_strtol_l.isra.0+0xb2>
 800ba4e:	fb00 4006 	mla	r0, r0, r6, r4
 800ba52:	2701      	movs	r7, #1
 800ba54:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ba58:	e7eb      	b.n	800ba32 <_strtol_l.isra.0+0x62>
 800ba5a:	462f      	mov	r7, r5
 800ba5c:	e7bf      	b.n	800b9de <_strtol_l.isra.0+0xe>
 800ba5e:	2c2b      	cmp	r4, #43	; 0x2b
 800ba60:	bf04      	itt	eq
 800ba62:	1cbd      	addeq	r5, r7, #2
 800ba64:	787c      	ldrbeq	r4, [r7, #1]
 800ba66:	461a      	mov	r2, r3
 800ba68:	e7c9      	b.n	800b9fe <_strtol_l.isra.0+0x2e>
 800ba6a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800ba6e:	2b19      	cmp	r3, #25
 800ba70:	d801      	bhi.n	800ba76 <_strtol_l.isra.0+0xa6>
 800ba72:	3c37      	subs	r4, #55	; 0x37
 800ba74:	e7e2      	b.n	800ba3c <_strtol_l.isra.0+0x6c>
 800ba76:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800ba7a:	2b19      	cmp	r3, #25
 800ba7c:	d804      	bhi.n	800ba88 <_strtol_l.isra.0+0xb8>
 800ba7e:	3c57      	subs	r4, #87	; 0x57
 800ba80:	e7dc      	b.n	800ba3c <_strtol_l.isra.0+0x6c>
 800ba82:	f04f 37ff 	mov.w	r7, #4294967295
 800ba86:	e7e5      	b.n	800ba54 <_strtol_l.isra.0+0x84>
 800ba88:	1c7b      	adds	r3, r7, #1
 800ba8a:	d108      	bne.n	800ba9e <_strtol_l.isra.0+0xce>
 800ba8c:	2322      	movs	r3, #34	; 0x22
 800ba8e:	f8c8 3000 	str.w	r3, [r8]
 800ba92:	4608      	mov	r0, r1
 800ba94:	f1ba 0f00 	cmp.w	sl, #0
 800ba98:	d107      	bne.n	800baaa <_strtol_l.isra.0+0xda>
 800ba9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba9e:	b102      	cbz	r2, 800baa2 <_strtol_l.isra.0+0xd2>
 800baa0:	4240      	negs	r0, r0
 800baa2:	f1ba 0f00 	cmp.w	sl, #0
 800baa6:	d0f8      	beq.n	800ba9a <_strtol_l.isra.0+0xca>
 800baa8:	b10f      	cbz	r7, 800baae <_strtol_l.isra.0+0xde>
 800baaa:	f105 39ff 	add.w	r9, r5, #4294967295
 800baae:	f8ca 9000 	str.w	r9, [sl]
 800bab2:	e7f2      	b.n	800ba9a <_strtol_l.isra.0+0xca>
 800bab4:	2430      	movs	r4, #48	; 0x30
 800bab6:	2e00      	cmp	r6, #0
 800bab8:	d1af      	bne.n	800ba1a <_strtol_l.isra.0+0x4a>
 800baba:	2608      	movs	r6, #8
 800babc:	e7ad      	b.n	800ba1a <_strtol_l.isra.0+0x4a>
 800babe:	2c30      	cmp	r4, #48	; 0x30
 800bac0:	d0a3      	beq.n	800ba0a <_strtol_l.isra.0+0x3a>
 800bac2:	260a      	movs	r6, #10
 800bac4:	e7a9      	b.n	800ba1a <_strtol_l.isra.0+0x4a>
	...

0800bac8 <_strtol_r>:
 800bac8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800baca:	4c06      	ldr	r4, [pc, #24]	; (800bae4 <_strtol_r+0x1c>)
 800bacc:	4d06      	ldr	r5, [pc, #24]	; (800bae8 <_strtol_r+0x20>)
 800bace:	6824      	ldr	r4, [r4, #0]
 800bad0:	6a24      	ldr	r4, [r4, #32]
 800bad2:	2c00      	cmp	r4, #0
 800bad4:	bf08      	it	eq
 800bad6:	462c      	moveq	r4, r5
 800bad8:	9400      	str	r4, [sp, #0]
 800bada:	f7ff ff79 	bl	800b9d0 <_strtol_l.isra.0>
 800bade:	b003      	add	sp, #12
 800bae0:	bd30      	pop	{r4, r5, pc}
 800bae2:	bf00      	nop
 800bae4:	2000000c 	.word	0x2000000c
 800bae8:	20000070 	.word	0x20000070

0800baec <quorem>:
 800baec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800baf0:	6903      	ldr	r3, [r0, #16]
 800baf2:	690c      	ldr	r4, [r1, #16]
 800baf4:	42a3      	cmp	r3, r4
 800baf6:	4680      	mov	r8, r0
 800baf8:	f2c0 8082 	blt.w	800bc00 <quorem+0x114>
 800bafc:	3c01      	subs	r4, #1
 800bafe:	f101 0714 	add.w	r7, r1, #20
 800bb02:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800bb06:	f100 0614 	add.w	r6, r0, #20
 800bb0a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800bb0e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800bb12:	eb06 030c 	add.w	r3, r6, ip
 800bb16:	3501      	adds	r5, #1
 800bb18:	eb07 090c 	add.w	r9, r7, ip
 800bb1c:	9301      	str	r3, [sp, #4]
 800bb1e:	fbb0 f5f5 	udiv	r5, r0, r5
 800bb22:	b395      	cbz	r5, 800bb8a <quorem+0x9e>
 800bb24:	f04f 0a00 	mov.w	sl, #0
 800bb28:	4638      	mov	r0, r7
 800bb2a:	46b6      	mov	lr, r6
 800bb2c:	46d3      	mov	fp, sl
 800bb2e:	f850 2b04 	ldr.w	r2, [r0], #4
 800bb32:	b293      	uxth	r3, r2
 800bb34:	fb05 a303 	mla	r3, r5, r3, sl
 800bb38:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bb3c:	b29b      	uxth	r3, r3
 800bb3e:	ebab 0303 	sub.w	r3, fp, r3
 800bb42:	0c12      	lsrs	r2, r2, #16
 800bb44:	f8de b000 	ldr.w	fp, [lr]
 800bb48:	fb05 a202 	mla	r2, r5, r2, sl
 800bb4c:	fa13 f38b 	uxtah	r3, r3, fp
 800bb50:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800bb54:	fa1f fb82 	uxth.w	fp, r2
 800bb58:	f8de 2000 	ldr.w	r2, [lr]
 800bb5c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800bb60:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bb64:	b29b      	uxth	r3, r3
 800bb66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bb6a:	4581      	cmp	r9, r0
 800bb6c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800bb70:	f84e 3b04 	str.w	r3, [lr], #4
 800bb74:	d2db      	bcs.n	800bb2e <quorem+0x42>
 800bb76:	f856 300c 	ldr.w	r3, [r6, ip]
 800bb7a:	b933      	cbnz	r3, 800bb8a <quorem+0x9e>
 800bb7c:	9b01      	ldr	r3, [sp, #4]
 800bb7e:	3b04      	subs	r3, #4
 800bb80:	429e      	cmp	r6, r3
 800bb82:	461a      	mov	r2, r3
 800bb84:	d330      	bcc.n	800bbe8 <quorem+0xfc>
 800bb86:	f8c8 4010 	str.w	r4, [r8, #16]
 800bb8a:	4640      	mov	r0, r8
 800bb8c:	f001 fba6 	bl	800d2dc <__mcmp>
 800bb90:	2800      	cmp	r0, #0
 800bb92:	db25      	blt.n	800bbe0 <quorem+0xf4>
 800bb94:	3501      	adds	r5, #1
 800bb96:	4630      	mov	r0, r6
 800bb98:	f04f 0c00 	mov.w	ip, #0
 800bb9c:	f857 2b04 	ldr.w	r2, [r7], #4
 800bba0:	f8d0 e000 	ldr.w	lr, [r0]
 800bba4:	b293      	uxth	r3, r2
 800bba6:	ebac 0303 	sub.w	r3, ip, r3
 800bbaa:	0c12      	lsrs	r2, r2, #16
 800bbac:	fa13 f38e 	uxtah	r3, r3, lr
 800bbb0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800bbb4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bbb8:	b29b      	uxth	r3, r3
 800bbba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bbbe:	45b9      	cmp	r9, r7
 800bbc0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800bbc4:	f840 3b04 	str.w	r3, [r0], #4
 800bbc8:	d2e8      	bcs.n	800bb9c <quorem+0xb0>
 800bbca:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800bbce:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800bbd2:	b92a      	cbnz	r2, 800bbe0 <quorem+0xf4>
 800bbd4:	3b04      	subs	r3, #4
 800bbd6:	429e      	cmp	r6, r3
 800bbd8:	461a      	mov	r2, r3
 800bbda:	d30b      	bcc.n	800bbf4 <quorem+0x108>
 800bbdc:	f8c8 4010 	str.w	r4, [r8, #16]
 800bbe0:	4628      	mov	r0, r5
 800bbe2:	b003      	add	sp, #12
 800bbe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbe8:	6812      	ldr	r2, [r2, #0]
 800bbea:	3b04      	subs	r3, #4
 800bbec:	2a00      	cmp	r2, #0
 800bbee:	d1ca      	bne.n	800bb86 <quorem+0x9a>
 800bbf0:	3c01      	subs	r4, #1
 800bbf2:	e7c5      	b.n	800bb80 <quorem+0x94>
 800bbf4:	6812      	ldr	r2, [r2, #0]
 800bbf6:	3b04      	subs	r3, #4
 800bbf8:	2a00      	cmp	r2, #0
 800bbfa:	d1ef      	bne.n	800bbdc <quorem+0xf0>
 800bbfc:	3c01      	subs	r4, #1
 800bbfe:	e7ea      	b.n	800bbd6 <quorem+0xea>
 800bc00:	2000      	movs	r0, #0
 800bc02:	e7ee      	b.n	800bbe2 <quorem+0xf6>
 800bc04:	0000      	movs	r0, r0
	...

0800bc08 <_dtoa_r>:
 800bc08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc0c:	ec57 6b10 	vmov	r6, r7, d0
 800bc10:	b097      	sub	sp, #92	; 0x5c
 800bc12:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800bc14:	9106      	str	r1, [sp, #24]
 800bc16:	4604      	mov	r4, r0
 800bc18:	920b      	str	r2, [sp, #44]	; 0x2c
 800bc1a:	9312      	str	r3, [sp, #72]	; 0x48
 800bc1c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800bc20:	e9cd 6700 	strd	r6, r7, [sp]
 800bc24:	b93d      	cbnz	r5, 800bc36 <_dtoa_r+0x2e>
 800bc26:	2010      	movs	r0, #16
 800bc28:	f001 f8e0 	bl	800cdec <malloc>
 800bc2c:	6260      	str	r0, [r4, #36]	; 0x24
 800bc2e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800bc32:	6005      	str	r5, [r0, #0]
 800bc34:	60c5      	str	r5, [r0, #12]
 800bc36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bc38:	6819      	ldr	r1, [r3, #0]
 800bc3a:	b151      	cbz	r1, 800bc52 <_dtoa_r+0x4a>
 800bc3c:	685a      	ldr	r2, [r3, #4]
 800bc3e:	604a      	str	r2, [r1, #4]
 800bc40:	2301      	movs	r3, #1
 800bc42:	4093      	lsls	r3, r2
 800bc44:	608b      	str	r3, [r1, #8]
 800bc46:	4620      	mov	r0, r4
 800bc48:	f001 f929 	bl	800ce9e <_Bfree>
 800bc4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bc4e:	2200      	movs	r2, #0
 800bc50:	601a      	str	r2, [r3, #0]
 800bc52:	1e3b      	subs	r3, r7, #0
 800bc54:	bfbb      	ittet	lt
 800bc56:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800bc5a:	9301      	strlt	r3, [sp, #4]
 800bc5c:	2300      	movge	r3, #0
 800bc5e:	2201      	movlt	r2, #1
 800bc60:	bfac      	ite	ge
 800bc62:	f8c8 3000 	strge.w	r3, [r8]
 800bc66:	f8c8 2000 	strlt.w	r2, [r8]
 800bc6a:	4baf      	ldr	r3, [pc, #700]	; (800bf28 <_dtoa_r+0x320>)
 800bc6c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800bc70:	ea33 0308 	bics.w	r3, r3, r8
 800bc74:	d114      	bne.n	800bca0 <_dtoa_r+0x98>
 800bc76:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bc78:	f242 730f 	movw	r3, #9999	; 0x270f
 800bc7c:	6013      	str	r3, [r2, #0]
 800bc7e:	9b00      	ldr	r3, [sp, #0]
 800bc80:	b923      	cbnz	r3, 800bc8c <_dtoa_r+0x84>
 800bc82:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800bc86:	2800      	cmp	r0, #0
 800bc88:	f000 8542 	beq.w	800c710 <_dtoa_r+0xb08>
 800bc8c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bc8e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800bf3c <_dtoa_r+0x334>
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	f000 8544 	beq.w	800c720 <_dtoa_r+0xb18>
 800bc98:	f10b 0303 	add.w	r3, fp, #3
 800bc9c:	f000 bd3e 	b.w	800c71c <_dtoa_r+0xb14>
 800bca0:	e9dd 6700 	ldrd	r6, r7, [sp]
 800bca4:	2200      	movs	r2, #0
 800bca6:	2300      	movs	r3, #0
 800bca8:	4630      	mov	r0, r6
 800bcaa:	4639      	mov	r1, r7
 800bcac:	f7f4 ff34 	bl	8000b18 <__aeabi_dcmpeq>
 800bcb0:	4681      	mov	r9, r0
 800bcb2:	b168      	cbz	r0, 800bcd0 <_dtoa_r+0xc8>
 800bcb4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bcb6:	2301      	movs	r3, #1
 800bcb8:	6013      	str	r3, [r2, #0]
 800bcba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	f000 8524 	beq.w	800c70a <_dtoa_r+0xb02>
 800bcc2:	4b9a      	ldr	r3, [pc, #616]	; (800bf2c <_dtoa_r+0x324>)
 800bcc4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bcc6:	f103 3bff 	add.w	fp, r3, #4294967295
 800bcca:	6013      	str	r3, [r2, #0]
 800bccc:	f000 bd28 	b.w	800c720 <_dtoa_r+0xb18>
 800bcd0:	aa14      	add	r2, sp, #80	; 0x50
 800bcd2:	a915      	add	r1, sp, #84	; 0x54
 800bcd4:	ec47 6b10 	vmov	d0, r6, r7
 800bcd8:	4620      	mov	r0, r4
 800bcda:	f001 fbed 	bl	800d4b8 <__d2b>
 800bcde:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800bce2:	9004      	str	r0, [sp, #16]
 800bce4:	2d00      	cmp	r5, #0
 800bce6:	d07c      	beq.n	800bde2 <_dtoa_r+0x1da>
 800bce8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bcec:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800bcf0:	46b2      	mov	sl, r6
 800bcf2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800bcf6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800bcfa:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800bcfe:	2200      	movs	r2, #0
 800bd00:	4b8b      	ldr	r3, [pc, #556]	; (800bf30 <_dtoa_r+0x328>)
 800bd02:	4650      	mov	r0, sl
 800bd04:	4659      	mov	r1, fp
 800bd06:	f7f4 fae7 	bl	80002d8 <__aeabi_dsub>
 800bd0a:	a381      	add	r3, pc, #516	; (adr r3, 800bf10 <_dtoa_r+0x308>)
 800bd0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd10:	f7f4 fc9a 	bl	8000648 <__aeabi_dmul>
 800bd14:	a380      	add	r3, pc, #512	; (adr r3, 800bf18 <_dtoa_r+0x310>)
 800bd16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd1a:	f7f4 fadf 	bl	80002dc <__adddf3>
 800bd1e:	4606      	mov	r6, r0
 800bd20:	4628      	mov	r0, r5
 800bd22:	460f      	mov	r7, r1
 800bd24:	f7f4 fc26 	bl	8000574 <__aeabi_i2d>
 800bd28:	a37d      	add	r3, pc, #500	; (adr r3, 800bf20 <_dtoa_r+0x318>)
 800bd2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd2e:	f7f4 fc8b 	bl	8000648 <__aeabi_dmul>
 800bd32:	4602      	mov	r2, r0
 800bd34:	460b      	mov	r3, r1
 800bd36:	4630      	mov	r0, r6
 800bd38:	4639      	mov	r1, r7
 800bd3a:	f7f4 facf 	bl	80002dc <__adddf3>
 800bd3e:	4606      	mov	r6, r0
 800bd40:	460f      	mov	r7, r1
 800bd42:	f7f4 ff31 	bl	8000ba8 <__aeabi_d2iz>
 800bd46:	2200      	movs	r2, #0
 800bd48:	4682      	mov	sl, r0
 800bd4a:	2300      	movs	r3, #0
 800bd4c:	4630      	mov	r0, r6
 800bd4e:	4639      	mov	r1, r7
 800bd50:	f7f4 feec 	bl	8000b2c <__aeabi_dcmplt>
 800bd54:	b148      	cbz	r0, 800bd6a <_dtoa_r+0x162>
 800bd56:	4650      	mov	r0, sl
 800bd58:	f7f4 fc0c 	bl	8000574 <__aeabi_i2d>
 800bd5c:	4632      	mov	r2, r6
 800bd5e:	463b      	mov	r3, r7
 800bd60:	f7f4 feda 	bl	8000b18 <__aeabi_dcmpeq>
 800bd64:	b908      	cbnz	r0, 800bd6a <_dtoa_r+0x162>
 800bd66:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bd6a:	f1ba 0f16 	cmp.w	sl, #22
 800bd6e:	d859      	bhi.n	800be24 <_dtoa_r+0x21c>
 800bd70:	4970      	ldr	r1, [pc, #448]	; (800bf34 <_dtoa_r+0x32c>)
 800bd72:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800bd76:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bd7a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd7e:	f7f4 fef3 	bl	8000b68 <__aeabi_dcmpgt>
 800bd82:	2800      	cmp	r0, #0
 800bd84:	d050      	beq.n	800be28 <_dtoa_r+0x220>
 800bd86:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	930f      	str	r3, [sp, #60]	; 0x3c
 800bd8e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bd90:	1b5d      	subs	r5, r3, r5
 800bd92:	f1b5 0801 	subs.w	r8, r5, #1
 800bd96:	bf49      	itett	mi
 800bd98:	f1c5 0301 	rsbmi	r3, r5, #1
 800bd9c:	2300      	movpl	r3, #0
 800bd9e:	9305      	strmi	r3, [sp, #20]
 800bda0:	f04f 0800 	movmi.w	r8, #0
 800bda4:	bf58      	it	pl
 800bda6:	9305      	strpl	r3, [sp, #20]
 800bda8:	f1ba 0f00 	cmp.w	sl, #0
 800bdac:	db3e      	blt.n	800be2c <_dtoa_r+0x224>
 800bdae:	2300      	movs	r3, #0
 800bdb0:	44d0      	add	r8, sl
 800bdb2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800bdb6:	9307      	str	r3, [sp, #28]
 800bdb8:	9b06      	ldr	r3, [sp, #24]
 800bdba:	2b09      	cmp	r3, #9
 800bdbc:	f200 8090 	bhi.w	800bee0 <_dtoa_r+0x2d8>
 800bdc0:	2b05      	cmp	r3, #5
 800bdc2:	bfc4      	itt	gt
 800bdc4:	3b04      	subgt	r3, #4
 800bdc6:	9306      	strgt	r3, [sp, #24]
 800bdc8:	9b06      	ldr	r3, [sp, #24]
 800bdca:	f1a3 0302 	sub.w	r3, r3, #2
 800bdce:	bfcc      	ite	gt
 800bdd0:	2500      	movgt	r5, #0
 800bdd2:	2501      	movle	r5, #1
 800bdd4:	2b03      	cmp	r3, #3
 800bdd6:	f200 808f 	bhi.w	800bef8 <_dtoa_r+0x2f0>
 800bdda:	e8df f003 	tbb	[pc, r3]
 800bdde:	7f7d      	.short	0x7f7d
 800bde0:	7131      	.short	0x7131
 800bde2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800bde6:	441d      	add	r5, r3
 800bde8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800bdec:	2820      	cmp	r0, #32
 800bdee:	dd13      	ble.n	800be18 <_dtoa_r+0x210>
 800bdf0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800bdf4:	9b00      	ldr	r3, [sp, #0]
 800bdf6:	fa08 f800 	lsl.w	r8, r8, r0
 800bdfa:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800bdfe:	fa23 f000 	lsr.w	r0, r3, r0
 800be02:	ea48 0000 	orr.w	r0, r8, r0
 800be06:	f7f4 fba5 	bl	8000554 <__aeabi_ui2d>
 800be0a:	2301      	movs	r3, #1
 800be0c:	4682      	mov	sl, r0
 800be0e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800be12:	3d01      	subs	r5, #1
 800be14:	9313      	str	r3, [sp, #76]	; 0x4c
 800be16:	e772      	b.n	800bcfe <_dtoa_r+0xf6>
 800be18:	9b00      	ldr	r3, [sp, #0]
 800be1a:	f1c0 0020 	rsb	r0, r0, #32
 800be1e:	fa03 f000 	lsl.w	r0, r3, r0
 800be22:	e7f0      	b.n	800be06 <_dtoa_r+0x1fe>
 800be24:	2301      	movs	r3, #1
 800be26:	e7b1      	b.n	800bd8c <_dtoa_r+0x184>
 800be28:	900f      	str	r0, [sp, #60]	; 0x3c
 800be2a:	e7b0      	b.n	800bd8e <_dtoa_r+0x186>
 800be2c:	9b05      	ldr	r3, [sp, #20]
 800be2e:	eba3 030a 	sub.w	r3, r3, sl
 800be32:	9305      	str	r3, [sp, #20]
 800be34:	f1ca 0300 	rsb	r3, sl, #0
 800be38:	9307      	str	r3, [sp, #28]
 800be3a:	2300      	movs	r3, #0
 800be3c:	930e      	str	r3, [sp, #56]	; 0x38
 800be3e:	e7bb      	b.n	800bdb8 <_dtoa_r+0x1b0>
 800be40:	2301      	movs	r3, #1
 800be42:	930a      	str	r3, [sp, #40]	; 0x28
 800be44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800be46:	2b00      	cmp	r3, #0
 800be48:	dd59      	ble.n	800befe <_dtoa_r+0x2f6>
 800be4a:	9302      	str	r3, [sp, #8]
 800be4c:	4699      	mov	r9, r3
 800be4e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800be50:	2200      	movs	r2, #0
 800be52:	6072      	str	r2, [r6, #4]
 800be54:	2204      	movs	r2, #4
 800be56:	f102 0014 	add.w	r0, r2, #20
 800be5a:	4298      	cmp	r0, r3
 800be5c:	6871      	ldr	r1, [r6, #4]
 800be5e:	d953      	bls.n	800bf08 <_dtoa_r+0x300>
 800be60:	4620      	mov	r0, r4
 800be62:	f000 ffe8 	bl	800ce36 <_Balloc>
 800be66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800be68:	6030      	str	r0, [r6, #0]
 800be6a:	f1b9 0f0e 	cmp.w	r9, #14
 800be6e:	f8d3 b000 	ldr.w	fp, [r3]
 800be72:	f200 80e6 	bhi.w	800c042 <_dtoa_r+0x43a>
 800be76:	2d00      	cmp	r5, #0
 800be78:	f000 80e3 	beq.w	800c042 <_dtoa_r+0x43a>
 800be7c:	ed9d 7b00 	vldr	d7, [sp]
 800be80:	f1ba 0f00 	cmp.w	sl, #0
 800be84:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800be88:	dd74      	ble.n	800bf74 <_dtoa_r+0x36c>
 800be8a:	4a2a      	ldr	r2, [pc, #168]	; (800bf34 <_dtoa_r+0x32c>)
 800be8c:	f00a 030f 	and.w	r3, sl, #15
 800be90:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800be94:	ed93 7b00 	vldr	d7, [r3]
 800be98:	ea4f 162a 	mov.w	r6, sl, asr #4
 800be9c:	06f0      	lsls	r0, r6, #27
 800be9e:	ed8d 7b08 	vstr	d7, [sp, #32]
 800bea2:	d565      	bpl.n	800bf70 <_dtoa_r+0x368>
 800bea4:	4b24      	ldr	r3, [pc, #144]	; (800bf38 <_dtoa_r+0x330>)
 800bea6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800beaa:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800beae:	f7f4 fcf5 	bl	800089c <__aeabi_ddiv>
 800beb2:	e9cd 0100 	strd	r0, r1, [sp]
 800beb6:	f006 060f 	and.w	r6, r6, #15
 800beba:	2503      	movs	r5, #3
 800bebc:	4f1e      	ldr	r7, [pc, #120]	; (800bf38 <_dtoa_r+0x330>)
 800bebe:	e04c      	b.n	800bf5a <_dtoa_r+0x352>
 800bec0:	2301      	movs	r3, #1
 800bec2:	930a      	str	r3, [sp, #40]	; 0x28
 800bec4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bec6:	4453      	add	r3, sl
 800bec8:	f103 0901 	add.w	r9, r3, #1
 800becc:	9302      	str	r3, [sp, #8]
 800bece:	464b      	mov	r3, r9
 800bed0:	2b01      	cmp	r3, #1
 800bed2:	bfb8      	it	lt
 800bed4:	2301      	movlt	r3, #1
 800bed6:	e7ba      	b.n	800be4e <_dtoa_r+0x246>
 800bed8:	2300      	movs	r3, #0
 800beda:	e7b2      	b.n	800be42 <_dtoa_r+0x23a>
 800bedc:	2300      	movs	r3, #0
 800bede:	e7f0      	b.n	800bec2 <_dtoa_r+0x2ba>
 800bee0:	2501      	movs	r5, #1
 800bee2:	2300      	movs	r3, #0
 800bee4:	9306      	str	r3, [sp, #24]
 800bee6:	950a      	str	r5, [sp, #40]	; 0x28
 800bee8:	f04f 33ff 	mov.w	r3, #4294967295
 800beec:	9302      	str	r3, [sp, #8]
 800beee:	4699      	mov	r9, r3
 800bef0:	2200      	movs	r2, #0
 800bef2:	2312      	movs	r3, #18
 800bef4:	920b      	str	r2, [sp, #44]	; 0x2c
 800bef6:	e7aa      	b.n	800be4e <_dtoa_r+0x246>
 800bef8:	2301      	movs	r3, #1
 800befa:	930a      	str	r3, [sp, #40]	; 0x28
 800befc:	e7f4      	b.n	800bee8 <_dtoa_r+0x2e0>
 800befe:	2301      	movs	r3, #1
 800bf00:	9302      	str	r3, [sp, #8]
 800bf02:	4699      	mov	r9, r3
 800bf04:	461a      	mov	r2, r3
 800bf06:	e7f5      	b.n	800bef4 <_dtoa_r+0x2ec>
 800bf08:	3101      	adds	r1, #1
 800bf0a:	6071      	str	r1, [r6, #4]
 800bf0c:	0052      	lsls	r2, r2, #1
 800bf0e:	e7a2      	b.n	800be56 <_dtoa_r+0x24e>
 800bf10:	636f4361 	.word	0x636f4361
 800bf14:	3fd287a7 	.word	0x3fd287a7
 800bf18:	8b60c8b3 	.word	0x8b60c8b3
 800bf1c:	3fc68a28 	.word	0x3fc68a28
 800bf20:	509f79fb 	.word	0x509f79fb
 800bf24:	3fd34413 	.word	0x3fd34413
 800bf28:	7ff00000 	.word	0x7ff00000
 800bf2c:	0800e74d 	.word	0x0800e74d
 800bf30:	3ff80000 	.word	0x3ff80000
 800bf34:	0800e808 	.word	0x0800e808
 800bf38:	0800e7e0 	.word	0x0800e7e0
 800bf3c:	0800e7d1 	.word	0x0800e7d1
 800bf40:	07f1      	lsls	r1, r6, #31
 800bf42:	d508      	bpl.n	800bf56 <_dtoa_r+0x34e>
 800bf44:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bf48:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bf4c:	f7f4 fb7c 	bl	8000648 <__aeabi_dmul>
 800bf50:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800bf54:	3501      	adds	r5, #1
 800bf56:	1076      	asrs	r6, r6, #1
 800bf58:	3708      	adds	r7, #8
 800bf5a:	2e00      	cmp	r6, #0
 800bf5c:	d1f0      	bne.n	800bf40 <_dtoa_r+0x338>
 800bf5e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800bf62:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bf66:	f7f4 fc99 	bl	800089c <__aeabi_ddiv>
 800bf6a:	e9cd 0100 	strd	r0, r1, [sp]
 800bf6e:	e01a      	b.n	800bfa6 <_dtoa_r+0x39e>
 800bf70:	2502      	movs	r5, #2
 800bf72:	e7a3      	b.n	800bebc <_dtoa_r+0x2b4>
 800bf74:	f000 80a0 	beq.w	800c0b8 <_dtoa_r+0x4b0>
 800bf78:	f1ca 0600 	rsb	r6, sl, #0
 800bf7c:	4b9f      	ldr	r3, [pc, #636]	; (800c1fc <_dtoa_r+0x5f4>)
 800bf7e:	4fa0      	ldr	r7, [pc, #640]	; (800c200 <_dtoa_r+0x5f8>)
 800bf80:	f006 020f 	and.w	r2, r6, #15
 800bf84:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bf88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf8c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bf90:	f7f4 fb5a 	bl	8000648 <__aeabi_dmul>
 800bf94:	e9cd 0100 	strd	r0, r1, [sp]
 800bf98:	1136      	asrs	r6, r6, #4
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	2502      	movs	r5, #2
 800bf9e:	2e00      	cmp	r6, #0
 800bfa0:	d17f      	bne.n	800c0a2 <_dtoa_r+0x49a>
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d1e1      	bne.n	800bf6a <_dtoa_r+0x362>
 800bfa6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	f000 8087 	beq.w	800c0bc <_dtoa_r+0x4b4>
 800bfae:	e9dd 6700 	ldrd	r6, r7, [sp]
 800bfb2:	2200      	movs	r2, #0
 800bfb4:	4b93      	ldr	r3, [pc, #588]	; (800c204 <_dtoa_r+0x5fc>)
 800bfb6:	4630      	mov	r0, r6
 800bfb8:	4639      	mov	r1, r7
 800bfba:	f7f4 fdb7 	bl	8000b2c <__aeabi_dcmplt>
 800bfbe:	2800      	cmp	r0, #0
 800bfc0:	d07c      	beq.n	800c0bc <_dtoa_r+0x4b4>
 800bfc2:	f1b9 0f00 	cmp.w	r9, #0
 800bfc6:	d079      	beq.n	800c0bc <_dtoa_r+0x4b4>
 800bfc8:	9b02      	ldr	r3, [sp, #8]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	dd35      	ble.n	800c03a <_dtoa_r+0x432>
 800bfce:	f10a 33ff 	add.w	r3, sl, #4294967295
 800bfd2:	9308      	str	r3, [sp, #32]
 800bfd4:	4639      	mov	r1, r7
 800bfd6:	2200      	movs	r2, #0
 800bfd8:	4b8b      	ldr	r3, [pc, #556]	; (800c208 <_dtoa_r+0x600>)
 800bfda:	4630      	mov	r0, r6
 800bfdc:	f7f4 fb34 	bl	8000648 <__aeabi_dmul>
 800bfe0:	e9cd 0100 	strd	r0, r1, [sp]
 800bfe4:	9f02      	ldr	r7, [sp, #8]
 800bfe6:	3501      	adds	r5, #1
 800bfe8:	4628      	mov	r0, r5
 800bfea:	f7f4 fac3 	bl	8000574 <__aeabi_i2d>
 800bfee:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bff2:	f7f4 fb29 	bl	8000648 <__aeabi_dmul>
 800bff6:	2200      	movs	r2, #0
 800bff8:	4b84      	ldr	r3, [pc, #528]	; (800c20c <_dtoa_r+0x604>)
 800bffa:	f7f4 f96f 	bl	80002dc <__adddf3>
 800bffe:	4605      	mov	r5, r0
 800c000:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800c004:	2f00      	cmp	r7, #0
 800c006:	d15d      	bne.n	800c0c4 <_dtoa_r+0x4bc>
 800c008:	2200      	movs	r2, #0
 800c00a:	4b81      	ldr	r3, [pc, #516]	; (800c210 <_dtoa_r+0x608>)
 800c00c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c010:	f7f4 f962 	bl	80002d8 <__aeabi_dsub>
 800c014:	462a      	mov	r2, r5
 800c016:	4633      	mov	r3, r6
 800c018:	e9cd 0100 	strd	r0, r1, [sp]
 800c01c:	f7f4 fda4 	bl	8000b68 <__aeabi_dcmpgt>
 800c020:	2800      	cmp	r0, #0
 800c022:	f040 8288 	bne.w	800c536 <_dtoa_r+0x92e>
 800c026:	462a      	mov	r2, r5
 800c028:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800c02c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c030:	f7f4 fd7c 	bl	8000b2c <__aeabi_dcmplt>
 800c034:	2800      	cmp	r0, #0
 800c036:	f040 827c 	bne.w	800c532 <_dtoa_r+0x92a>
 800c03a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c03e:	e9cd 2300 	strd	r2, r3, [sp]
 800c042:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c044:	2b00      	cmp	r3, #0
 800c046:	f2c0 8150 	blt.w	800c2ea <_dtoa_r+0x6e2>
 800c04a:	f1ba 0f0e 	cmp.w	sl, #14
 800c04e:	f300 814c 	bgt.w	800c2ea <_dtoa_r+0x6e2>
 800c052:	4b6a      	ldr	r3, [pc, #424]	; (800c1fc <_dtoa_r+0x5f4>)
 800c054:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c058:	ed93 7b00 	vldr	d7, [r3]
 800c05c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c05e:	2b00      	cmp	r3, #0
 800c060:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c064:	f280 80d8 	bge.w	800c218 <_dtoa_r+0x610>
 800c068:	f1b9 0f00 	cmp.w	r9, #0
 800c06c:	f300 80d4 	bgt.w	800c218 <_dtoa_r+0x610>
 800c070:	f040 825e 	bne.w	800c530 <_dtoa_r+0x928>
 800c074:	2200      	movs	r2, #0
 800c076:	4b66      	ldr	r3, [pc, #408]	; (800c210 <_dtoa_r+0x608>)
 800c078:	ec51 0b17 	vmov	r0, r1, d7
 800c07c:	f7f4 fae4 	bl	8000648 <__aeabi_dmul>
 800c080:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c084:	f7f4 fd66 	bl	8000b54 <__aeabi_dcmpge>
 800c088:	464f      	mov	r7, r9
 800c08a:	464e      	mov	r6, r9
 800c08c:	2800      	cmp	r0, #0
 800c08e:	f040 8234 	bne.w	800c4fa <_dtoa_r+0x8f2>
 800c092:	2331      	movs	r3, #49	; 0x31
 800c094:	f10b 0501 	add.w	r5, fp, #1
 800c098:	f88b 3000 	strb.w	r3, [fp]
 800c09c:	f10a 0a01 	add.w	sl, sl, #1
 800c0a0:	e22f      	b.n	800c502 <_dtoa_r+0x8fa>
 800c0a2:	07f2      	lsls	r2, r6, #31
 800c0a4:	d505      	bpl.n	800c0b2 <_dtoa_r+0x4aa>
 800c0a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c0aa:	f7f4 facd 	bl	8000648 <__aeabi_dmul>
 800c0ae:	3501      	adds	r5, #1
 800c0b0:	2301      	movs	r3, #1
 800c0b2:	1076      	asrs	r6, r6, #1
 800c0b4:	3708      	adds	r7, #8
 800c0b6:	e772      	b.n	800bf9e <_dtoa_r+0x396>
 800c0b8:	2502      	movs	r5, #2
 800c0ba:	e774      	b.n	800bfa6 <_dtoa_r+0x39e>
 800c0bc:	f8cd a020 	str.w	sl, [sp, #32]
 800c0c0:	464f      	mov	r7, r9
 800c0c2:	e791      	b.n	800bfe8 <_dtoa_r+0x3e0>
 800c0c4:	4b4d      	ldr	r3, [pc, #308]	; (800c1fc <_dtoa_r+0x5f4>)
 800c0c6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c0ca:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800c0ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d047      	beq.n	800c164 <_dtoa_r+0x55c>
 800c0d4:	4602      	mov	r2, r0
 800c0d6:	460b      	mov	r3, r1
 800c0d8:	2000      	movs	r0, #0
 800c0da:	494e      	ldr	r1, [pc, #312]	; (800c214 <_dtoa_r+0x60c>)
 800c0dc:	f7f4 fbde 	bl	800089c <__aeabi_ddiv>
 800c0e0:	462a      	mov	r2, r5
 800c0e2:	4633      	mov	r3, r6
 800c0e4:	f7f4 f8f8 	bl	80002d8 <__aeabi_dsub>
 800c0e8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800c0ec:	465d      	mov	r5, fp
 800c0ee:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c0f2:	f7f4 fd59 	bl	8000ba8 <__aeabi_d2iz>
 800c0f6:	4606      	mov	r6, r0
 800c0f8:	f7f4 fa3c 	bl	8000574 <__aeabi_i2d>
 800c0fc:	4602      	mov	r2, r0
 800c0fe:	460b      	mov	r3, r1
 800c100:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c104:	f7f4 f8e8 	bl	80002d8 <__aeabi_dsub>
 800c108:	3630      	adds	r6, #48	; 0x30
 800c10a:	f805 6b01 	strb.w	r6, [r5], #1
 800c10e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800c112:	e9cd 0100 	strd	r0, r1, [sp]
 800c116:	f7f4 fd09 	bl	8000b2c <__aeabi_dcmplt>
 800c11a:	2800      	cmp	r0, #0
 800c11c:	d163      	bne.n	800c1e6 <_dtoa_r+0x5de>
 800c11e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c122:	2000      	movs	r0, #0
 800c124:	4937      	ldr	r1, [pc, #220]	; (800c204 <_dtoa_r+0x5fc>)
 800c126:	f7f4 f8d7 	bl	80002d8 <__aeabi_dsub>
 800c12a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800c12e:	f7f4 fcfd 	bl	8000b2c <__aeabi_dcmplt>
 800c132:	2800      	cmp	r0, #0
 800c134:	f040 80b7 	bne.w	800c2a6 <_dtoa_r+0x69e>
 800c138:	eba5 030b 	sub.w	r3, r5, fp
 800c13c:	429f      	cmp	r7, r3
 800c13e:	f77f af7c 	ble.w	800c03a <_dtoa_r+0x432>
 800c142:	2200      	movs	r2, #0
 800c144:	4b30      	ldr	r3, [pc, #192]	; (800c208 <_dtoa_r+0x600>)
 800c146:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c14a:	f7f4 fa7d 	bl	8000648 <__aeabi_dmul>
 800c14e:	2200      	movs	r2, #0
 800c150:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800c154:	4b2c      	ldr	r3, [pc, #176]	; (800c208 <_dtoa_r+0x600>)
 800c156:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c15a:	f7f4 fa75 	bl	8000648 <__aeabi_dmul>
 800c15e:	e9cd 0100 	strd	r0, r1, [sp]
 800c162:	e7c4      	b.n	800c0ee <_dtoa_r+0x4e6>
 800c164:	462a      	mov	r2, r5
 800c166:	4633      	mov	r3, r6
 800c168:	f7f4 fa6e 	bl	8000648 <__aeabi_dmul>
 800c16c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800c170:	eb0b 0507 	add.w	r5, fp, r7
 800c174:	465e      	mov	r6, fp
 800c176:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c17a:	f7f4 fd15 	bl	8000ba8 <__aeabi_d2iz>
 800c17e:	4607      	mov	r7, r0
 800c180:	f7f4 f9f8 	bl	8000574 <__aeabi_i2d>
 800c184:	3730      	adds	r7, #48	; 0x30
 800c186:	4602      	mov	r2, r0
 800c188:	460b      	mov	r3, r1
 800c18a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c18e:	f7f4 f8a3 	bl	80002d8 <__aeabi_dsub>
 800c192:	f806 7b01 	strb.w	r7, [r6], #1
 800c196:	42ae      	cmp	r6, r5
 800c198:	e9cd 0100 	strd	r0, r1, [sp]
 800c19c:	f04f 0200 	mov.w	r2, #0
 800c1a0:	d126      	bne.n	800c1f0 <_dtoa_r+0x5e8>
 800c1a2:	4b1c      	ldr	r3, [pc, #112]	; (800c214 <_dtoa_r+0x60c>)
 800c1a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c1a8:	f7f4 f898 	bl	80002dc <__adddf3>
 800c1ac:	4602      	mov	r2, r0
 800c1ae:	460b      	mov	r3, r1
 800c1b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c1b4:	f7f4 fcd8 	bl	8000b68 <__aeabi_dcmpgt>
 800c1b8:	2800      	cmp	r0, #0
 800c1ba:	d174      	bne.n	800c2a6 <_dtoa_r+0x69e>
 800c1bc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800c1c0:	2000      	movs	r0, #0
 800c1c2:	4914      	ldr	r1, [pc, #80]	; (800c214 <_dtoa_r+0x60c>)
 800c1c4:	f7f4 f888 	bl	80002d8 <__aeabi_dsub>
 800c1c8:	4602      	mov	r2, r0
 800c1ca:	460b      	mov	r3, r1
 800c1cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c1d0:	f7f4 fcac 	bl	8000b2c <__aeabi_dcmplt>
 800c1d4:	2800      	cmp	r0, #0
 800c1d6:	f43f af30 	beq.w	800c03a <_dtoa_r+0x432>
 800c1da:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c1de:	2b30      	cmp	r3, #48	; 0x30
 800c1e0:	f105 32ff 	add.w	r2, r5, #4294967295
 800c1e4:	d002      	beq.n	800c1ec <_dtoa_r+0x5e4>
 800c1e6:	f8dd a020 	ldr.w	sl, [sp, #32]
 800c1ea:	e04a      	b.n	800c282 <_dtoa_r+0x67a>
 800c1ec:	4615      	mov	r5, r2
 800c1ee:	e7f4      	b.n	800c1da <_dtoa_r+0x5d2>
 800c1f0:	4b05      	ldr	r3, [pc, #20]	; (800c208 <_dtoa_r+0x600>)
 800c1f2:	f7f4 fa29 	bl	8000648 <__aeabi_dmul>
 800c1f6:	e9cd 0100 	strd	r0, r1, [sp]
 800c1fa:	e7bc      	b.n	800c176 <_dtoa_r+0x56e>
 800c1fc:	0800e808 	.word	0x0800e808
 800c200:	0800e7e0 	.word	0x0800e7e0
 800c204:	3ff00000 	.word	0x3ff00000
 800c208:	40240000 	.word	0x40240000
 800c20c:	401c0000 	.word	0x401c0000
 800c210:	40140000 	.word	0x40140000
 800c214:	3fe00000 	.word	0x3fe00000
 800c218:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c21c:	465d      	mov	r5, fp
 800c21e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c222:	4630      	mov	r0, r6
 800c224:	4639      	mov	r1, r7
 800c226:	f7f4 fb39 	bl	800089c <__aeabi_ddiv>
 800c22a:	f7f4 fcbd 	bl	8000ba8 <__aeabi_d2iz>
 800c22e:	4680      	mov	r8, r0
 800c230:	f7f4 f9a0 	bl	8000574 <__aeabi_i2d>
 800c234:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c238:	f7f4 fa06 	bl	8000648 <__aeabi_dmul>
 800c23c:	4602      	mov	r2, r0
 800c23e:	460b      	mov	r3, r1
 800c240:	4630      	mov	r0, r6
 800c242:	4639      	mov	r1, r7
 800c244:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800c248:	f7f4 f846 	bl	80002d8 <__aeabi_dsub>
 800c24c:	f805 6b01 	strb.w	r6, [r5], #1
 800c250:	eba5 060b 	sub.w	r6, r5, fp
 800c254:	45b1      	cmp	r9, r6
 800c256:	4602      	mov	r2, r0
 800c258:	460b      	mov	r3, r1
 800c25a:	d139      	bne.n	800c2d0 <_dtoa_r+0x6c8>
 800c25c:	f7f4 f83e 	bl	80002dc <__adddf3>
 800c260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c264:	4606      	mov	r6, r0
 800c266:	460f      	mov	r7, r1
 800c268:	f7f4 fc7e 	bl	8000b68 <__aeabi_dcmpgt>
 800c26c:	b9c8      	cbnz	r0, 800c2a2 <_dtoa_r+0x69a>
 800c26e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c272:	4630      	mov	r0, r6
 800c274:	4639      	mov	r1, r7
 800c276:	f7f4 fc4f 	bl	8000b18 <__aeabi_dcmpeq>
 800c27a:	b110      	cbz	r0, 800c282 <_dtoa_r+0x67a>
 800c27c:	f018 0f01 	tst.w	r8, #1
 800c280:	d10f      	bne.n	800c2a2 <_dtoa_r+0x69a>
 800c282:	9904      	ldr	r1, [sp, #16]
 800c284:	4620      	mov	r0, r4
 800c286:	f000 fe0a 	bl	800ce9e <_Bfree>
 800c28a:	2300      	movs	r3, #0
 800c28c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c28e:	702b      	strb	r3, [r5, #0]
 800c290:	f10a 0301 	add.w	r3, sl, #1
 800c294:	6013      	str	r3, [r2, #0]
 800c296:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c298:	2b00      	cmp	r3, #0
 800c29a:	f000 8241 	beq.w	800c720 <_dtoa_r+0xb18>
 800c29e:	601d      	str	r5, [r3, #0]
 800c2a0:	e23e      	b.n	800c720 <_dtoa_r+0xb18>
 800c2a2:	f8cd a020 	str.w	sl, [sp, #32]
 800c2a6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c2aa:	2a39      	cmp	r2, #57	; 0x39
 800c2ac:	f105 33ff 	add.w	r3, r5, #4294967295
 800c2b0:	d108      	bne.n	800c2c4 <_dtoa_r+0x6bc>
 800c2b2:	459b      	cmp	fp, r3
 800c2b4:	d10a      	bne.n	800c2cc <_dtoa_r+0x6c4>
 800c2b6:	9b08      	ldr	r3, [sp, #32]
 800c2b8:	3301      	adds	r3, #1
 800c2ba:	9308      	str	r3, [sp, #32]
 800c2bc:	2330      	movs	r3, #48	; 0x30
 800c2be:	f88b 3000 	strb.w	r3, [fp]
 800c2c2:	465b      	mov	r3, fp
 800c2c4:	781a      	ldrb	r2, [r3, #0]
 800c2c6:	3201      	adds	r2, #1
 800c2c8:	701a      	strb	r2, [r3, #0]
 800c2ca:	e78c      	b.n	800c1e6 <_dtoa_r+0x5de>
 800c2cc:	461d      	mov	r5, r3
 800c2ce:	e7ea      	b.n	800c2a6 <_dtoa_r+0x69e>
 800c2d0:	2200      	movs	r2, #0
 800c2d2:	4b9b      	ldr	r3, [pc, #620]	; (800c540 <_dtoa_r+0x938>)
 800c2d4:	f7f4 f9b8 	bl	8000648 <__aeabi_dmul>
 800c2d8:	2200      	movs	r2, #0
 800c2da:	2300      	movs	r3, #0
 800c2dc:	4606      	mov	r6, r0
 800c2de:	460f      	mov	r7, r1
 800c2e0:	f7f4 fc1a 	bl	8000b18 <__aeabi_dcmpeq>
 800c2e4:	2800      	cmp	r0, #0
 800c2e6:	d09a      	beq.n	800c21e <_dtoa_r+0x616>
 800c2e8:	e7cb      	b.n	800c282 <_dtoa_r+0x67a>
 800c2ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c2ec:	2a00      	cmp	r2, #0
 800c2ee:	f000 808b 	beq.w	800c408 <_dtoa_r+0x800>
 800c2f2:	9a06      	ldr	r2, [sp, #24]
 800c2f4:	2a01      	cmp	r2, #1
 800c2f6:	dc6e      	bgt.n	800c3d6 <_dtoa_r+0x7ce>
 800c2f8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c2fa:	2a00      	cmp	r2, #0
 800c2fc:	d067      	beq.n	800c3ce <_dtoa_r+0x7c6>
 800c2fe:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c302:	9f07      	ldr	r7, [sp, #28]
 800c304:	9d05      	ldr	r5, [sp, #20]
 800c306:	9a05      	ldr	r2, [sp, #20]
 800c308:	2101      	movs	r1, #1
 800c30a:	441a      	add	r2, r3
 800c30c:	4620      	mov	r0, r4
 800c30e:	9205      	str	r2, [sp, #20]
 800c310:	4498      	add	r8, r3
 800c312:	f000 fea2 	bl	800d05a <__i2b>
 800c316:	4606      	mov	r6, r0
 800c318:	2d00      	cmp	r5, #0
 800c31a:	dd0c      	ble.n	800c336 <_dtoa_r+0x72e>
 800c31c:	f1b8 0f00 	cmp.w	r8, #0
 800c320:	dd09      	ble.n	800c336 <_dtoa_r+0x72e>
 800c322:	4545      	cmp	r5, r8
 800c324:	9a05      	ldr	r2, [sp, #20]
 800c326:	462b      	mov	r3, r5
 800c328:	bfa8      	it	ge
 800c32a:	4643      	movge	r3, r8
 800c32c:	1ad2      	subs	r2, r2, r3
 800c32e:	9205      	str	r2, [sp, #20]
 800c330:	1aed      	subs	r5, r5, r3
 800c332:	eba8 0803 	sub.w	r8, r8, r3
 800c336:	9b07      	ldr	r3, [sp, #28]
 800c338:	b1eb      	cbz	r3, 800c376 <_dtoa_r+0x76e>
 800c33a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d067      	beq.n	800c410 <_dtoa_r+0x808>
 800c340:	b18f      	cbz	r7, 800c366 <_dtoa_r+0x75e>
 800c342:	4631      	mov	r1, r6
 800c344:	463a      	mov	r2, r7
 800c346:	4620      	mov	r0, r4
 800c348:	f000 ff26 	bl	800d198 <__pow5mult>
 800c34c:	9a04      	ldr	r2, [sp, #16]
 800c34e:	4601      	mov	r1, r0
 800c350:	4606      	mov	r6, r0
 800c352:	4620      	mov	r0, r4
 800c354:	f000 fe8a 	bl	800d06c <__multiply>
 800c358:	9904      	ldr	r1, [sp, #16]
 800c35a:	9008      	str	r0, [sp, #32]
 800c35c:	4620      	mov	r0, r4
 800c35e:	f000 fd9e 	bl	800ce9e <_Bfree>
 800c362:	9b08      	ldr	r3, [sp, #32]
 800c364:	9304      	str	r3, [sp, #16]
 800c366:	9b07      	ldr	r3, [sp, #28]
 800c368:	1bda      	subs	r2, r3, r7
 800c36a:	d004      	beq.n	800c376 <_dtoa_r+0x76e>
 800c36c:	9904      	ldr	r1, [sp, #16]
 800c36e:	4620      	mov	r0, r4
 800c370:	f000 ff12 	bl	800d198 <__pow5mult>
 800c374:	9004      	str	r0, [sp, #16]
 800c376:	2101      	movs	r1, #1
 800c378:	4620      	mov	r0, r4
 800c37a:	f000 fe6e 	bl	800d05a <__i2b>
 800c37e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c380:	4607      	mov	r7, r0
 800c382:	2b00      	cmp	r3, #0
 800c384:	f000 81d0 	beq.w	800c728 <_dtoa_r+0xb20>
 800c388:	461a      	mov	r2, r3
 800c38a:	4601      	mov	r1, r0
 800c38c:	4620      	mov	r0, r4
 800c38e:	f000 ff03 	bl	800d198 <__pow5mult>
 800c392:	9b06      	ldr	r3, [sp, #24]
 800c394:	2b01      	cmp	r3, #1
 800c396:	4607      	mov	r7, r0
 800c398:	dc40      	bgt.n	800c41c <_dtoa_r+0x814>
 800c39a:	9b00      	ldr	r3, [sp, #0]
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d139      	bne.n	800c414 <_dtoa_r+0x80c>
 800c3a0:	9b01      	ldr	r3, [sp, #4]
 800c3a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d136      	bne.n	800c418 <_dtoa_r+0x810>
 800c3aa:	9b01      	ldr	r3, [sp, #4]
 800c3ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c3b0:	0d1b      	lsrs	r3, r3, #20
 800c3b2:	051b      	lsls	r3, r3, #20
 800c3b4:	b12b      	cbz	r3, 800c3c2 <_dtoa_r+0x7ba>
 800c3b6:	9b05      	ldr	r3, [sp, #20]
 800c3b8:	3301      	adds	r3, #1
 800c3ba:	9305      	str	r3, [sp, #20]
 800c3bc:	f108 0801 	add.w	r8, r8, #1
 800c3c0:	2301      	movs	r3, #1
 800c3c2:	9307      	str	r3, [sp, #28]
 800c3c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d12a      	bne.n	800c420 <_dtoa_r+0x818>
 800c3ca:	2001      	movs	r0, #1
 800c3cc:	e030      	b.n	800c430 <_dtoa_r+0x828>
 800c3ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c3d0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c3d4:	e795      	b.n	800c302 <_dtoa_r+0x6fa>
 800c3d6:	9b07      	ldr	r3, [sp, #28]
 800c3d8:	f109 37ff 	add.w	r7, r9, #4294967295
 800c3dc:	42bb      	cmp	r3, r7
 800c3de:	bfbf      	itttt	lt
 800c3e0:	9b07      	ldrlt	r3, [sp, #28]
 800c3e2:	9707      	strlt	r7, [sp, #28]
 800c3e4:	1afa      	sublt	r2, r7, r3
 800c3e6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800c3e8:	bfbb      	ittet	lt
 800c3ea:	189b      	addlt	r3, r3, r2
 800c3ec:	930e      	strlt	r3, [sp, #56]	; 0x38
 800c3ee:	1bdf      	subge	r7, r3, r7
 800c3f0:	2700      	movlt	r7, #0
 800c3f2:	f1b9 0f00 	cmp.w	r9, #0
 800c3f6:	bfb5      	itete	lt
 800c3f8:	9b05      	ldrlt	r3, [sp, #20]
 800c3fa:	9d05      	ldrge	r5, [sp, #20]
 800c3fc:	eba3 0509 	sublt.w	r5, r3, r9
 800c400:	464b      	movge	r3, r9
 800c402:	bfb8      	it	lt
 800c404:	2300      	movlt	r3, #0
 800c406:	e77e      	b.n	800c306 <_dtoa_r+0x6fe>
 800c408:	9f07      	ldr	r7, [sp, #28]
 800c40a:	9d05      	ldr	r5, [sp, #20]
 800c40c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800c40e:	e783      	b.n	800c318 <_dtoa_r+0x710>
 800c410:	9a07      	ldr	r2, [sp, #28]
 800c412:	e7ab      	b.n	800c36c <_dtoa_r+0x764>
 800c414:	2300      	movs	r3, #0
 800c416:	e7d4      	b.n	800c3c2 <_dtoa_r+0x7ba>
 800c418:	9b00      	ldr	r3, [sp, #0]
 800c41a:	e7d2      	b.n	800c3c2 <_dtoa_r+0x7ba>
 800c41c:	2300      	movs	r3, #0
 800c41e:	9307      	str	r3, [sp, #28]
 800c420:	693b      	ldr	r3, [r7, #16]
 800c422:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800c426:	6918      	ldr	r0, [r3, #16]
 800c428:	f000 fdc9 	bl	800cfbe <__hi0bits>
 800c42c:	f1c0 0020 	rsb	r0, r0, #32
 800c430:	4440      	add	r0, r8
 800c432:	f010 001f 	ands.w	r0, r0, #31
 800c436:	d047      	beq.n	800c4c8 <_dtoa_r+0x8c0>
 800c438:	f1c0 0320 	rsb	r3, r0, #32
 800c43c:	2b04      	cmp	r3, #4
 800c43e:	dd3b      	ble.n	800c4b8 <_dtoa_r+0x8b0>
 800c440:	9b05      	ldr	r3, [sp, #20]
 800c442:	f1c0 001c 	rsb	r0, r0, #28
 800c446:	4403      	add	r3, r0
 800c448:	9305      	str	r3, [sp, #20]
 800c44a:	4405      	add	r5, r0
 800c44c:	4480      	add	r8, r0
 800c44e:	9b05      	ldr	r3, [sp, #20]
 800c450:	2b00      	cmp	r3, #0
 800c452:	dd05      	ble.n	800c460 <_dtoa_r+0x858>
 800c454:	461a      	mov	r2, r3
 800c456:	9904      	ldr	r1, [sp, #16]
 800c458:	4620      	mov	r0, r4
 800c45a:	f000 feeb 	bl	800d234 <__lshift>
 800c45e:	9004      	str	r0, [sp, #16]
 800c460:	f1b8 0f00 	cmp.w	r8, #0
 800c464:	dd05      	ble.n	800c472 <_dtoa_r+0x86a>
 800c466:	4639      	mov	r1, r7
 800c468:	4642      	mov	r2, r8
 800c46a:	4620      	mov	r0, r4
 800c46c:	f000 fee2 	bl	800d234 <__lshift>
 800c470:	4607      	mov	r7, r0
 800c472:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c474:	b353      	cbz	r3, 800c4cc <_dtoa_r+0x8c4>
 800c476:	4639      	mov	r1, r7
 800c478:	9804      	ldr	r0, [sp, #16]
 800c47a:	f000 ff2f 	bl	800d2dc <__mcmp>
 800c47e:	2800      	cmp	r0, #0
 800c480:	da24      	bge.n	800c4cc <_dtoa_r+0x8c4>
 800c482:	2300      	movs	r3, #0
 800c484:	220a      	movs	r2, #10
 800c486:	9904      	ldr	r1, [sp, #16]
 800c488:	4620      	mov	r0, r4
 800c48a:	f000 fd1f 	bl	800cecc <__multadd>
 800c48e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c490:	9004      	str	r0, [sp, #16]
 800c492:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c496:	2b00      	cmp	r3, #0
 800c498:	f000 814d 	beq.w	800c736 <_dtoa_r+0xb2e>
 800c49c:	2300      	movs	r3, #0
 800c49e:	4631      	mov	r1, r6
 800c4a0:	220a      	movs	r2, #10
 800c4a2:	4620      	mov	r0, r4
 800c4a4:	f000 fd12 	bl	800cecc <__multadd>
 800c4a8:	9b02      	ldr	r3, [sp, #8]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	4606      	mov	r6, r0
 800c4ae:	dc4f      	bgt.n	800c550 <_dtoa_r+0x948>
 800c4b0:	9b06      	ldr	r3, [sp, #24]
 800c4b2:	2b02      	cmp	r3, #2
 800c4b4:	dd4c      	ble.n	800c550 <_dtoa_r+0x948>
 800c4b6:	e011      	b.n	800c4dc <_dtoa_r+0x8d4>
 800c4b8:	d0c9      	beq.n	800c44e <_dtoa_r+0x846>
 800c4ba:	9a05      	ldr	r2, [sp, #20]
 800c4bc:	331c      	adds	r3, #28
 800c4be:	441a      	add	r2, r3
 800c4c0:	9205      	str	r2, [sp, #20]
 800c4c2:	441d      	add	r5, r3
 800c4c4:	4498      	add	r8, r3
 800c4c6:	e7c2      	b.n	800c44e <_dtoa_r+0x846>
 800c4c8:	4603      	mov	r3, r0
 800c4ca:	e7f6      	b.n	800c4ba <_dtoa_r+0x8b2>
 800c4cc:	f1b9 0f00 	cmp.w	r9, #0
 800c4d0:	dc38      	bgt.n	800c544 <_dtoa_r+0x93c>
 800c4d2:	9b06      	ldr	r3, [sp, #24]
 800c4d4:	2b02      	cmp	r3, #2
 800c4d6:	dd35      	ble.n	800c544 <_dtoa_r+0x93c>
 800c4d8:	f8cd 9008 	str.w	r9, [sp, #8]
 800c4dc:	9b02      	ldr	r3, [sp, #8]
 800c4de:	b963      	cbnz	r3, 800c4fa <_dtoa_r+0x8f2>
 800c4e0:	4639      	mov	r1, r7
 800c4e2:	2205      	movs	r2, #5
 800c4e4:	4620      	mov	r0, r4
 800c4e6:	f000 fcf1 	bl	800cecc <__multadd>
 800c4ea:	4601      	mov	r1, r0
 800c4ec:	4607      	mov	r7, r0
 800c4ee:	9804      	ldr	r0, [sp, #16]
 800c4f0:	f000 fef4 	bl	800d2dc <__mcmp>
 800c4f4:	2800      	cmp	r0, #0
 800c4f6:	f73f adcc 	bgt.w	800c092 <_dtoa_r+0x48a>
 800c4fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c4fc:	465d      	mov	r5, fp
 800c4fe:	ea6f 0a03 	mvn.w	sl, r3
 800c502:	f04f 0900 	mov.w	r9, #0
 800c506:	4639      	mov	r1, r7
 800c508:	4620      	mov	r0, r4
 800c50a:	f000 fcc8 	bl	800ce9e <_Bfree>
 800c50e:	2e00      	cmp	r6, #0
 800c510:	f43f aeb7 	beq.w	800c282 <_dtoa_r+0x67a>
 800c514:	f1b9 0f00 	cmp.w	r9, #0
 800c518:	d005      	beq.n	800c526 <_dtoa_r+0x91e>
 800c51a:	45b1      	cmp	r9, r6
 800c51c:	d003      	beq.n	800c526 <_dtoa_r+0x91e>
 800c51e:	4649      	mov	r1, r9
 800c520:	4620      	mov	r0, r4
 800c522:	f000 fcbc 	bl	800ce9e <_Bfree>
 800c526:	4631      	mov	r1, r6
 800c528:	4620      	mov	r0, r4
 800c52a:	f000 fcb8 	bl	800ce9e <_Bfree>
 800c52e:	e6a8      	b.n	800c282 <_dtoa_r+0x67a>
 800c530:	2700      	movs	r7, #0
 800c532:	463e      	mov	r6, r7
 800c534:	e7e1      	b.n	800c4fa <_dtoa_r+0x8f2>
 800c536:	f8dd a020 	ldr.w	sl, [sp, #32]
 800c53a:	463e      	mov	r6, r7
 800c53c:	e5a9      	b.n	800c092 <_dtoa_r+0x48a>
 800c53e:	bf00      	nop
 800c540:	40240000 	.word	0x40240000
 800c544:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c546:	f8cd 9008 	str.w	r9, [sp, #8]
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	f000 80fa 	beq.w	800c744 <_dtoa_r+0xb3c>
 800c550:	2d00      	cmp	r5, #0
 800c552:	dd05      	ble.n	800c560 <_dtoa_r+0x958>
 800c554:	4631      	mov	r1, r6
 800c556:	462a      	mov	r2, r5
 800c558:	4620      	mov	r0, r4
 800c55a:	f000 fe6b 	bl	800d234 <__lshift>
 800c55e:	4606      	mov	r6, r0
 800c560:	9b07      	ldr	r3, [sp, #28]
 800c562:	2b00      	cmp	r3, #0
 800c564:	d04c      	beq.n	800c600 <_dtoa_r+0x9f8>
 800c566:	6871      	ldr	r1, [r6, #4]
 800c568:	4620      	mov	r0, r4
 800c56a:	f000 fc64 	bl	800ce36 <_Balloc>
 800c56e:	6932      	ldr	r2, [r6, #16]
 800c570:	3202      	adds	r2, #2
 800c572:	4605      	mov	r5, r0
 800c574:	0092      	lsls	r2, r2, #2
 800c576:	f106 010c 	add.w	r1, r6, #12
 800c57a:	300c      	adds	r0, #12
 800c57c:	f000 fc50 	bl	800ce20 <memcpy>
 800c580:	2201      	movs	r2, #1
 800c582:	4629      	mov	r1, r5
 800c584:	4620      	mov	r0, r4
 800c586:	f000 fe55 	bl	800d234 <__lshift>
 800c58a:	9b00      	ldr	r3, [sp, #0]
 800c58c:	f8cd b014 	str.w	fp, [sp, #20]
 800c590:	f003 0301 	and.w	r3, r3, #1
 800c594:	46b1      	mov	r9, r6
 800c596:	9307      	str	r3, [sp, #28]
 800c598:	4606      	mov	r6, r0
 800c59a:	4639      	mov	r1, r7
 800c59c:	9804      	ldr	r0, [sp, #16]
 800c59e:	f7ff faa5 	bl	800baec <quorem>
 800c5a2:	4649      	mov	r1, r9
 800c5a4:	4605      	mov	r5, r0
 800c5a6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800c5aa:	9804      	ldr	r0, [sp, #16]
 800c5ac:	f000 fe96 	bl	800d2dc <__mcmp>
 800c5b0:	4632      	mov	r2, r6
 800c5b2:	9000      	str	r0, [sp, #0]
 800c5b4:	4639      	mov	r1, r7
 800c5b6:	4620      	mov	r0, r4
 800c5b8:	f000 feaa 	bl	800d310 <__mdiff>
 800c5bc:	68c3      	ldr	r3, [r0, #12]
 800c5be:	4602      	mov	r2, r0
 800c5c0:	bb03      	cbnz	r3, 800c604 <_dtoa_r+0x9fc>
 800c5c2:	4601      	mov	r1, r0
 800c5c4:	9008      	str	r0, [sp, #32]
 800c5c6:	9804      	ldr	r0, [sp, #16]
 800c5c8:	f000 fe88 	bl	800d2dc <__mcmp>
 800c5cc:	9a08      	ldr	r2, [sp, #32]
 800c5ce:	4603      	mov	r3, r0
 800c5d0:	4611      	mov	r1, r2
 800c5d2:	4620      	mov	r0, r4
 800c5d4:	9308      	str	r3, [sp, #32]
 800c5d6:	f000 fc62 	bl	800ce9e <_Bfree>
 800c5da:	9b08      	ldr	r3, [sp, #32]
 800c5dc:	b9a3      	cbnz	r3, 800c608 <_dtoa_r+0xa00>
 800c5de:	9a06      	ldr	r2, [sp, #24]
 800c5e0:	b992      	cbnz	r2, 800c608 <_dtoa_r+0xa00>
 800c5e2:	9a07      	ldr	r2, [sp, #28]
 800c5e4:	b982      	cbnz	r2, 800c608 <_dtoa_r+0xa00>
 800c5e6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c5ea:	d029      	beq.n	800c640 <_dtoa_r+0xa38>
 800c5ec:	9b00      	ldr	r3, [sp, #0]
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	dd01      	ble.n	800c5f6 <_dtoa_r+0x9ee>
 800c5f2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800c5f6:	9b05      	ldr	r3, [sp, #20]
 800c5f8:	1c5d      	adds	r5, r3, #1
 800c5fa:	f883 8000 	strb.w	r8, [r3]
 800c5fe:	e782      	b.n	800c506 <_dtoa_r+0x8fe>
 800c600:	4630      	mov	r0, r6
 800c602:	e7c2      	b.n	800c58a <_dtoa_r+0x982>
 800c604:	2301      	movs	r3, #1
 800c606:	e7e3      	b.n	800c5d0 <_dtoa_r+0x9c8>
 800c608:	9a00      	ldr	r2, [sp, #0]
 800c60a:	2a00      	cmp	r2, #0
 800c60c:	db04      	blt.n	800c618 <_dtoa_r+0xa10>
 800c60e:	d125      	bne.n	800c65c <_dtoa_r+0xa54>
 800c610:	9a06      	ldr	r2, [sp, #24]
 800c612:	bb1a      	cbnz	r2, 800c65c <_dtoa_r+0xa54>
 800c614:	9a07      	ldr	r2, [sp, #28]
 800c616:	bb0a      	cbnz	r2, 800c65c <_dtoa_r+0xa54>
 800c618:	2b00      	cmp	r3, #0
 800c61a:	ddec      	ble.n	800c5f6 <_dtoa_r+0x9ee>
 800c61c:	2201      	movs	r2, #1
 800c61e:	9904      	ldr	r1, [sp, #16]
 800c620:	4620      	mov	r0, r4
 800c622:	f000 fe07 	bl	800d234 <__lshift>
 800c626:	4639      	mov	r1, r7
 800c628:	9004      	str	r0, [sp, #16]
 800c62a:	f000 fe57 	bl	800d2dc <__mcmp>
 800c62e:	2800      	cmp	r0, #0
 800c630:	dc03      	bgt.n	800c63a <_dtoa_r+0xa32>
 800c632:	d1e0      	bne.n	800c5f6 <_dtoa_r+0x9ee>
 800c634:	f018 0f01 	tst.w	r8, #1
 800c638:	d0dd      	beq.n	800c5f6 <_dtoa_r+0x9ee>
 800c63a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c63e:	d1d8      	bne.n	800c5f2 <_dtoa_r+0x9ea>
 800c640:	9b05      	ldr	r3, [sp, #20]
 800c642:	9a05      	ldr	r2, [sp, #20]
 800c644:	1c5d      	adds	r5, r3, #1
 800c646:	2339      	movs	r3, #57	; 0x39
 800c648:	7013      	strb	r3, [r2, #0]
 800c64a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c64e:	2b39      	cmp	r3, #57	; 0x39
 800c650:	f105 32ff 	add.w	r2, r5, #4294967295
 800c654:	d04f      	beq.n	800c6f6 <_dtoa_r+0xaee>
 800c656:	3301      	adds	r3, #1
 800c658:	7013      	strb	r3, [r2, #0]
 800c65a:	e754      	b.n	800c506 <_dtoa_r+0x8fe>
 800c65c:	9a05      	ldr	r2, [sp, #20]
 800c65e:	2b00      	cmp	r3, #0
 800c660:	f102 0501 	add.w	r5, r2, #1
 800c664:	dd06      	ble.n	800c674 <_dtoa_r+0xa6c>
 800c666:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c66a:	d0e9      	beq.n	800c640 <_dtoa_r+0xa38>
 800c66c:	f108 0801 	add.w	r8, r8, #1
 800c670:	9b05      	ldr	r3, [sp, #20]
 800c672:	e7c2      	b.n	800c5fa <_dtoa_r+0x9f2>
 800c674:	9a02      	ldr	r2, [sp, #8]
 800c676:	f805 8c01 	strb.w	r8, [r5, #-1]
 800c67a:	eba5 030b 	sub.w	r3, r5, fp
 800c67e:	4293      	cmp	r3, r2
 800c680:	d021      	beq.n	800c6c6 <_dtoa_r+0xabe>
 800c682:	2300      	movs	r3, #0
 800c684:	220a      	movs	r2, #10
 800c686:	9904      	ldr	r1, [sp, #16]
 800c688:	4620      	mov	r0, r4
 800c68a:	f000 fc1f 	bl	800cecc <__multadd>
 800c68e:	45b1      	cmp	r9, r6
 800c690:	9004      	str	r0, [sp, #16]
 800c692:	f04f 0300 	mov.w	r3, #0
 800c696:	f04f 020a 	mov.w	r2, #10
 800c69a:	4649      	mov	r1, r9
 800c69c:	4620      	mov	r0, r4
 800c69e:	d105      	bne.n	800c6ac <_dtoa_r+0xaa4>
 800c6a0:	f000 fc14 	bl	800cecc <__multadd>
 800c6a4:	4681      	mov	r9, r0
 800c6a6:	4606      	mov	r6, r0
 800c6a8:	9505      	str	r5, [sp, #20]
 800c6aa:	e776      	b.n	800c59a <_dtoa_r+0x992>
 800c6ac:	f000 fc0e 	bl	800cecc <__multadd>
 800c6b0:	4631      	mov	r1, r6
 800c6b2:	4681      	mov	r9, r0
 800c6b4:	2300      	movs	r3, #0
 800c6b6:	220a      	movs	r2, #10
 800c6b8:	4620      	mov	r0, r4
 800c6ba:	f000 fc07 	bl	800cecc <__multadd>
 800c6be:	4606      	mov	r6, r0
 800c6c0:	e7f2      	b.n	800c6a8 <_dtoa_r+0xaa0>
 800c6c2:	f04f 0900 	mov.w	r9, #0
 800c6c6:	2201      	movs	r2, #1
 800c6c8:	9904      	ldr	r1, [sp, #16]
 800c6ca:	4620      	mov	r0, r4
 800c6cc:	f000 fdb2 	bl	800d234 <__lshift>
 800c6d0:	4639      	mov	r1, r7
 800c6d2:	9004      	str	r0, [sp, #16]
 800c6d4:	f000 fe02 	bl	800d2dc <__mcmp>
 800c6d8:	2800      	cmp	r0, #0
 800c6da:	dcb6      	bgt.n	800c64a <_dtoa_r+0xa42>
 800c6dc:	d102      	bne.n	800c6e4 <_dtoa_r+0xadc>
 800c6de:	f018 0f01 	tst.w	r8, #1
 800c6e2:	d1b2      	bne.n	800c64a <_dtoa_r+0xa42>
 800c6e4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c6e8:	2b30      	cmp	r3, #48	; 0x30
 800c6ea:	f105 32ff 	add.w	r2, r5, #4294967295
 800c6ee:	f47f af0a 	bne.w	800c506 <_dtoa_r+0x8fe>
 800c6f2:	4615      	mov	r5, r2
 800c6f4:	e7f6      	b.n	800c6e4 <_dtoa_r+0xadc>
 800c6f6:	4593      	cmp	fp, r2
 800c6f8:	d105      	bne.n	800c706 <_dtoa_r+0xafe>
 800c6fa:	2331      	movs	r3, #49	; 0x31
 800c6fc:	f10a 0a01 	add.w	sl, sl, #1
 800c700:	f88b 3000 	strb.w	r3, [fp]
 800c704:	e6ff      	b.n	800c506 <_dtoa_r+0x8fe>
 800c706:	4615      	mov	r5, r2
 800c708:	e79f      	b.n	800c64a <_dtoa_r+0xa42>
 800c70a:	f8df b064 	ldr.w	fp, [pc, #100]	; 800c770 <_dtoa_r+0xb68>
 800c70e:	e007      	b.n	800c720 <_dtoa_r+0xb18>
 800c710:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c712:	f8df b060 	ldr.w	fp, [pc, #96]	; 800c774 <_dtoa_r+0xb6c>
 800c716:	b11b      	cbz	r3, 800c720 <_dtoa_r+0xb18>
 800c718:	f10b 0308 	add.w	r3, fp, #8
 800c71c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c71e:	6013      	str	r3, [r2, #0]
 800c720:	4658      	mov	r0, fp
 800c722:	b017      	add	sp, #92	; 0x5c
 800c724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c728:	9b06      	ldr	r3, [sp, #24]
 800c72a:	2b01      	cmp	r3, #1
 800c72c:	f77f ae35 	ble.w	800c39a <_dtoa_r+0x792>
 800c730:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c732:	9307      	str	r3, [sp, #28]
 800c734:	e649      	b.n	800c3ca <_dtoa_r+0x7c2>
 800c736:	9b02      	ldr	r3, [sp, #8]
 800c738:	2b00      	cmp	r3, #0
 800c73a:	dc03      	bgt.n	800c744 <_dtoa_r+0xb3c>
 800c73c:	9b06      	ldr	r3, [sp, #24]
 800c73e:	2b02      	cmp	r3, #2
 800c740:	f73f aecc 	bgt.w	800c4dc <_dtoa_r+0x8d4>
 800c744:	465d      	mov	r5, fp
 800c746:	4639      	mov	r1, r7
 800c748:	9804      	ldr	r0, [sp, #16]
 800c74a:	f7ff f9cf 	bl	800baec <quorem>
 800c74e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800c752:	f805 8b01 	strb.w	r8, [r5], #1
 800c756:	9a02      	ldr	r2, [sp, #8]
 800c758:	eba5 030b 	sub.w	r3, r5, fp
 800c75c:	429a      	cmp	r2, r3
 800c75e:	ddb0      	ble.n	800c6c2 <_dtoa_r+0xaba>
 800c760:	2300      	movs	r3, #0
 800c762:	220a      	movs	r2, #10
 800c764:	9904      	ldr	r1, [sp, #16]
 800c766:	4620      	mov	r0, r4
 800c768:	f000 fbb0 	bl	800cecc <__multadd>
 800c76c:	9004      	str	r0, [sp, #16]
 800c76e:	e7ea      	b.n	800c746 <_dtoa_r+0xb3e>
 800c770:	0800e74c 	.word	0x0800e74c
 800c774:	0800e7c8 	.word	0x0800e7c8

0800c778 <rshift>:
 800c778:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c77a:	6906      	ldr	r6, [r0, #16]
 800c77c:	114b      	asrs	r3, r1, #5
 800c77e:	429e      	cmp	r6, r3
 800c780:	f100 0414 	add.w	r4, r0, #20
 800c784:	dd30      	ble.n	800c7e8 <rshift+0x70>
 800c786:	f011 011f 	ands.w	r1, r1, #31
 800c78a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800c78e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800c792:	d108      	bne.n	800c7a6 <rshift+0x2e>
 800c794:	4621      	mov	r1, r4
 800c796:	42b2      	cmp	r2, r6
 800c798:	460b      	mov	r3, r1
 800c79a:	d211      	bcs.n	800c7c0 <rshift+0x48>
 800c79c:	f852 3b04 	ldr.w	r3, [r2], #4
 800c7a0:	f841 3b04 	str.w	r3, [r1], #4
 800c7a4:	e7f7      	b.n	800c796 <rshift+0x1e>
 800c7a6:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800c7aa:	f1c1 0c20 	rsb	ip, r1, #32
 800c7ae:	40cd      	lsrs	r5, r1
 800c7b0:	3204      	adds	r2, #4
 800c7b2:	4623      	mov	r3, r4
 800c7b4:	42b2      	cmp	r2, r6
 800c7b6:	4617      	mov	r7, r2
 800c7b8:	d30c      	bcc.n	800c7d4 <rshift+0x5c>
 800c7ba:	601d      	str	r5, [r3, #0]
 800c7bc:	b105      	cbz	r5, 800c7c0 <rshift+0x48>
 800c7be:	3304      	adds	r3, #4
 800c7c0:	1b1a      	subs	r2, r3, r4
 800c7c2:	42a3      	cmp	r3, r4
 800c7c4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c7c8:	bf08      	it	eq
 800c7ca:	2300      	moveq	r3, #0
 800c7cc:	6102      	str	r2, [r0, #16]
 800c7ce:	bf08      	it	eq
 800c7d0:	6143      	streq	r3, [r0, #20]
 800c7d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c7d4:	683f      	ldr	r7, [r7, #0]
 800c7d6:	fa07 f70c 	lsl.w	r7, r7, ip
 800c7da:	433d      	orrs	r5, r7
 800c7dc:	f843 5b04 	str.w	r5, [r3], #4
 800c7e0:	f852 5b04 	ldr.w	r5, [r2], #4
 800c7e4:	40cd      	lsrs	r5, r1
 800c7e6:	e7e5      	b.n	800c7b4 <rshift+0x3c>
 800c7e8:	4623      	mov	r3, r4
 800c7ea:	e7e9      	b.n	800c7c0 <rshift+0x48>

0800c7ec <__hexdig_fun>:
 800c7ec:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c7f0:	2b09      	cmp	r3, #9
 800c7f2:	d802      	bhi.n	800c7fa <__hexdig_fun+0xe>
 800c7f4:	3820      	subs	r0, #32
 800c7f6:	b2c0      	uxtb	r0, r0
 800c7f8:	4770      	bx	lr
 800c7fa:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c7fe:	2b05      	cmp	r3, #5
 800c800:	d801      	bhi.n	800c806 <__hexdig_fun+0x1a>
 800c802:	3847      	subs	r0, #71	; 0x47
 800c804:	e7f7      	b.n	800c7f6 <__hexdig_fun+0xa>
 800c806:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c80a:	2b05      	cmp	r3, #5
 800c80c:	d801      	bhi.n	800c812 <__hexdig_fun+0x26>
 800c80e:	3827      	subs	r0, #39	; 0x27
 800c810:	e7f1      	b.n	800c7f6 <__hexdig_fun+0xa>
 800c812:	2000      	movs	r0, #0
 800c814:	4770      	bx	lr

0800c816 <__gethex>:
 800c816:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c81a:	b08b      	sub	sp, #44	; 0x2c
 800c81c:	468a      	mov	sl, r1
 800c81e:	9002      	str	r0, [sp, #8]
 800c820:	9816      	ldr	r0, [sp, #88]	; 0x58
 800c822:	9306      	str	r3, [sp, #24]
 800c824:	4690      	mov	r8, r2
 800c826:	f000 fad0 	bl	800cdca <__localeconv_l>
 800c82a:	6803      	ldr	r3, [r0, #0]
 800c82c:	9303      	str	r3, [sp, #12]
 800c82e:	4618      	mov	r0, r3
 800c830:	f7f3 fcf6 	bl	8000220 <strlen>
 800c834:	9b03      	ldr	r3, [sp, #12]
 800c836:	9001      	str	r0, [sp, #4]
 800c838:	4403      	add	r3, r0
 800c83a:	f04f 0b00 	mov.w	fp, #0
 800c83e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800c842:	9307      	str	r3, [sp, #28]
 800c844:	f8da 3000 	ldr.w	r3, [sl]
 800c848:	3302      	adds	r3, #2
 800c84a:	461f      	mov	r7, r3
 800c84c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c850:	2830      	cmp	r0, #48	; 0x30
 800c852:	d06c      	beq.n	800c92e <__gethex+0x118>
 800c854:	f7ff ffca 	bl	800c7ec <__hexdig_fun>
 800c858:	4604      	mov	r4, r0
 800c85a:	2800      	cmp	r0, #0
 800c85c:	d16a      	bne.n	800c934 <__gethex+0x11e>
 800c85e:	9a01      	ldr	r2, [sp, #4]
 800c860:	9903      	ldr	r1, [sp, #12]
 800c862:	4638      	mov	r0, r7
 800c864:	f001 f8fe 	bl	800da64 <strncmp>
 800c868:	2800      	cmp	r0, #0
 800c86a:	d166      	bne.n	800c93a <__gethex+0x124>
 800c86c:	9b01      	ldr	r3, [sp, #4]
 800c86e:	5cf8      	ldrb	r0, [r7, r3]
 800c870:	18fe      	adds	r6, r7, r3
 800c872:	f7ff ffbb 	bl	800c7ec <__hexdig_fun>
 800c876:	2800      	cmp	r0, #0
 800c878:	d062      	beq.n	800c940 <__gethex+0x12a>
 800c87a:	4633      	mov	r3, r6
 800c87c:	7818      	ldrb	r0, [r3, #0]
 800c87e:	2830      	cmp	r0, #48	; 0x30
 800c880:	461f      	mov	r7, r3
 800c882:	f103 0301 	add.w	r3, r3, #1
 800c886:	d0f9      	beq.n	800c87c <__gethex+0x66>
 800c888:	f7ff ffb0 	bl	800c7ec <__hexdig_fun>
 800c88c:	fab0 f580 	clz	r5, r0
 800c890:	096d      	lsrs	r5, r5, #5
 800c892:	4634      	mov	r4, r6
 800c894:	f04f 0b01 	mov.w	fp, #1
 800c898:	463a      	mov	r2, r7
 800c89a:	4616      	mov	r6, r2
 800c89c:	3201      	adds	r2, #1
 800c89e:	7830      	ldrb	r0, [r6, #0]
 800c8a0:	f7ff ffa4 	bl	800c7ec <__hexdig_fun>
 800c8a4:	2800      	cmp	r0, #0
 800c8a6:	d1f8      	bne.n	800c89a <__gethex+0x84>
 800c8a8:	9a01      	ldr	r2, [sp, #4]
 800c8aa:	9903      	ldr	r1, [sp, #12]
 800c8ac:	4630      	mov	r0, r6
 800c8ae:	f001 f8d9 	bl	800da64 <strncmp>
 800c8b2:	b950      	cbnz	r0, 800c8ca <__gethex+0xb4>
 800c8b4:	b954      	cbnz	r4, 800c8cc <__gethex+0xb6>
 800c8b6:	9b01      	ldr	r3, [sp, #4]
 800c8b8:	18f4      	adds	r4, r6, r3
 800c8ba:	4622      	mov	r2, r4
 800c8bc:	4616      	mov	r6, r2
 800c8be:	3201      	adds	r2, #1
 800c8c0:	7830      	ldrb	r0, [r6, #0]
 800c8c2:	f7ff ff93 	bl	800c7ec <__hexdig_fun>
 800c8c6:	2800      	cmp	r0, #0
 800c8c8:	d1f8      	bne.n	800c8bc <__gethex+0xa6>
 800c8ca:	b10c      	cbz	r4, 800c8d0 <__gethex+0xba>
 800c8cc:	1ba4      	subs	r4, r4, r6
 800c8ce:	00a4      	lsls	r4, r4, #2
 800c8d0:	7833      	ldrb	r3, [r6, #0]
 800c8d2:	2b50      	cmp	r3, #80	; 0x50
 800c8d4:	d001      	beq.n	800c8da <__gethex+0xc4>
 800c8d6:	2b70      	cmp	r3, #112	; 0x70
 800c8d8:	d140      	bne.n	800c95c <__gethex+0x146>
 800c8da:	7873      	ldrb	r3, [r6, #1]
 800c8dc:	2b2b      	cmp	r3, #43	; 0x2b
 800c8de:	d031      	beq.n	800c944 <__gethex+0x12e>
 800c8e0:	2b2d      	cmp	r3, #45	; 0x2d
 800c8e2:	d033      	beq.n	800c94c <__gethex+0x136>
 800c8e4:	1c71      	adds	r1, r6, #1
 800c8e6:	f04f 0900 	mov.w	r9, #0
 800c8ea:	7808      	ldrb	r0, [r1, #0]
 800c8ec:	f7ff ff7e 	bl	800c7ec <__hexdig_fun>
 800c8f0:	1e43      	subs	r3, r0, #1
 800c8f2:	b2db      	uxtb	r3, r3
 800c8f4:	2b18      	cmp	r3, #24
 800c8f6:	d831      	bhi.n	800c95c <__gethex+0x146>
 800c8f8:	f1a0 0210 	sub.w	r2, r0, #16
 800c8fc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c900:	f7ff ff74 	bl	800c7ec <__hexdig_fun>
 800c904:	1e43      	subs	r3, r0, #1
 800c906:	b2db      	uxtb	r3, r3
 800c908:	2b18      	cmp	r3, #24
 800c90a:	d922      	bls.n	800c952 <__gethex+0x13c>
 800c90c:	f1b9 0f00 	cmp.w	r9, #0
 800c910:	d000      	beq.n	800c914 <__gethex+0xfe>
 800c912:	4252      	negs	r2, r2
 800c914:	4414      	add	r4, r2
 800c916:	f8ca 1000 	str.w	r1, [sl]
 800c91a:	b30d      	cbz	r5, 800c960 <__gethex+0x14a>
 800c91c:	f1bb 0f00 	cmp.w	fp, #0
 800c920:	bf0c      	ite	eq
 800c922:	2706      	moveq	r7, #6
 800c924:	2700      	movne	r7, #0
 800c926:	4638      	mov	r0, r7
 800c928:	b00b      	add	sp, #44	; 0x2c
 800c92a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c92e:	f10b 0b01 	add.w	fp, fp, #1
 800c932:	e78a      	b.n	800c84a <__gethex+0x34>
 800c934:	2500      	movs	r5, #0
 800c936:	462c      	mov	r4, r5
 800c938:	e7ae      	b.n	800c898 <__gethex+0x82>
 800c93a:	463e      	mov	r6, r7
 800c93c:	2501      	movs	r5, #1
 800c93e:	e7c7      	b.n	800c8d0 <__gethex+0xba>
 800c940:	4604      	mov	r4, r0
 800c942:	e7fb      	b.n	800c93c <__gethex+0x126>
 800c944:	f04f 0900 	mov.w	r9, #0
 800c948:	1cb1      	adds	r1, r6, #2
 800c94a:	e7ce      	b.n	800c8ea <__gethex+0xd4>
 800c94c:	f04f 0901 	mov.w	r9, #1
 800c950:	e7fa      	b.n	800c948 <__gethex+0x132>
 800c952:	230a      	movs	r3, #10
 800c954:	fb03 0202 	mla	r2, r3, r2, r0
 800c958:	3a10      	subs	r2, #16
 800c95a:	e7cf      	b.n	800c8fc <__gethex+0xe6>
 800c95c:	4631      	mov	r1, r6
 800c95e:	e7da      	b.n	800c916 <__gethex+0x100>
 800c960:	1bf3      	subs	r3, r6, r7
 800c962:	3b01      	subs	r3, #1
 800c964:	4629      	mov	r1, r5
 800c966:	2b07      	cmp	r3, #7
 800c968:	dc49      	bgt.n	800c9fe <__gethex+0x1e8>
 800c96a:	9802      	ldr	r0, [sp, #8]
 800c96c:	f000 fa63 	bl	800ce36 <_Balloc>
 800c970:	9b01      	ldr	r3, [sp, #4]
 800c972:	f100 0914 	add.w	r9, r0, #20
 800c976:	f04f 0b00 	mov.w	fp, #0
 800c97a:	f1c3 0301 	rsb	r3, r3, #1
 800c97e:	4605      	mov	r5, r0
 800c980:	f8cd 9010 	str.w	r9, [sp, #16]
 800c984:	46da      	mov	sl, fp
 800c986:	9308      	str	r3, [sp, #32]
 800c988:	42b7      	cmp	r7, r6
 800c98a:	d33b      	bcc.n	800ca04 <__gethex+0x1ee>
 800c98c:	9804      	ldr	r0, [sp, #16]
 800c98e:	f840 ab04 	str.w	sl, [r0], #4
 800c992:	eba0 0009 	sub.w	r0, r0, r9
 800c996:	1080      	asrs	r0, r0, #2
 800c998:	6128      	str	r0, [r5, #16]
 800c99a:	0147      	lsls	r7, r0, #5
 800c99c:	4650      	mov	r0, sl
 800c99e:	f000 fb0e 	bl	800cfbe <__hi0bits>
 800c9a2:	f8d8 6000 	ldr.w	r6, [r8]
 800c9a6:	1a3f      	subs	r7, r7, r0
 800c9a8:	42b7      	cmp	r7, r6
 800c9aa:	dd64      	ble.n	800ca76 <__gethex+0x260>
 800c9ac:	1bbf      	subs	r7, r7, r6
 800c9ae:	4639      	mov	r1, r7
 800c9b0:	4628      	mov	r0, r5
 800c9b2:	f000 fe1d 	bl	800d5f0 <__any_on>
 800c9b6:	4682      	mov	sl, r0
 800c9b8:	b178      	cbz	r0, 800c9da <__gethex+0x1c4>
 800c9ba:	1e7b      	subs	r3, r7, #1
 800c9bc:	1159      	asrs	r1, r3, #5
 800c9be:	f003 021f 	and.w	r2, r3, #31
 800c9c2:	f04f 0a01 	mov.w	sl, #1
 800c9c6:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800c9ca:	fa0a f202 	lsl.w	r2, sl, r2
 800c9ce:	420a      	tst	r2, r1
 800c9d0:	d003      	beq.n	800c9da <__gethex+0x1c4>
 800c9d2:	4553      	cmp	r3, sl
 800c9d4:	dc46      	bgt.n	800ca64 <__gethex+0x24e>
 800c9d6:	f04f 0a02 	mov.w	sl, #2
 800c9da:	4639      	mov	r1, r7
 800c9dc:	4628      	mov	r0, r5
 800c9de:	f7ff fecb 	bl	800c778 <rshift>
 800c9e2:	443c      	add	r4, r7
 800c9e4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c9e8:	42a3      	cmp	r3, r4
 800c9ea:	da52      	bge.n	800ca92 <__gethex+0x27c>
 800c9ec:	4629      	mov	r1, r5
 800c9ee:	9802      	ldr	r0, [sp, #8]
 800c9f0:	f000 fa55 	bl	800ce9e <_Bfree>
 800c9f4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c9f6:	2300      	movs	r3, #0
 800c9f8:	6013      	str	r3, [r2, #0]
 800c9fa:	27a3      	movs	r7, #163	; 0xa3
 800c9fc:	e793      	b.n	800c926 <__gethex+0x110>
 800c9fe:	3101      	adds	r1, #1
 800ca00:	105b      	asrs	r3, r3, #1
 800ca02:	e7b0      	b.n	800c966 <__gethex+0x150>
 800ca04:	1e73      	subs	r3, r6, #1
 800ca06:	9305      	str	r3, [sp, #20]
 800ca08:	9a07      	ldr	r2, [sp, #28]
 800ca0a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ca0e:	4293      	cmp	r3, r2
 800ca10:	d018      	beq.n	800ca44 <__gethex+0x22e>
 800ca12:	f1bb 0f20 	cmp.w	fp, #32
 800ca16:	d107      	bne.n	800ca28 <__gethex+0x212>
 800ca18:	9b04      	ldr	r3, [sp, #16]
 800ca1a:	f8c3 a000 	str.w	sl, [r3]
 800ca1e:	3304      	adds	r3, #4
 800ca20:	f04f 0a00 	mov.w	sl, #0
 800ca24:	9304      	str	r3, [sp, #16]
 800ca26:	46d3      	mov	fp, sl
 800ca28:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800ca2c:	f7ff fede 	bl	800c7ec <__hexdig_fun>
 800ca30:	f000 000f 	and.w	r0, r0, #15
 800ca34:	fa00 f00b 	lsl.w	r0, r0, fp
 800ca38:	ea4a 0a00 	orr.w	sl, sl, r0
 800ca3c:	f10b 0b04 	add.w	fp, fp, #4
 800ca40:	9b05      	ldr	r3, [sp, #20]
 800ca42:	e00d      	b.n	800ca60 <__gethex+0x24a>
 800ca44:	9b05      	ldr	r3, [sp, #20]
 800ca46:	9a08      	ldr	r2, [sp, #32]
 800ca48:	4413      	add	r3, r2
 800ca4a:	42bb      	cmp	r3, r7
 800ca4c:	d3e1      	bcc.n	800ca12 <__gethex+0x1fc>
 800ca4e:	4618      	mov	r0, r3
 800ca50:	9a01      	ldr	r2, [sp, #4]
 800ca52:	9903      	ldr	r1, [sp, #12]
 800ca54:	9309      	str	r3, [sp, #36]	; 0x24
 800ca56:	f001 f805 	bl	800da64 <strncmp>
 800ca5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca5c:	2800      	cmp	r0, #0
 800ca5e:	d1d8      	bne.n	800ca12 <__gethex+0x1fc>
 800ca60:	461e      	mov	r6, r3
 800ca62:	e791      	b.n	800c988 <__gethex+0x172>
 800ca64:	1eb9      	subs	r1, r7, #2
 800ca66:	4628      	mov	r0, r5
 800ca68:	f000 fdc2 	bl	800d5f0 <__any_on>
 800ca6c:	2800      	cmp	r0, #0
 800ca6e:	d0b2      	beq.n	800c9d6 <__gethex+0x1c0>
 800ca70:	f04f 0a03 	mov.w	sl, #3
 800ca74:	e7b1      	b.n	800c9da <__gethex+0x1c4>
 800ca76:	da09      	bge.n	800ca8c <__gethex+0x276>
 800ca78:	1bf7      	subs	r7, r6, r7
 800ca7a:	4629      	mov	r1, r5
 800ca7c:	463a      	mov	r2, r7
 800ca7e:	9802      	ldr	r0, [sp, #8]
 800ca80:	f000 fbd8 	bl	800d234 <__lshift>
 800ca84:	1be4      	subs	r4, r4, r7
 800ca86:	4605      	mov	r5, r0
 800ca88:	f100 0914 	add.w	r9, r0, #20
 800ca8c:	f04f 0a00 	mov.w	sl, #0
 800ca90:	e7a8      	b.n	800c9e4 <__gethex+0x1ce>
 800ca92:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800ca96:	42a0      	cmp	r0, r4
 800ca98:	dd6a      	ble.n	800cb70 <__gethex+0x35a>
 800ca9a:	1b04      	subs	r4, r0, r4
 800ca9c:	42a6      	cmp	r6, r4
 800ca9e:	dc2e      	bgt.n	800cafe <__gethex+0x2e8>
 800caa0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800caa4:	2b02      	cmp	r3, #2
 800caa6:	d022      	beq.n	800caee <__gethex+0x2d8>
 800caa8:	2b03      	cmp	r3, #3
 800caaa:	d024      	beq.n	800caf6 <__gethex+0x2e0>
 800caac:	2b01      	cmp	r3, #1
 800caae:	d115      	bne.n	800cadc <__gethex+0x2c6>
 800cab0:	42a6      	cmp	r6, r4
 800cab2:	d113      	bne.n	800cadc <__gethex+0x2c6>
 800cab4:	2e01      	cmp	r6, #1
 800cab6:	dc0b      	bgt.n	800cad0 <__gethex+0x2ba>
 800cab8:	9a06      	ldr	r2, [sp, #24]
 800caba:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800cabe:	6013      	str	r3, [r2, #0]
 800cac0:	2301      	movs	r3, #1
 800cac2:	612b      	str	r3, [r5, #16]
 800cac4:	f8c9 3000 	str.w	r3, [r9]
 800cac8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800caca:	2762      	movs	r7, #98	; 0x62
 800cacc:	601d      	str	r5, [r3, #0]
 800cace:	e72a      	b.n	800c926 <__gethex+0x110>
 800cad0:	1e71      	subs	r1, r6, #1
 800cad2:	4628      	mov	r0, r5
 800cad4:	f000 fd8c 	bl	800d5f0 <__any_on>
 800cad8:	2800      	cmp	r0, #0
 800cada:	d1ed      	bne.n	800cab8 <__gethex+0x2a2>
 800cadc:	4629      	mov	r1, r5
 800cade:	9802      	ldr	r0, [sp, #8]
 800cae0:	f000 f9dd 	bl	800ce9e <_Bfree>
 800cae4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cae6:	2300      	movs	r3, #0
 800cae8:	6013      	str	r3, [r2, #0]
 800caea:	2750      	movs	r7, #80	; 0x50
 800caec:	e71b      	b.n	800c926 <__gethex+0x110>
 800caee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d0e1      	beq.n	800cab8 <__gethex+0x2a2>
 800caf4:	e7f2      	b.n	800cadc <__gethex+0x2c6>
 800caf6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d1dd      	bne.n	800cab8 <__gethex+0x2a2>
 800cafc:	e7ee      	b.n	800cadc <__gethex+0x2c6>
 800cafe:	1e67      	subs	r7, r4, #1
 800cb00:	f1ba 0f00 	cmp.w	sl, #0
 800cb04:	d131      	bne.n	800cb6a <__gethex+0x354>
 800cb06:	b127      	cbz	r7, 800cb12 <__gethex+0x2fc>
 800cb08:	4639      	mov	r1, r7
 800cb0a:	4628      	mov	r0, r5
 800cb0c:	f000 fd70 	bl	800d5f0 <__any_on>
 800cb10:	4682      	mov	sl, r0
 800cb12:	117a      	asrs	r2, r7, #5
 800cb14:	2301      	movs	r3, #1
 800cb16:	f007 071f 	and.w	r7, r7, #31
 800cb1a:	fa03 f707 	lsl.w	r7, r3, r7
 800cb1e:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800cb22:	4621      	mov	r1, r4
 800cb24:	421f      	tst	r7, r3
 800cb26:	4628      	mov	r0, r5
 800cb28:	bf18      	it	ne
 800cb2a:	f04a 0a02 	orrne.w	sl, sl, #2
 800cb2e:	1b36      	subs	r6, r6, r4
 800cb30:	f7ff fe22 	bl	800c778 <rshift>
 800cb34:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800cb38:	2702      	movs	r7, #2
 800cb3a:	f1ba 0f00 	cmp.w	sl, #0
 800cb3e:	d048      	beq.n	800cbd2 <__gethex+0x3bc>
 800cb40:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cb44:	2b02      	cmp	r3, #2
 800cb46:	d015      	beq.n	800cb74 <__gethex+0x35e>
 800cb48:	2b03      	cmp	r3, #3
 800cb4a:	d017      	beq.n	800cb7c <__gethex+0x366>
 800cb4c:	2b01      	cmp	r3, #1
 800cb4e:	d109      	bne.n	800cb64 <__gethex+0x34e>
 800cb50:	f01a 0f02 	tst.w	sl, #2
 800cb54:	d006      	beq.n	800cb64 <__gethex+0x34e>
 800cb56:	f8d9 3000 	ldr.w	r3, [r9]
 800cb5a:	ea4a 0a03 	orr.w	sl, sl, r3
 800cb5e:	f01a 0f01 	tst.w	sl, #1
 800cb62:	d10e      	bne.n	800cb82 <__gethex+0x36c>
 800cb64:	f047 0710 	orr.w	r7, r7, #16
 800cb68:	e033      	b.n	800cbd2 <__gethex+0x3bc>
 800cb6a:	f04f 0a01 	mov.w	sl, #1
 800cb6e:	e7d0      	b.n	800cb12 <__gethex+0x2fc>
 800cb70:	2701      	movs	r7, #1
 800cb72:	e7e2      	b.n	800cb3a <__gethex+0x324>
 800cb74:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cb76:	f1c3 0301 	rsb	r3, r3, #1
 800cb7a:	9315      	str	r3, [sp, #84]	; 0x54
 800cb7c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d0f0      	beq.n	800cb64 <__gethex+0x34e>
 800cb82:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800cb86:	f105 0314 	add.w	r3, r5, #20
 800cb8a:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800cb8e:	eb03 010a 	add.w	r1, r3, sl
 800cb92:	f04f 0c00 	mov.w	ip, #0
 800cb96:	4618      	mov	r0, r3
 800cb98:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb9c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800cba0:	d01c      	beq.n	800cbdc <__gethex+0x3c6>
 800cba2:	3201      	adds	r2, #1
 800cba4:	6002      	str	r2, [r0, #0]
 800cba6:	2f02      	cmp	r7, #2
 800cba8:	f105 0314 	add.w	r3, r5, #20
 800cbac:	d138      	bne.n	800cc20 <__gethex+0x40a>
 800cbae:	f8d8 2000 	ldr.w	r2, [r8]
 800cbb2:	3a01      	subs	r2, #1
 800cbb4:	42b2      	cmp	r2, r6
 800cbb6:	d10a      	bne.n	800cbce <__gethex+0x3b8>
 800cbb8:	1171      	asrs	r1, r6, #5
 800cbba:	2201      	movs	r2, #1
 800cbbc:	f006 061f 	and.w	r6, r6, #31
 800cbc0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cbc4:	fa02 f606 	lsl.w	r6, r2, r6
 800cbc8:	421e      	tst	r6, r3
 800cbca:	bf18      	it	ne
 800cbcc:	4617      	movne	r7, r2
 800cbce:	f047 0720 	orr.w	r7, r7, #32
 800cbd2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cbd4:	601d      	str	r5, [r3, #0]
 800cbd6:	9b06      	ldr	r3, [sp, #24]
 800cbd8:	601c      	str	r4, [r3, #0]
 800cbda:	e6a4      	b.n	800c926 <__gethex+0x110>
 800cbdc:	4299      	cmp	r1, r3
 800cbde:	f843 cc04 	str.w	ip, [r3, #-4]
 800cbe2:	d8d8      	bhi.n	800cb96 <__gethex+0x380>
 800cbe4:	68ab      	ldr	r3, [r5, #8]
 800cbe6:	4599      	cmp	r9, r3
 800cbe8:	db12      	blt.n	800cc10 <__gethex+0x3fa>
 800cbea:	6869      	ldr	r1, [r5, #4]
 800cbec:	9802      	ldr	r0, [sp, #8]
 800cbee:	3101      	adds	r1, #1
 800cbf0:	f000 f921 	bl	800ce36 <_Balloc>
 800cbf4:	692a      	ldr	r2, [r5, #16]
 800cbf6:	3202      	adds	r2, #2
 800cbf8:	f105 010c 	add.w	r1, r5, #12
 800cbfc:	4683      	mov	fp, r0
 800cbfe:	0092      	lsls	r2, r2, #2
 800cc00:	300c      	adds	r0, #12
 800cc02:	f000 f90d 	bl	800ce20 <memcpy>
 800cc06:	4629      	mov	r1, r5
 800cc08:	9802      	ldr	r0, [sp, #8]
 800cc0a:	f000 f948 	bl	800ce9e <_Bfree>
 800cc0e:	465d      	mov	r5, fp
 800cc10:	692b      	ldr	r3, [r5, #16]
 800cc12:	1c5a      	adds	r2, r3, #1
 800cc14:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800cc18:	612a      	str	r2, [r5, #16]
 800cc1a:	2201      	movs	r2, #1
 800cc1c:	615a      	str	r2, [r3, #20]
 800cc1e:	e7c2      	b.n	800cba6 <__gethex+0x390>
 800cc20:	692a      	ldr	r2, [r5, #16]
 800cc22:	454a      	cmp	r2, r9
 800cc24:	dd0b      	ble.n	800cc3e <__gethex+0x428>
 800cc26:	2101      	movs	r1, #1
 800cc28:	4628      	mov	r0, r5
 800cc2a:	f7ff fda5 	bl	800c778 <rshift>
 800cc2e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cc32:	3401      	adds	r4, #1
 800cc34:	42a3      	cmp	r3, r4
 800cc36:	f6ff aed9 	blt.w	800c9ec <__gethex+0x1d6>
 800cc3a:	2701      	movs	r7, #1
 800cc3c:	e7c7      	b.n	800cbce <__gethex+0x3b8>
 800cc3e:	f016 061f 	ands.w	r6, r6, #31
 800cc42:	d0fa      	beq.n	800cc3a <__gethex+0x424>
 800cc44:	449a      	add	sl, r3
 800cc46:	f1c6 0620 	rsb	r6, r6, #32
 800cc4a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800cc4e:	f000 f9b6 	bl	800cfbe <__hi0bits>
 800cc52:	42b0      	cmp	r0, r6
 800cc54:	dbe7      	blt.n	800cc26 <__gethex+0x410>
 800cc56:	e7f0      	b.n	800cc3a <__gethex+0x424>

0800cc58 <L_shift>:
 800cc58:	f1c2 0208 	rsb	r2, r2, #8
 800cc5c:	0092      	lsls	r2, r2, #2
 800cc5e:	b570      	push	{r4, r5, r6, lr}
 800cc60:	f1c2 0620 	rsb	r6, r2, #32
 800cc64:	6843      	ldr	r3, [r0, #4]
 800cc66:	6804      	ldr	r4, [r0, #0]
 800cc68:	fa03 f506 	lsl.w	r5, r3, r6
 800cc6c:	432c      	orrs	r4, r5
 800cc6e:	40d3      	lsrs	r3, r2
 800cc70:	6004      	str	r4, [r0, #0]
 800cc72:	f840 3f04 	str.w	r3, [r0, #4]!
 800cc76:	4288      	cmp	r0, r1
 800cc78:	d3f4      	bcc.n	800cc64 <L_shift+0xc>
 800cc7a:	bd70      	pop	{r4, r5, r6, pc}

0800cc7c <__match>:
 800cc7c:	b530      	push	{r4, r5, lr}
 800cc7e:	6803      	ldr	r3, [r0, #0]
 800cc80:	3301      	adds	r3, #1
 800cc82:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cc86:	b914      	cbnz	r4, 800cc8e <__match+0x12>
 800cc88:	6003      	str	r3, [r0, #0]
 800cc8a:	2001      	movs	r0, #1
 800cc8c:	bd30      	pop	{r4, r5, pc}
 800cc8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cc92:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800cc96:	2d19      	cmp	r5, #25
 800cc98:	bf98      	it	ls
 800cc9a:	3220      	addls	r2, #32
 800cc9c:	42a2      	cmp	r2, r4
 800cc9e:	d0f0      	beq.n	800cc82 <__match+0x6>
 800cca0:	2000      	movs	r0, #0
 800cca2:	e7f3      	b.n	800cc8c <__match+0x10>

0800cca4 <__hexnan>:
 800cca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cca8:	680b      	ldr	r3, [r1, #0]
 800ccaa:	6801      	ldr	r1, [r0, #0]
 800ccac:	115f      	asrs	r7, r3, #5
 800ccae:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800ccb2:	f013 031f 	ands.w	r3, r3, #31
 800ccb6:	b087      	sub	sp, #28
 800ccb8:	bf18      	it	ne
 800ccba:	3704      	addne	r7, #4
 800ccbc:	2500      	movs	r5, #0
 800ccbe:	1f3e      	subs	r6, r7, #4
 800ccc0:	4682      	mov	sl, r0
 800ccc2:	4690      	mov	r8, r2
 800ccc4:	9301      	str	r3, [sp, #4]
 800ccc6:	f847 5c04 	str.w	r5, [r7, #-4]
 800ccca:	46b1      	mov	r9, r6
 800cccc:	4634      	mov	r4, r6
 800ccce:	9502      	str	r5, [sp, #8]
 800ccd0:	46ab      	mov	fp, r5
 800ccd2:	784a      	ldrb	r2, [r1, #1]
 800ccd4:	1c4b      	adds	r3, r1, #1
 800ccd6:	9303      	str	r3, [sp, #12]
 800ccd8:	b342      	cbz	r2, 800cd2c <__hexnan+0x88>
 800ccda:	4610      	mov	r0, r2
 800ccdc:	9105      	str	r1, [sp, #20]
 800ccde:	9204      	str	r2, [sp, #16]
 800cce0:	f7ff fd84 	bl	800c7ec <__hexdig_fun>
 800cce4:	2800      	cmp	r0, #0
 800cce6:	d143      	bne.n	800cd70 <__hexnan+0xcc>
 800cce8:	9a04      	ldr	r2, [sp, #16]
 800ccea:	9905      	ldr	r1, [sp, #20]
 800ccec:	2a20      	cmp	r2, #32
 800ccee:	d818      	bhi.n	800cd22 <__hexnan+0x7e>
 800ccf0:	9b02      	ldr	r3, [sp, #8]
 800ccf2:	459b      	cmp	fp, r3
 800ccf4:	dd13      	ble.n	800cd1e <__hexnan+0x7a>
 800ccf6:	454c      	cmp	r4, r9
 800ccf8:	d206      	bcs.n	800cd08 <__hexnan+0x64>
 800ccfa:	2d07      	cmp	r5, #7
 800ccfc:	dc04      	bgt.n	800cd08 <__hexnan+0x64>
 800ccfe:	462a      	mov	r2, r5
 800cd00:	4649      	mov	r1, r9
 800cd02:	4620      	mov	r0, r4
 800cd04:	f7ff ffa8 	bl	800cc58 <L_shift>
 800cd08:	4544      	cmp	r4, r8
 800cd0a:	d944      	bls.n	800cd96 <__hexnan+0xf2>
 800cd0c:	2300      	movs	r3, #0
 800cd0e:	f1a4 0904 	sub.w	r9, r4, #4
 800cd12:	f844 3c04 	str.w	r3, [r4, #-4]
 800cd16:	f8cd b008 	str.w	fp, [sp, #8]
 800cd1a:	464c      	mov	r4, r9
 800cd1c:	461d      	mov	r5, r3
 800cd1e:	9903      	ldr	r1, [sp, #12]
 800cd20:	e7d7      	b.n	800ccd2 <__hexnan+0x2e>
 800cd22:	2a29      	cmp	r2, #41	; 0x29
 800cd24:	d14a      	bne.n	800cdbc <__hexnan+0x118>
 800cd26:	3102      	adds	r1, #2
 800cd28:	f8ca 1000 	str.w	r1, [sl]
 800cd2c:	f1bb 0f00 	cmp.w	fp, #0
 800cd30:	d044      	beq.n	800cdbc <__hexnan+0x118>
 800cd32:	454c      	cmp	r4, r9
 800cd34:	d206      	bcs.n	800cd44 <__hexnan+0xa0>
 800cd36:	2d07      	cmp	r5, #7
 800cd38:	dc04      	bgt.n	800cd44 <__hexnan+0xa0>
 800cd3a:	462a      	mov	r2, r5
 800cd3c:	4649      	mov	r1, r9
 800cd3e:	4620      	mov	r0, r4
 800cd40:	f7ff ff8a 	bl	800cc58 <L_shift>
 800cd44:	4544      	cmp	r4, r8
 800cd46:	d928      	bls.n	800cd9a <__hexnan+0xf6>
 800cd48:	4643      	mov	r3, r8
 800cd4a:	f854 2b04 	ldr.w	r2, [r4], #4
 800cd4e:	f843 2b04 	str.w	r2, [r3], #4
 800cd52:	42a6      	cmp	r6, r4
 800cd54:	d2f9      	bcs.n	800cd4a <__hexnan+0xa6>
 800cd56:	2200      	movs	r2, #0
 800cd58:	f843 2b04 	str.w	r2, [r3], #4
 800cd5c:	429e      	cmp	r6, r3
 800cd5e:	d2fb      	bcs.n	800cd58 <__hexnan+0xb4>
 800cd60:	6833      	ldr	r3, [r6, #0]
 800cd62:	b91b      	cbnz	r3, 800cd6c <__hexnan+0xc8>
 800cd64:	4546      	cmp	r6, r8
 800cd66:	d127      	bne.n	800cdb8 <__hexnan+0x114>
 800cd68:	2301      	movs	r3, #1
 800cd6a:	6033      	str	r3, [r6, #0]
 800cd6c:	2005      	movs	r0, #5
 800cd6e:	e026      	b.n	800cdbe <__hexnan+0x11a>
 800cd70:	3501      	adds	r5, #1
 800cd72:	2d08      	cmp	r5, #8
 800cd74:	f10b 0b01 	add.w	fp, fp, #1
 800cd78:	dd06      	ble.n	800cd88 <__hexnan+0xe4>
 800cd7a:	4544      	cmp	r4, r8
 800cd7c:	d9cf      	bls.n	800cd1e <__hexnan+0x7a>
 800cd7e:	2300      	movs	r3, #0
 800cd80:	f844 3c04 	str.w	r3, [r4, #-4]
 800cd84:	2501      	movs	r5, #1
 800cd86:	3c04      	subs	r4, #4
 800cd88:	6822      	ldr	r2, [r4, #0]
 800cd8a:	f000 000f 	and.w	r0, r0, #15
 800cd8e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800cd92:	6020      	str	r0, [r4, #0]
 800cd94:	e7c3      	b.n	800cd1e <__hexnan+0x7a>
 800cd96:	2508      	movs	r5, #8
 800cd98:	e7c1      	b.n	800cd1e <__hexnan+0x7a>
 800cd9a:	9b01      	ldr	r3, [sp, #4]
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d0df      	beq.n	800cd60 <__hexnan+0xbc>
 800cda0:	f04f 32ff 	mov.w	r2, #4294967295
 800cda4:	f1c3 0320 	rsb	r3, r3, #32
 800cda8:	fa22 f303 	lsr.w	r3, r2, r3
 800cdac:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800cdb0:	401a      	ands	r2, r3
 800cdb2:	f847 2c04 	str.w	r2, [r7, #-4]
 800cdb6:	e7d3      	b.n	800cd60 <__hexnan+0xbc>
 800cdb8:	3e04      	subs	r6, #4
 800cdba:	e7d1      	b.n	800cd60 <__hexnan+0xbc>
 800cdbc:	2004      	movs	r0, #4
 800cdbe:	b007      	add	sp, #28
 800cdc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cdc4 <__locale_ctype_ptr_l>:
 800cdc4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800cdc8:	4770      	bx	lr

0800cdca <__localeconv_l>:
 800cdca:	30f0      	adds	r0, #240	; 0xf0
 800cdcc:	4770      	bx	lr
	...

0800cdd0 <_localeconv_r>:
 800cdd0:	4b04      	ldr	r3, [pc, #16]	; (800cde4 <_localeconv_r+0x14>)
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	6a18      	ldr	r0, [r3, #32]
 800cdd6:	4b04      	ldr	r3, [pc, #16]	; (800cde8 <_localeconv_r+0x18>)
 800cdd8:	2800      	cmp	r0, #0
 800cdda:	bf08      	it	eq
 800cddc:	4618      	moveq	r0, r3
 800cdde:	30f0      	adds	r0, #240	; 0xf0
 800cde0:	4770      	bx	lr
 800cde2:	bf00      	nop
 800cde4:	2000000c 	.word	0x2000000c
 800cde8:	20000070 	.word	0x20000070

0800cdec <malloc>:
 800cdec:	4b02      	ldr	r3, [pc, #8]	; (800cdf8 <malloc+0xc>)
 800cdee:	4601      	mov	r1, r0
 800cdf0:	6818      	ldr	r0, [r3, #0]
 800cdf2:	f000 bc7b 	b.w	800d6ec <_malloc_r>
 800cdf6:	bf00      	nop
 800cdf8:	2000000c 	.word	0x2000000c

0800cdfc <__ascii_mbtowc>:
 800cdfc:	b082      	sub	sp, #8
 800cdfe:	b901      	cbnz	r1, 800ce02 <__ascii_mbtowc+0x6>
 800ce00:	a901      	add	r1, sp, #4
 800ce02:	b142      	cbz	r2, 800ce16 <__ascii_mbtowc+0x1a>
 800ce04:	b14b      	cbz	r3, 800ce1a <__ascii_mbtowc+0x1e>
 800ce06:	7813      	ldrb	r3, [r2, #0]
 800ce08:	600b      	str	r3, [r1, #0]
 800ce0a:	7812      	ldrb	r2, [r2, #0]
 800ce0c:	1c10      	adds	r0, r2, #0
 800ce0e:	bf18      	it	ne
 800ce10:	2001      	movne	r0, #1
 800ce12:	b002      	add	sp, #8
 800ce14:	4770      	bx	lr
 800ce16:	4610      	mov	r0, r2
 800ce18:	e7fb      	b.n	800ce12 <__ascii_mbtowc+0x16>
 800ce1a:	f06f 0001 	mvn.w	r0, #1
 800ce1e:	e7f8      	b.n	800ce12 <__ascii_mbtowc+0x16>

0800ce20 <memcpy>:
 800ce20:	b510      	push	{r4, lr}
 800ce22:	1e43      	subs	r3, r0, #1
 800ce24:	440a      	add	r2, r1
 800ce26:	4291      	cmp	r1, r2
 800ce28:	d100      	bne.n	800ce2c <memcpy+0xc>
 800ce2a:	bd10      	pop	{r4, pc}
 800ce2c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ce30:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ce34:	e7f7      	b.n	800ce26 <memcpy+0x6>

0800ce36 <_Balloc>:
 800ce36:	b570      	push	{r4, r5, r6, lr}
 800ce38:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ce3a:	4604      	mov	r4, r0
 800ce3c:	460e      	mov	r6, r1
 800ce3e:	b93d      	cbnz	r5, 800ce50 <_Balloc+0x1a>
 800ce40:	2010      	movs	r0, #16
 800ce42:	f7ff ffd3 	bl	800cdec <malloc>
 800ce46:	6260      	str	r0, [r4, #36]	; 0x24
 800ce48:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ce4c:	6005      	str	r5, [r0, #0]
 800ce4e:	60c5      	str	r5, [r0, #12]
 800ce50:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800ce52:	68eb      	ldr	r3, [r5, #12]
 800ce54:	b183      	cbz	r3, 800ce78 <_Balloc+0x42>
 800ce56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ce58:	68db      	ldr	r3, [r3, #12]
 800ce5a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800ce5e:	b9b8      	cbnz	r0, 800ce90 <_Balloc+0x5a>
 800ce60:	2101      	movs	r1, #1
 800ce62:	fa01 f506 	lsl.w	r5, r1, r6
 800ce66:	1d6a      	adds	r2, r5, #5
 800ce68:	0092      	lsls	r2, r2, #2
 800ce6a:	4620      	mov	r0, r4
 800ce6c:	f000 fbe1 	bl	800d632 <_calloc_r>
 800ce70:	b160      	cbz	r0, 800ce8c <_Balloc+0x56>
 800ce72:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800ce76:	e00e      	b.n	800ce96 <_Balloc+0x60>
 800ce78:	2221      	movs	r2, #33	; 0x21
 800ce7a:	2104      	movs	r1, #4
 800ce7c:	4620      	mov	r0, r4
 800ce7e:	f000 fbd8 	bl	800d632 <_calloc_r>
 800ce82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ce84:	60e8      	str	r0, [r5, #12]
 800ce86:	68db      	ldr	r3, [r3, #12]
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d1e4      	bne.n	800ce56 <_Balloc+0x20>
 800ce8c:	2000      	movs	r0, #0
 800ce8e:	bd70      	pop	{r4, r5, r6, pc}
 800ce90:	6802      	ldr	r2, [r0, #0]
 800ce92:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800ce96:	2300      	movs	r3, #0
 800ce98:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ce9c:	e7f7      	b.n	800ce8e <_Balloc+0x58>

0800ce9e <_Bfree>:
 800ce9e:	b570      	push	{r4, r5, r6, lr}
 800cea0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800cea2:	4606      	mov	r6, r0
 800cea4:	460d      	mov	r5, r1
 800cea6:	b93c      	cbnz	r4, 800ceb8 <_Bfree+0x1a>
 800cea8:	2010      	movs	r0, #16
 800ceaa:	f7ff ff9f 	bl	800cdec <malloc>
 800ceae:	6270      	str	r0, [r6, #36]	; 0x24
 800ceb0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ceb4:	6004      	str	r4, [r0, #0]
 800ceb6:	60c4      	str	r4, [r0, #12]
 800ceb8:	b13d      	cbz	r5, 800ceca <_Bfree+0x2c>
 800ceba:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800cebc:	686a      	ldr	r2, [r5, #4]
 800cebe:	68db      	ldr	r3, [r3, #12]
 800cec0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cec4:	6029      	str	r1, [r5, #0]
 800cec6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800ceca:	bd70      	pop	{r4, r5, r6, pc}

0800cecc <__multadd>:
 800cecc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ced0:	690d      	ldr	r5, [r1, #16]
 800ced2:	461f      	mov	r7, r3
 800ced4:	4606      	mov	r6, r0
 800ced6:	460c      	mov	r4, r1
 800ced8:	f101 0c14 	add.w	ip, r1, #20
 800cedc:	2300      	movs	r3, #0
 800cede:	f8dc 0000 	ldr.w	r0, [ip]
 800cee2:	b281      	uxth	r1, r0
 800cee4:	fb02 7101 	mla	r1, r2, r1, r7
 800cee8:	0c0f      	lsrs	r7, r1, #16
 800ceea:	0c00      	lsrs	r0, r0, #16
 800ceec:	fb02 7000 	mla	r0, r2, r0, r7
 800cef0:	b289      	uxth	r1, r1
 800cef2:	3301      	adds	r3, #1
 800cef4:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800cef8:	429d      	cmp	r5, r3
 800cefa:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800cefe:	f84c 1b04 	str.w	r1, [ip], #4
 800cf02:	dcec      	bgt.n	800cede <__multadd+0x12>
 800cf04:	b1d7      	cbz	r7, 800cf3c <__multadd+0x70>
 800cf06:	68a3      	ldr	r3, [r4, #8]
 800cf08:	42ab      	cmp	r3, r5
 800cf0a:	dc12      	bgt.n	800cf32 <__multadd+0x66>
 800cf0c:	6861      	ldr	r1, [r4, #4]
 800cf0e:	4630      	mov	r0, r6
 800cf10:	3101      	adds	r1, #1
 800cf12:	f7ff ff90 	bl	800ce36 <_Balloc>
 800cf16:	6922      	ldr	r2, [r4, #16]
 800cf18:	3202      	adds	r2, #2
 800cf1a:	f104 010c 	add.w	r1, r4, #12
 800cf1e:	4680      	mov	r8, r0
 800cf20:	0092      	lsls	r2, r2, #2
 800cf22:	300c      	adds	r0, #12
 800cf24:	f7ff ff7c 	bl	800ce20 <memcpy>
 800cf28:	4621      	mov	r1, r4
 800cf2a:	4630      	mov	r0, r6
 800cf2c:	f7ff ffb7 	bl	800ce9e <_Bfree>
 800cf30:	4644      	mov	r4, r8
 800cf32:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cf36:	3501      	adds	r5, #1
 800cf38:	615f      	str	r7, [r3, #20]
 800cf3a:	6125      	str	r5, [r4, #16]
 800cf3c:	4620      	mov	r0, r4
 800cf3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800cf42 <__s2b>:
 800cf42:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf46:	460c      	mov	r4, r1
 800cf48:	4615      	mov	r5, r2
 800cf4a:	461f      	mov	r7, r3
 800cf4c:	2209      	movs	r2, #9
 800cf4e:	3308      	adds	r3, #8
 800cf50:	4606      	mov	r6, r0
 800cf52:	fb93 f3f2 	sdiv	r3, r3, r2
 800cf56:	2100      	movs	r1, #0
 800cf58:	2201      	movs	r2, #1
 800cf5a:	429a      	cmp	r2, r3
 800cf5c:	db20      	blt.n	800cfa0 <__s2b+0x5e>
 800cf5e:	4630      	mov	r0, r6
 800cf60:	f7ff ff69 	bl	800ce36 <_Balloc>
 800cf64:	9b08      	ldr	r3, [sp, #32]
 800cf66:	6143      	str	r3, [r0, #20]
 800cf68:	2d09      	cmp	r5, #9
 800cf6a:	f04f 0301 	mov.w	r3, #1
 800cf6e:	6103      	str	r3, [r0, #16]
 800cf70:	dd19      	ble.n	800cfa6 <__s2b+0x64>
 800cf72:	f104 0809 	add.w	r8, r4, #9
 800cf76:	46c1      	mov	r9, r8
 800cf78:	442c      	add	r4, r5
 800cf7a:	f819 3b01 	ldrb.w	r3, [r9], #1
 800cf7e:	4601      	mov	r1, r0
 800cf80:	3b30      	subs	r3, #48	; 0x30
 800cf82:	220a      	movs	r2, #10
 800cf84:	4630      	mov	r0, r6
 800cf86:	f7ff ffa1 	bl	800cecc <__multadd>
 800cf8a:	45a1      	cmp	r9, r4
 800cf8c:	d1f5      	bne.n	800cf7a <__s2b+0x38>
 800cf8e:	eb08 0405 	add.w	r4, r8, r5
 800cf92:	3c08      	subs	r4, #8
 800cf94:	1b2d      	subs	r5, r5, r4
 800cf96:	1963      	adds	r3, r4, r5
 800cf98:	42bb      	cmp	r3, r7
 800cf9a:	db07      	blt.n	800cfac <__s2b+0x6a>
 800cf9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cfa0:	0052      	lsls	r2, r2, #1
 800cfa2:	3101      	adds	r1, #1
 800cfa4:	e7d9      	b.n	800cf5a <__s2b+0x18>
 800cfa6:	340a      	adds	r4, #10
 800cfa8:	2509      	movs	r5, #9
 800cfaa:	e7f3      	b.n	800cf94 <__s2b+0x52>
 800cfac:	f814 3b01 	ldrb.w	r3, [r4], #1
 800cfb0:	4601      	mov	r1, r0
 800cfb2:	3b30      	subs	r3, #48	; 0x30
 800cfb4:	220a      	movs	r2, #10
 800cfb6:	4630      	mov	r0, r6
 800cfb8:	f7ff ff88 	bl	800cecc <__multadd>
 800cfbc:	e7eb      	b.n	800cf96 <__s2b+0x54>

0800cfbe <__hi0bits>:
 800cfbe:	0c02      	lsrs	r2, r0, #16
 800cfc0:	0412      	lsls	r2, r2, #16
 800cfc2:	4603      	mov	r3, r0
 800cfc4:	b9b2      	cbnz	r2, 800cff4 <__hi0bits+0x36>
 800cfc6:	0403      	lsls	r3, r0, #16
 800cfc8:	2010      	movs	r0, #16
 800cfca:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800cfce:	bf04      	itt	eq
 800cfd0:	021b      	lsleq	r3, r3, #8
 800cfd2:	3008      	addeq	r0, #8
 800cfd4:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800cfd8:	bf04      	itt	eq
 800cfda:	011b      	lsleq	r3, r3, #4
 800cfdc:	3004      	addeq	r0, #4
 800cfde:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800cfe2:	bf04      	itt	eq
 800cfe4:	009b      	lsleq	r3, r3, #2
 800cfe6:	3002      	addeq	r0, #2
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	db06      	blt.n	800cffa <__hi0bits+0x3c>
 800cfec:	005b      	lsls	r3, r3, #1
 800cfee:	d503      	bpl.n	800cff8 <__hi0bits+0x3a>
 800cff0:	3001      	adds	r0, #1
 800cff2:	4770      	bx	lr
 800cff4:	2000      	movs	r0, #0
 800cff6:	e7e8      	b.n	800cfca <__hi0bits+0xc>
 800cff8:	2020      	movs	r0, #32
 800cffa:	4770      	bx	lr

0800cffc <__lo0bits>:
 800cffc:	6803      	ldr	r3, [r0, #0]
 800cffe:	f013 0207 	ands.w	r2, r3, #7
 800d002:	4601      	mov	r1, r0
 800d004:	d00b      	beq.n	800d01e <__lo0bits+0x22>
 800d006:	07da      	lsls	r2, r3, #31
 800d008:	d423      	bmi.n	800d052 <__lo0bits+0x56>
 800d00a:	0798      	lsls	r0, r3, #30
 800d00c:	bf49      	itett	mi
 800d00e:	085b      	lsrmi	r3, r3, #1
 800d010:	089b      	lsrpl	r3, r3, #2
 800d012:	2001      	movmi	r0, #1
 800d014:	600b      	strmi	r3, [r1, #0]
 800d016:	bf5c      	itt	pl
 800d018:	600b      	strpl	r3, [r1, #0]
 800d01a:	2002      	movpl	r0, #2
 800d01c:	4770      	bx	lr
 800d01e:	b298      	uxth	r0, r3
 800d020:	b9a8      	cbnz	r0, 800d04e <__lo0bits+0x52>
 800d022:	0c1b      	lsrs	r3, r3, #16
 800d024:	2010      	movs	r0, #16
 800d026:	f013 0fff 	tst.w	r3, #255	; 0xff
 800d02a:	bf04      	itt	eq
 800d02c:	0a1b      	lsreq	r3, r3, #8
 800d02e:	3008      	addeq	r0, #8
 800d030:	071a      	lsls	r2, r3, #28
 800d032:	bf04      	itt	eq
 800d034:	091b      	lsreq	r3, r3, #4
 800d036:	3004      	addeq	r0, #4
 800d038:	079a      	lsls	r2, r3, #30
 800d03a:	bf04      	itt	eq
 800d03c:	089b      	lsreq	r3, r3, #2
 800d03e:	3002      	addeq	r0, #2
 800d040:	07da      	lsls	r2, r3, #31
 800d042:	d402      	bmi.n	800d04a <__lo0bits+0x4e>
 800d044:	085b      	lsrs	r3, r3, #1
 800d046:	d006      	beq.n	800d056 <__lo0bits+0x5a>
 800d048:	3001      	adds	r0, #1
 800d04a:	600b      	str	r3, [r1, #0]
 800d04c:	4770      	bx	lr
 800d04e:	4610      	mov	r0, r2
 800d050:	e7e9      	b.n	800d026 <__lo0bits+0x2a>
 800d052:	2000      	movs	r0, #0
 800d054:	4770      	bx	lr
 800d056:	2020      	movs	r0, #32
 800d058:	4770      	bx	lr

0800d05a <__i2b>:
 800d05a:	b510      	push	{r4, lr}
 800d05c:	460c      	mov	r4, r1
 800d05e:	2101      	movs	r1, #1
 800d060:	f7ff fee9 	bl	800ce36 <_Balloc>
 800d064:	2201      	movs	r2, #1
 800d066:	6144      	str	r4, [r0, #20]
 800d068:	6102      	str	r2, [r0, #16]
 800d06a:	bd10      	pop	{r4, pc}

0800d06c <__multiply>:
 800d06c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d070:	4614      	mov	r4, r2
 800d072:	690a      	ldr	r2, [r1, #16]
 800d074:	6923      	ldr	r3, [r4, #16]
 800d076:	429a      	cmp	r2, r3
 800d078:	bfb8      	it	lt
 800d07a:	460b      	movlt	r3, r1
 800d07c:	4688      	mov	r8, r1
 800d07e:	bfbc      	itt	lt
 800d080:	46a0      	movlt	r8, r4
 800d082:	461c      	movlt	r4, r3
 800d084:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d088:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800d08c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d090:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d094:	eb07 0609 	add.w	r6, r7, r9
 800d098:	42b3      	cmp	r3, r6
 800d09a:	bfb8      	it	lt
 800d09c:	3101      	addlt	r1, #1
 800d09e:	f7ff feca 	bl	800ce36 <_Balloc>
 800d0a2:	f100 0514 	add.w	r5, r0, #20
 800d0a6:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800d0aa:	462b      	mov	r3, r5
 800d0ac:	2200      	movs	r2, #0
 800d0ae:	4573      	cmp	r3, lr
 800d0b0:	d316      	bcc.n	800d0e0 <__multiply+0x74>
 800d0b2:	f104 0214 	add.w	r2, r4, #20
 800d0b6:	f108 0114 	add.w	r1, r8, #20
 800d0ba:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800d0be:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800d0c2:	9300      	str	r3, [sp, #0]
 800d0c4:	9b00      	ldr	r3, [sp, #0]
 800d0c6:	9201      	str	r2, [sp, #4]
 800d0c8:	4293      	cmp	r3, r2
 800d0ca:	d80c      	bhi.n	800d0e6 <__multiply+0x7a>
 800d0cc:	2e00      	cmp	r6, #0
 800d0ce:	dd03      	ble.n	800d0d8 <__multiply+0x6c>
 800d0d0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d05d      	beq.n	800d194 <__multiply+0x128>
 800d0d8:	6106      	str	r6, [r0, #16]
 800d0da:	b003      	add	sp, #12
 800d0dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0e0:	f843 2b04 	str.w	r2, [r3], #4
 800d0e4:	e7e3      	b.n	800d0ae <__multiply+0x42>
 800d0e6:	f8b2 b000 	ldrh.w	fp, [r2]
 800d0ea:	f1bb 0f00 	cmp.w	fp, #0
 800d0ee:	d023      	beq.n	800d138 <__multiply+0xcc>
 800d0f0:	4689      	mov	r9, r1
 800d0f2:	46ac      	mov	ip, r5
 800d0f4:	f04f 0800 	mov.w	r8, #0
 800d0f8:	f859 4b04 	ldr.w	r4, [r9], #4
 800d0fc:	f8dc a000 	ldr.w	sl, [ip]
 800d100:	b2a3      	uxth	r3, r4
 800d102:	fa1f fa8a 	uxth.w	sl, sl
 800d106:	fb0b a303 	mla	r3, fp, r3, sl
 800d10a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800d10e:	f8dc 4000 	ldr.w	r4, [ip]
 800d112:	4443      	add	r3, r8
 800d114:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800d118:	fb0b 840a 	mla	r4, fp, sl, r8
 800d11c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800d120:	46e2      	mov	sl, ip
 800d122:	b29b      	uxth	r3, r3
 800d124:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800d128:	454f      	cmp	r7, r9
 800d12a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800d12e:	f84a 3b04 	str.w	r3, [sl], #4
 800d132:	d82b      	bhi.n	800d18c <__multiply+0x120>
 800d134:	f8cc 8004 	str.w	r8, [ip, #4]
 800d138:	9b01      	ldr	r3, [sp, #4]
 800d13a:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800d13e:	3204      	adds	r2, #4
 800d140:	f1ba 0f00 	cmp.w	sl, #0
 800d144:	d020      	beq.n	800d188 <__multiply+0x11c>
 800d146:	682b      	ldr	r3, [r5, #0]
 800d148:	4689      	mov	r9, r1
 800d14a:	46a8      	mov	r8, r5
 800d14c:	f04f 0b00 	mov.w	fp, #0
 800d150:	f8b9 c000 	ldrh.w	ip, [r9]
 800d154:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800d158:	fb0a 440c 	mla	r4, sl, ip, r4
 800d15c:	445c      	add	r4, fp
 800d15e:	46c4      	mov	ip, r8
 800d160:	b29b      	uxth	r3, r3
 800d162:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800d166:	f84c 3b04 	str.w	r3, [ip], #4
 800d16a:	f859 3b04 	ldr.w	r3, [r9], #4
 800d16e:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800d172:	0c1b      	lsrs	r3, r3, #16
 800d174:	fb0a b303 	mla	r3, sl, r3, fp
 800d178:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800d17c:	454f      	cmp	r7, r9
 800d17e:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800d182:	d805      	bhi.n	800d190 <__multiply+0x124>
 800d184:	f8c8 3004 	str.w	r3, [r8, #4]
 800d188:	3504      	adds	r5, #4
 800d18a:	e79b      	b.n	800d0c4 <__multiply+0x58>
 800d18c:	46d4      	mov	ip, sl
 800d18e:	e7b3      	b.n	800d0f8 <__multiply+0x8c>
 800d190:	46e0      	mov	r8, ip
 800d192:	e7dd      	b.n	800d150 <__multiply+0xe4>
 800d194:	3e01      	subs	r6, #1
 800d196:	e799      	b.n	800d0cc <__multiply+0x60>

0800d198 <__pow5mult>:
 800d198:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d19c:	4615      	mov	r5, r2
 800d19e:	f012 0203 	ands.w	r2, r2, #3
 800d1a2:	4606      	mov	r6, r0
 800d1a4:	460f      	mov	r7, r1
 800d1a6:	d007      	beq.n	800d1b8 <__pow5mult+0x20>
 800d1a8:	3a01      	subs	r2, #1
 800d1aa:	4c21      	ldr	r4, [pc, #132]	; (800d230 <__pow5mult+0x98>)
 800d1ac:	2300      	movs	r3, #0
 800d1ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d1b2:	f7ff fe8b 	bl	800cecc <__multadd>
 800d1b6:	4607      	mov	r7, r0
 800d1b8:	10ad      	asrs	r5, r5, #2
 800d1ba:	d035      	beq.n	800d228 <__pow5mult+0x90>
 800d1bc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d1be:	b93c      	cbnz	r4, 800d1d0 <__pow5mult+0x38>
 800d1c0:	2010      	movs	r0, #16
 800d1c2:	f7ff fe13 	bl	800cdec <malloc>
 800d1c6:	6270      	str	r0, [r6, #36]	; 0x24
 800d1c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d1cc:	6004      	str	r4, [r0, #0]
 800d1ce:	60c4      	str	r4, [r0, #12]
 800d1d0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d1d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d1d8:	b94c      	cbnz	r4, 800d1ee <__pow5mult+0x56>
 800d1da:	f240 2171 	movw	r1, #625	; 0x271
 800d1de:	4630      	mov	r0, r6
 800d1e0:	f7ff ff3b 	bl	800d05a <__i2b>
 800d1e4:	2300      	movs	r3, #0
 800d1e6:	f8c8 0008 	str.w	r0, [r8, #8]
 800d1ea:	4604      	mov	r4, r0
 800d1ec:	6003      	str	r3, [r0, #0]
 800d1ee:	f04f 0800 	mov.w	r8, #0
 800d1f2:	07eb      	lsls	r3, r5, #31
 800d1f4:	d50a      	bpl.n	800d20c <__pow5mult+0x74>
 800d1f6:	4639      	mov	r1, r7
 800d1f8:	4622      	mov	r2, r4
 800d1fa:	4630      	mov	r0, r6
 800d1fc:	f7ff ff36 	bl	800d06c <__multiply>
 800d200:	4639      	mov	r1, r7
 800d202:	4681      	mov	r9, r0
 800d204:	4630      	mov	r0, r6
 800d206:	f7ff fe4a 	bl	800ce9e <_Bfree>
 800d20a:	464f      	mov	r7, r9
 800d20c:	106d      	asrs	r5, r5, #1
 800d20e:	d00b      	beq.n	800d228 <__pow5mult+0x90>
 800d210:	6820      	ldr	r0, [r4, #0]
 800d212:	b938      	cbnz	r0, 800d224 <__pow5mult+0x8c>
 800d214:	4622      	mov	r2, r4
 800d216:	4621      	mov	r1, r4
 800d218:	4630      	mov	r0, r6
 800d21a:	f7ff ff27 	bl	800d06c <__multiply>
 800d21e:	6020      	str	r0, [r4, #0]
 800d220:	f8c0 8000 	str.w	r8, [r0]
 800d224:	4604      	mov	r4, r0
 800d226:	e7e4      	b.n	800d1f2 <__pow5mult+0x5a>
 800d228:	4638      	mov	r0, r7
 800d22a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d22e:	bf00      	nop
 800d230:	0800e8d0 	.word	0x0800e8d0

0800d234 <__lshift>:
 800d234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d238:	460c      	mov	r4, r1
 800d23a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d23e:	6923      	ldr	r3, [r4, #16]
 800d240:	6849      	ldr	r1, [r1, #4]
 800d242:	eb0a 0903 	add.w	r9, sl, r3
 800d246:	68a3      	ldr	r3, [r4, #8]
 800d248:	4607      	mov	r7, r0
 800d24a:	4616      	mov	r6, r2
 800d24c:	f109 0501 	add.w	r5, r9, #1
 800d250:	42ab      	cmp	r3, r5
 800d252:	db32      	blt.n	800d2ba <__lshift+0x86>
 800d254:	4638      	mov	r0, r7
 800d256:	f7ff fdee 	bl	800ce36 <_Balloc>
 800d25a:	2300      	movs	r3, #0
 800d25c:	4680      	mov	r8, r0
 800d25e:	f100 0114 	add.w	r1, r0, #20
 800d262:	461a      	mov	r2, r3
 800d264:	4553      	cmp	r3, sl
 800d266:	db2b      	blt.n	800d2c0 <__lshift+0x8c>
 800d268:	6920      	ldr	r0, [r4, #16]
 800d26a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d26e:	f104 0314 	add.w	r3, r4, #20
 800d272:	f016 021f 	ands.w	r2, r6, #31
 800d276:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d27a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d27e:	d025      	beq.n	800d2cc <__lshift+0x98>
 800d280:	f1c2 0e20 	rsb	lr, r2, #32
 800d284:	2000      	movs	r0, #0
 800d286:	681e      	ldr	r6, [r3, #0]
 800d288:	468a      	mov	sl, r1
 800d28a:	4096      	lsls	r6, r2
 800d28c:	4330      	orrs	r0, r6
 800d28e:	f84a 0b04 	str.w	r0, [sl], #4
 800d292:	f853 0b04 	ldr.w	r0, [r3], #4
 800d296:	459c      	cmp	ip, r3
 800d298:	fa20 f00e 	lsr.w	r0, r0, lr
 800d29c:	d814      	bhi.n	800d2c8 <__lshift+0x94>
 800d29e:	6048      	str	r0, [r1, #4]
 800d2a0:	b108      	cbz	r0, 800d2a6 <__lshift+0x72>
 800d2a2:	f109 0502 	add.w	r5, r9, #2
 800d2a6:	3d01      	subs	r5, #1
 800d2a8:	4638      	mov	r0, r7
 800d2aa:	f8c8 5010 	str.w	r5, [r8, #16]
 800d2ae:	4621      	mov	r1, r4
 800d2b0:	f7ff fdf5 	bl	800ce9e <_Bfree>
 800d2b4:	4640      	mov	r0, r8
 800d2b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2ba:	3101      	adds	r1, #1
 800d2bc:	005b      	lsls	r3, r3, #1
 800d2be:	e7c7      	b.n	800d250 <__lshift+0x1c>
 800d2c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800d2c4:	3301      	adds	r3, #1
 800d2c6:	e7cd      	b.n	800d264 <__lshift+0x30>
 800d2c8:	4651      	mov	r1, sl
 800d2ca:	e7dc      	b.n	800d286 <__lshift+0x52>
 800d2cc:	3904      	subs	r1, #4
 800d2ce:	f853 2b04 	ldr.w	r2, [r3], #4
 800d2d2:	f841 2f04 	str.w	r2, [r1, #4]!
 800d2d6:	459c      	cmp	ip, r3
 800d2d8:	d8f9      	bhi.n	800d2ce <__lshift+0x9a>
 800d2da:	e7e4      	b.n	800d2a6 <__lshift+0x72>

0800d2dc <__mcmp>:
 800d2dc:	6903      	ldr	r3, [r0, #16]
 800d2de:	690a      	ldr	r2, [r1, #16]
 800d2e0:	1a9b      	subs	r3, r3, r2
 800d2e2:	b530      	push	{r4, r5, lr}
 800d2e4:	d10c      	bne.n	800d300 <__mcmp+0x24>
 800d2e6:	0092      	lsls	r2, r2, #2
 800d2e8:	3014      	adds	r0, #20
 800d2ea:	3114      	adds	r1, #20
 800d2ec:	1884      	adds	r4, r0, r2
 800d2ee:	4411      	add	r1, r2
 800d2f0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d2f4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d2f8:	4295      	cmp	r5, r2
 800d2fa:	d003      	beq.n	800d304 <__mcmp+0x28>
 800d2fc:	d305      	bcc.n	800d30a <__mcmp+0x2e>
 800d2fe:	2301      	movs	r3, #1
 800d300:	4618      	mov	r0, r3
 800d302:	bd30      	pop	{r4, r5, pc}
 800d304:	42a0      	cmp	r0, r4
 800d306:	d3f3      	bcc.n	800d2f0 <__mcmp+0x14>
 800d308:	e7fa      	b.n	800d300 <__mcmp+0x24>
 800d30a:	f04f 33ff 	mov.w	r3, #4294967295
 800d30e:	e7f7      	b.n	800d300 <__mcmp+0x24>

0800d310 <__mdiff>:
 800d310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d314:	460d      	mov	r5, r1
 800d316:	4607      	mov	r7, r0
 800d318:	4611      	mov	r1, r2
 800d31a:	4628      	mov	r0, r5
 800d31c:	4614      	mov	r4, r2
 800d31e:	f7ff ffdd 	bl	800d2dc <__mcmp>
 800d322:	1e06      	subs	r6, r0, #0
 800d324:	d108      	bne.n	800d338 <__mdiff+0x28>
 800d326:	4631      	mov	r1, r6
 800d328:	4638      	mov	r0, r7
 800d32a:	f7ff fd84 	bl	800ce36 <_Balloc>
 800d32e:	2301      	movs	r3, #1
 800d330:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800d334:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d338:	bfa4      	itt	ge
 800d33a:	4623      	movge	r3, r4
 800d33c:	462c      	movge	r4, r5
 800d33e:	4638      	mov	r0, r7
 800d340:	6861      	ldr	r1, [r4, #4]
 800d342:	bfa6      	itte	ge
 800d344:	461d      	movge	r5, r3
 800d346:	2600      	movge	r6, #0
 800d348:	2601      	movlt	r6, #1
 800d34a:	f7ff fd74 	bl	800ce36 <_Balloc>
 800d34e:	692b      	ldr	r3, [r5, #16]
 800d350:	60c6      	str	r6, [r0, #12]
 800d352:	6926      	ldr	r6, [r4, #16]
 800d354:	f105 0914 	add.w	r9, r5, #20
 800d358:	f104 0214 	add.w	r2, r4, #20
 800d35c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800d360:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800d364:	f100 0514 	add.w	r5, r0, #20
 800d368:	f04f 0e00 	mov.w	lr, #0
 800d36c:	f852 ab04 	ldr.w	sl, [r2], #4
 800d370:	f859 4b04 	ldr.w	r4, [r9], #4
 800d374:	fa1e f18a 	uxtah	r1, lr, sl
 800d378:	b2a3      	uxth	r3, r4
 800d37a:	1ac9      	subs	r1, r1, r3
 800d37c:	0c23      	lsrs	r3, r4, #16
 800d37e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800d382:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800d386:	b289      	uxth	r1, r1
 800d388:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800d38c:	45c8      	cmp	r8, r9
 800d38e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800d392:	4694      	mov	ip, r2
 800d394:	f845 3b04 	str.w	r3, [r5], #4
 800d398:	d8e8      	bhi.n	800d36c <__mdiff+0x5c>
 800d39a:	45bc      	cmp	ip, r7
 800d39c:	d304      	bcc.n	800d3a8 <__mdiff+0x98>
 800d39e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800d3a2:	b183      	cbz	r3, 800d3c6 <__mdiff+0xb6>
 800d3a4:	6106      	str	r6, [r0, #16]
 800d3a6:	e7c5      	b.n	800d334 <__mdiff+0x24>
 800d3a8:	f85c 1b04 	ldr.w	r1, [ip], #4
 800d3ac:	fa1e f381 	uxtah	r3, lr, r1
 800d3b0:	141a      	asrs	r2, r3, #16
 800d3b2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d3b6:	b29b      	uxth	r3, r3
 800d3b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d3bc:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800d3c0:	f845 3b04 	str.w	r3, [r5], #4
 800d3c4:	e7e9      	b.n	800d39a <__mdiff+0x8a>
 800d3c6:	3e01      	subs	r6, #1
 800d3c8:	e7e9      	b.n	800d39e <__mdiff+0x8e>
	...

0800d3cc <__ulp>:
 800d3cc:	4b12      	ldr	r3, [pc, #72]	; (800d418 <__ulp+0x4c>)
 800d3ce:	ee10 2a90 	vmov	r2, s1
 800d3d2:	401a      	ands	r2, r3
 800d3d4:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	dd04      	ble.n	800d3e6 <__ulp+0x1a>
 800d3dc:	2000      	movs	r0, #0
 800d3de:	4619      	mov	r1, r3
 800d3e0:	ec41 0b10 	vmov	d0, r0, r1
 800d3e4:	4770      	bx	lr
 800d3e6:	425b      	negs	r3, r3
 800d3e8:	151b      	asrs	r3, r3, #20
 800d3ea:	2b13      	cmp	r3, #19
 800d3ec:	f04f 0000 	mov.w	r0, #0
 800d3f0:	f04f 0100 	mov.w	r1, #0
 800d3f4:	dc04      	bgt.n	800d400 <__ulp+0x34>
 800d3f6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800d3fa:	fa42 f103 	asr.w	r1, r2, r3
 800d3fe:	e7ef      	b.n	800d3e0 <__ulp+0x14>
 800d400:	3b14      	subs	r3, #20
 800d402:	2b1e      	cmp	r3, #30
 800d404:	f04f 0201 	mov.w	r2, #1
 800d408:	bfda      	itte	le
 800d40a:	f1c3 031f 	rsble	r3, r3, #31
 800d40e:	fa02 f303 	lslle.w	r3, r2, r3
 800d412:	4613      	movgt	r3, r2
 800d414:	4618      	mov	r0, r3
 800d416:	e7e3      	b.n	800d3e0 <__ulp+0x14>
 800d418:	7ff00000 	.word	0x7ff00000

0800d41c <__b2d>:
 800d41c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d41e:	6905      	ldr	r5, [r0, #16]
 800d420:	f100 0714 	add.w	r7, r0, #20
 800d424:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800d428:	1f2e      	subs	r6, r5, #4
 800d42a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800d42e:	4620      	mov	r0, r4
 800d430:	f7ff fdc5 	bl	800cfbe <__hi0bits>
 800d434:	f1c0 0320 	rsb	r3, r0, #32
 800d438:	280a      	cmp	r0, #10
 800d43a:	600b      	str	r3, [r1, #0]
 800d43c:	f8df c074 	ldr.w	ip, [pc, #116]	; 800d4b4 <__b2d+0x98>
 800d440:	dc14      	bgt.n	800d46c <__b2d+0x50>
 800d442:	f1c0 0e0b 	rsb	lr, r0, #11
 800d446:	fa24 f10e 	lsr.w	r1, r4, lr
 800d44a:	42b7      	cmp	r7, r6
 800d44c:	ea41 030c 	orr.w	r3, r1, ip
 800d450:	bf34      	ite	cc
 800d452:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d456:	2100      	movcs	r1, #0
 800d458:	3015      	adds	r0, #21
 800d45a:	fa04 f000 	lsl.w	r0, r4, r0
 800d45e:	fa21 f10e 	lsr.w	r1, r1, lr
 800d462:	ea40 0201 	orr.w	r2, r0, r1
 800d466:	ec43 2b10 	vmov	d0, r2, r3
 800d46a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d46c:	42b7      	cmp	r7, r6
 800d46e:	bf3a      	itte	cc
 800d470:	f1a5 0608 	subcc.w	r6, r5, #8
 800d474:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d478:	2100      	movcs	r1, #0
 800d47a:	380b      	subs	r0, #11
 800d47c:	d015      	beq.n	800d4aa <__b2d+0x8e>
 800d47e:	4084      	lsls	r4, r0
 800d480:	f1c0 0520 	rsb	r5, r0, #32
 800d484:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800d488:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800d48c:	42be      	cmp	r6, r7
 800d48e:	fa21 fc05 	lsr.w	ip, r1, r5
 800d492:	ea44 030c 	orr.w	r3, r4, ip
 800d496:	bf8c      	ite	hi
 800d498:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800d49c:	2400      	movls	r4, #0
 800d49e:	fa01 f000 	lsl.w	r0, r1, r0
 800d4a2:	40ec      	lsrs	r4, r5
 800d4a4:	ea40 0204 	orr.w	r2, r0, r4
 800d4a8:	e7dd      	b.n	800d466 <__b2d+0x4a>
 800d4aa:	ea44 030c 	orr.w	r3, r4, ip
 800d4ae:	460a      	mov	r2, r1
 800d4b0:	e7d9      	b.n	800d466 <__b2d+0x4a>
 800d4b2:	bf00      	nop
 800d4b4:	3ff00000 	.word	0x3ff00000

0800d4b8 <__d2b>:
 800d4b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d4bc:	460e      	mov	r6, r1
 800d4be:	2101      	movs	r1, #1
 800d4c0:	ec59 8b10 	vmov	r8, r9, d0
 800d4c4:	4615      	mov	r5, r2
 800d4c6:	f7ff fcb6 	bl	800ce36 <_Balloc>
 800d4ca:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800d4ce:	4607      	mov	r7, r0
 800d4d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d4d4:	bb34      	cbnz	r4, 800d524 <__d2b+0x6c>
 800d4d6:	9301      	str	r3, [sp, #4]
 800d4d8:	f1b8 0300 	subs.w	r3, r8, #0
 800d4dc:	d027      	beq.n	800d52e <__d2b+0x76>
 800d4de:	a802      	add	r0, sp, #8
 800d4e0:	f840 3d08 	str.w	r3, [r0, #-8]!
 800d4e4:	f7ff fd8a 	bl	800cffc <__lo0bits>
 800d4e8:	9900      	ldr	r1, [sp, #0]
 800d4ea:	b1f0      	cbz	r0, 800d52a <__d2b+0x72>
 800d4ec:	9a01      	ldr	r2, [sp, #4]
 800d4ee:	f1c0 0320 	rsb	r3, r0, #32
 800d4f2:	fa02 f303 	lsl.w	r3, r2, r3
 800d4f6:	430b      	orrs	r3, r1
 800d4f8:	40c2      	lsrs	r2, r0
 800d4fa:	617b      	str	r3, [r7, #20]
 800d4fc:	9201      	str	r2, [sp, #4]
 800d4fe:	9b01      	ldr	r3, [sp, #4]
 800d500:	61bb      	str	r3, [r7, #24]
 800d502:	2b00      	cmp	r3, #0
 800d504:	bf14      	ite	ne
 800d506:	2102      	movne	r1, #2
 800d508:	2101      	moveq	r1, #1
 800d50a:	6139      	str	r1, [r7, #16]
 800d50c:	b1c4      	cbz	r4, 800d540 <__d2b+0x88>
 800d50e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800d512:	4404      	add	r4, r0
 800d514:	6034      	str	r4, [r6, #0]
 800d516:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d51a:	6028      	str	r0, [r5, #0]
 800d51c:	4638      	mov	r0, r7
 800d51e:	b003      	add	sp, #12
 800d520:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d524:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d528:	e7d5      	b.n	800d4d6 <__d2b+0x1e>
 800d52a:	6179      	str	r1, [r7, #20]
 800d52c:	e7e7      	b.n	800d4fe <__d2b+0x46>
 800d52e:	a801      	add	r0, sp, #4
 800d530:	f7ff fd64 	bl	800cffc <__lo0bits>
 800d534:	9b01      	ldr	r3, [sp, #4]
 800d536:	617b      	str	r3, [r7, #20]
 800d538:	2101      	movs	r1, #1
 800d53a:	6139      	str	r1, [r7, #16]
 800d53c:	3020      	adds	r0, #32
 800d53e:	e7e5      	b.n	800d50c <__d2b+0x54>
 800d540:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800d544:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d548:	6030      	str	r0, [r6, #0]
 800d54a:	6918      	ldr	r0, [r3, #16]
 800d54c:	f7ff fd37 	bl	800cfbe <__hi0bits>
 800d550:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800d554:	e7e1      	b.n	800d51a <__d2b+0x62>

0800d556 <__ratio>:
 800d556:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d55a:	4688      	mov	r8, r1
 800d55c:	4669      	mov	r1, sp
 800d55e:	4681      	mov	r9, r0
 800d560:	f7ff ff5c 	bl	800d41c <__b2d>
 800d564:	a901      	add	r1, sp, #4
 800d566:	4640      	mov	r0, r8
 800d568:	ec57 6b10 	vmov	r6, r7, d0
 800d56c:	f7ff ff56 	bl	800d41c <__b2d>
 800d570:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d574:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d578:	eba3 0c02 	sub.w	ip, r3, r2
 800d57c:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d580:	1a9b      	subs	r3, r3, r2
 800d582:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d586:	ec5b ab10 	vmov	sl, fp, d0
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	bfce      	itee	gt
 800d58e:	463a      	movgt	r2, r7
 800d590:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d594:	465a      	movle	r2, fp
 800d596:	4659      	mov	r1, fp
 800d598:	463d      	mov	r5, r7
 800d59a:	bfd4      	ite	le
 800d59c:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800d5a0:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800d5a4:	4630      	mov	r0, r6
 800d5a6:	ee10 2a10 	vmov	r2, s0
 800d5aa:	460b      	mov	r3, r1
 800d5ac:	4629      	mov	r1, r5
 800d5ae:	f7f3 f975 	bl	800089c <__aeabi_ddiv>
 800d5b2:	ec41 0b10 	vmov	d0, r0, r1
 800d5b6:	b003      	add	sp, #12
 800d5b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d5bc <__copybits>:
 800d5bc:	3901      	subs	r1, #1
 800d5be:	b510      	push	{r4, lr}
 800d5c0:	1149      	asrs	r1, r1, #5
 800d5c2:	6914      	ldr	r4, [r2, #16]
 800d5c4:	3101      	adds	r1, #1
 800d5c6:	f102 0314 	add.w	r3, r2, #20
 800d5ca:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d5ce:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d5d2:	42a3      	cmp	r3, r4
 800d5d4:	4602      	mov	r2, r0
 800d5d6:	d303      	bcc.n	800d5e0 <__copybits+0x24>
 800d5d8:	2300      	movs	r3, #0
 800d5da:	428a      	cmp	r2, r1
 800d5dc:	d305      	bcc.n	800d5ea <__copybits+0x2e>
 800d5de:	bd10      	pop	{r4, pc}
 800d5e0:	f853 2b04 	ldr.w	r2, [r3], #4
 800d5e4:	f840 2b04 	str.w	r2, [r0], #4
 800d5e8:	e7f3      	b.n	800d5d2 <__copybits+0x16>
 800d5ea:	f842 3b04 	str.w	r3, [r2], #4
 800d5ee:	e7f4      	b.n	800d5da <__copybits+0x1e>

0800d5f0 <__any_on>:
 800d5f0:	f100 0214 	add.w	r2, r0, #20
 800d5f4:	6900      	ldr	r0, [r0, #16]
 800d5f6:	114b      	asrs	r3, r1, #5
 800d5f8:	4298      	cmp	r0, r3
 800d5fa:	b510      	push	{r4, lr}
 800d5fc:	db11      	blt.n	800d622 <__any_on+0x32>
 800d5fe:	dd0a      	ble.n	800d616 <__any_on+0x26>
 800d600:	f011 011f 	ands.w	r1, r1, #31
 800d604:	d007      	beq.n	800d616 <__any_on+0x26>
 800d606:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d60a:	fa24 f001 	lsr.w	r0, r4, r1
 800d60e:	fa00 f101 	lsl.w	r1, r0, r1
 800d612:	428c      	cmp	r4, r1
 800d614:	d10b      	bne.n	800d62e <__any_on+0x3e>
 800d616:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d61a:	4293      	cmp	r3, r2
 800d61c:	d803      	bhi.n	800d626 <__any_on+0x36>
 800d61e:	2000      	movs	r0, #0
 800d620:	bd10      	pop	{r4, pc}
 800d622:	4603      	mov	r3, r0
 800d624:	e7f7      	b.n	800d616 <__any_on+0x26>
 800d626:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d62a:	2900      	cmp	r1, #0
 800d62c:	d0f5      	beq.n	800d61a <__any_on+0x2a>
 800d62e:	2001      	movs	r0, #1
 800d630:	e7f6      	b.n	800d620 <__any_on+0x30>

0800d632 <_calloc_r>:
 800d632:	b538      	push	{r3, r4, r5, lr}
 800d634:	fb02 f401 	mul.w	r4, r2, r1
 800d638:	4621      	mov	r1, r4
 800d63a:	f000 f857 	bl	800d6ec <_malloc_r>
 800d63e:	4605      	mov	r5, r0
 800d640:	b118      	cbz	r0, 800d64a <_calloc_r+0x18>
 800d642:	4622      	mov	r2, r4
 800d644:	2100      	movs	r1, #0
 800d646:	f7fc fd35 	bl	800a0b4 <memset>
 800d64a:	4628      	mov	r0, r5
 800d64c:	bd38      	pop	{r3, r4, r5, pc}
	...

0800d650 <_free_r>:
 800d650:	b538      	push	{r3, r4, r5, lr}
 800d652:	4605      	mov	r5, r0
 800d654:	2900      	cmp	r1, #0
 800d656:	d045      	beq.n	800d6e4 <_free_r+0x94>
 800d658:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d65c:	1f0c      	subs	r4, r1, #4
 800d65e:	2b00      	cmp	r3, #0
 800d660:	bfb8      	it	lt
 800d662:	18e4      	addlt	r4, r4, r3
 800d664:	f000 fa36 	bl	800dad4 <__malloc_lock>
 800d668:	4a1f      	ldr	r2, [pc, #124]	; (800d6e8 <_free_r+0x98>)
 800d66a:	6813      	ldr	r3, [r2, #0]
 800d66c:	4610      	mov	r0, r2
 800d66e:	b933      	cbnz	r3, 800d67e <_free_r+0x2e>
 800d670:	6063      	str	r3, [r4, #4]
 800d672:	6014      	str	r4, [r2, #0]
 800d674:	4628      	mov	r0, r5
 800d676:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d67a:	f000 ba2c 	b.w	800dad6 <__malloc_unlock>
 800d67e:	42a3      	cmp	r3, r4
 800d680:	d90c      	bls.n	800d69c <_free_r+0x4c>
 800d682:	6821      	ldr	r1, [r4, #0]
 800d684:	1862      	adds	r2, r4, r1
 800d686:	4293      	cmp	r3, r2
 800d688:	bf04      	itt	eq
 800d68a:	681a      	ldreq	r2, [r3, #0]
 800d68c:	685b      	ldreq	r3, [r3, #4]
 800d68e:	6063      	str	r3, [r4, #4]
 800d690:	bf04      	itt	eq
 800d692:	1852      	addeq	r2, r2, r1
 800d694:	6022      	streq	r2, [r4, #0]
 800d696:	6004      	str	r4, [r0, #0]
 800d698:	e7ec      	b.n	800d674 <_free_r+0x24>
 800d69a:	4613      	mov	r3, r2
 800d69c:	685a      	ldr	r2, [r3, #4]
 800d69e:	b10a      	cbz	r2, 800d6a4 <_free_r+0x54>
 800d6a0:	42a2      	cmp	r2, r4
 800d6a2:	d9fa      	bls.n	800d69a <_free_r+0x4a>
 800d6a4:	6819      	ldr	r1, [r3, #0]
 800d6a6:	1858      	adds	r0, r3, r1
 800d6a8:	42a0      	cmp	r0, r4
 800d6aa:	d10b      	bne.n	800d6c4 <_free_r+0x74>
 800d6ac:	6820      	ldr	r0, [r4, #0]
 800d6ae:	4401      	add	r1, r0
 800d6b0:	1858      	adds	r0, r3, r1
 800d6b2:	4282      	cmp	r2, r0
 800d6b4:	6019      	str	r1, [r3, #0]
 800d6b6:	d1dd      	bne.n	800d674 <_free_r+0x24>
 800d6b8:	6810      	ldr	r0, [r2, #0]
 800d6ba:	6852      	ldr	r2, [r2, #4]
 800d6bc:	605a      	str	r2, [r3, #4]
 800d6be:	4401      	add	r1, r0
 800d6c0:	6019      	str	r1, [r3, #0]
 800d6c2:	e7d7      	b.n	800d674 <_free_r+0x24>
 800d6c4:	d902      	bls.n	800d6cc <_free_r+0x7c>
 800d6c6:	230c      	movs	r3, #12
 800d6c8:	602b      	str	r3, [r5, #0]
 800d6ca:	e7d3      	b.n	800d674 <_free_r+0x24>
 800d6cc:	6820      	ldr	r0, [r4, #0]
 800d6ce:	1821      	adds	r1, r4, r0
 800d6d0:	428a      	cmp	r2, r1
 800d6d2:	bf04      	itt	eq
 800d6d4:	6811      	ldreq	r1, [r2, #0]
 800d6d6:	6852      	ldreq	r2, [r2, #4]
 800d6d8:	6062      	str	r2, [r4, #4]
 800d6da:	bf04      	itt	eq
 800d6dc:	1809      	addeq	r1, r1, r0
 800d6de:	6021      	streq	r1, [r4, #0]
 800d6e0:	605c      	str	r4, [r3, #4]
 800d6e2:	e7c7      	b.n	800d674 <_free_r+0x24>
 800d6e4:	bd38      	pop	{r3, r4, r5, pc}
 800d6e6:	bf00      	nop
 800d6e8:	20000204 	.word	0x20000204

0800d6ec <_malloc_r>:
 800d6ec:	b570      	push	{r4, r5, r6, lr}
 800d6ee:	1ccd      	adds	r5, r1, #3
 800d6f0:	f025 0503 	bic.w	r5, r5, #3
 800d6f4:	3508      	adds	r5, #8
 800d6f6:	2d0c      	cmp	r5, #12
 800d6f8:	bf38      	it	cc
 800d6fa:	250c      	movcc	r5, #12
 800d6fc:	2d00      	cmp	r5, #0
 800d6fe:	4606      	mov	r6, r0
 800d700:	db01      	blt.n	800d706 <_malloc_r+0x1a>
 800d702:	42a9      	cmp	r1, r5
 800d704:	d903      	bls.n	800d70e <_malloc_r+0x22>
 800d706:	230c      	movs	r3, #12
 800d708:	6033      	str	r3, [r6, #0]
 800d70a:	2000      	movs	r0, #0
 800d70c:	bd70      	pop	{r4, r5, r6, pc}
 800d70e:	f000 f9e1 	bl	800dad4 <__malloc_lock>
 800d712:	4a21      	ldr	r2, [pc, #132]	; (800d798 <_malloc_r+0xac>)
 800d714:	6814      	ldr	r4, [r2, #0]
 800d716:	4621      	mov	r1, r4
 800d718:	b991      	cbnz	r1, 800d740 <_malloc_r+0x54>
 800d71a:	4c20      	ldr	r4, [pc, #128]	; (800d79c <_malloc_r+0xb0>)
 800d71c:	6823      	ldr	r3, [r4, #0]
 800d71e:	b91b      	cbnz	r3, 800d728 <_malloc_r+0x3c>
 800d720:	4630      	mov	r0, r6
 800d722:	f000 f98f 	bl	800da44 <_sbrk_r>
 800d726:	6020      	str	r0, [r4, #0]
 800d728:	4629      	mov	r1, r5
 800d72a:	4630      	mov	r0, r6
 800d72c:	f000 f98a 	bl	800da44 <_sbrk_r>
 800d730:	1c43      	adds	r3, r0, #1
 800d732:	d124      	bne.n	800d77e <_malloc_r+0x92>
 800d734:	230c      	movs	r3, #12
 800d736:	6033      	str	r3, [r6, #0]
 800d738:	4630      	mov	r0, r6
 800d73a:	f000 f9cc 	bl	800dad6 <__malloc_unlock>
 800d73e:	e7e4      	b.n	800d70a <_malloc_r+0x1e>
 800d740:	680b      	ldr	r3, [r1, #0]
 800d742:	1b5b      	subs	r3, r3, r5
 800d744:	d418      	bmi.n	800d778 <_malloc_r+0x8c>
 800d746:	2b0b      	cmp	r3, #11
 800d748:	d90f      	bls.n	800d76a <_malloc_r+0x7e>
 800d74a:	600b      	str	r3, [r1, #0]
 800d74c:	50cd      	str	r5, [r1, r3]
 800d74e:	18cc      	adds	r4, r1, r3
 800d750:	4630      	mov	r0, r6
 800d752:	f000 f9c0 	bl	800dad6 <__malloc_unlock>
 800d756:	f104 000b 	add.w	r0, r4, #11
 800d75a:	1d23      	adds	r3, r4, #4
 800d75c:	f020 0007 	bic.w	r0, r0, #7
 800d760:	1ac3      	subs	r3, r0, r3
 800d762:	d0d3      	beq.n	800d70c <_malloc_r+0x20>
 800d764:	425a      	negs	r2, r3
 800d766:	50e2      	str	r2, [r4, r3]
 800d768:	e7d0      	b.n	800d70c <_malloc_r+0x20>
 800d76a:	428c      	cmp	r4, r1
 800d76c:	684b      	ldr	r3, [r1, #4]
 800d76e:	bf16      	itet	ne
 800d770:	6063      	strne	r3, [r4, #4]
 800d772:	6013      	streq	r3, [r2, #0]
 800d774:	460c      	movne	r4, r1
 800d776:	e7eb      	b.n	800d750 <_malloc_r+0x64>
 800d778:	460c      	mov	r4, r1
 800d77a:	6849      	ldr	r1, [r1, #4]
 800d77c:	e7cc      	b.n	800d718 <_malloc_r+0x2c>
 800d77e:	1cc4      	adds	r4, r0, #3
 800d780:	f024 0403 	bic.w	r4, r4, #3
 800d784:	42a0      	cmp	r0, r4
 800d786:	d005      	beq.n	800d794 <_malloc_r+0xa8>
 800d788:	1a21      	subs	r1, r4, r0
 800d78a:	4630      	mov	r0, r6
 800d78c:	f000 f95a 	bl	800da44 <_sbrk_r>
 800d790:	3001      	adds	r0, #1
 800d792:	d0cf      	beq.n	800d734 <_malloc_r+0x48>
 800d794:	6025      	str	r5, [r4, #0]
 800d796:	e7db      	b.n	800d750 <_malloc_r+0x64>
 800d798:	20000204 	.word	0x20000204
 800d79c:	20000208 	.word	0x20000208

0800d7a0 <__ssputs_r>:
 800d7a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d7a4:	688e      	ldr	r6, [r1, #8]
 800d7a6:	429e      	cmp	r6, r3
 800d7a8:	4682      	mov	sl, r0
 800d7aa:	460c      	mov	r4, r1
 800d7ac:	4690      	mov	r8, r2
 800d7ae:	4699      	mov	r9, r3
 800d7b0:	d837      	bhi.n	800d822 <__ssputs_r+0x82>
 800d7b2:	898a      	ldrh	r2, [r1, #12]
 800d7b4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d7b8:	d031      	beq.n	800d81e <__ssputs_r+0x7e>
 800d7ba:	6825      	ldr	r5, [r4, #0]
 800d7bc:	6909      	ldr	r1, [r1, #16]
 800d7be:	1a6f      	subs	r7, r5, r1
 800d7c0:	6965      	ldr	r5, [r4, #20]
 800d7c2:	2302      	movs	r3, #2
 800d7c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d7c8:	fb95 f5f3 	sdiv	r5, r5, r3
 800d7cc:	f109 0301 	add.w	r3, r9, #1
 800d7d0:	443b      	add	r3, r7
 800d7d2:	429d      	cmp	r5, r3
 800d7d4:	bf38      	it	cc
 800d7d6:	461d      	movcc	r5, r3
 800d7d8:	0553      	lsls	r3, r2, #21
 800d7da:	d530      	bpl.n	800d83e <__ssputs_r+0x9e>
 800d7dc:	4629      	mov	r1, r5
 800d7de:	f7ff ff85 	bl	800d6ec <_malloc_r>
 800d7e2:	4606      	mov	r6, r0
 800d7e4:	b950      	cbnz	r0, 800d7fc <__ssputs_r+0x5c>
 800d7e6:	230c      	movs	r3, #12
 800d7e8:	f8ca 3000 	str.w	r3, [sl]
 800d7ec:	89a3      	ldrh	r3, [r4, #12]
 800d7ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d7f2:	81a3      	strh	r3, [r4, #12]
 800d7f4:	f04f 30ff 	mov.w	r0, #4294967295
 800d7f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7fc:	463a      	mov	r2, r7
 800d7fe:	6921      	ldr	r1, [r4, #16]
 800d800:	f7ff fb0e 	bl	800ce20 <memcpy>
 800d804:	89a3      	ldrh	r3, [r4, #12]
 800d806:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d80a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d80e:	81a3      	strh	r3, [r4, #12]
 800d810:	6126      	str	r6, [r4, #16]
 800d812:	6165      	str	r5, [r4, #20]
 800d814:	443e      	add	r6, r7
 800d816:	1bed      	subs	r5, r5, r7
 800d818:	6026      	str	r6, [r4, #0]
 800d81a:	60a5      	str	r5, [r4, #8]
 800d81c:	464e      	mov	r6, r9
 800d81e:	454e      	cmp	r6, r9
 800d820:	d900      	bls.n	800d824 <__ssputs_r+0x84>
 800d822:	464e      	mov	r6, r9
 800d824:	4632      	mov	r2, r6
 800d826:	4641      	mov	r1, r8
 800d828:	6820      	ldr	r0, [r4, #0]
 800d82a:	f000 f93a 	bl	800daa2 <memmove>
 800d82e:	68a3      	ldr	r3, [r4, #8]
 800d830:	1b9b      	subs	r3, r3, r6
 800d832:	60a3      	str	r3, [r4, #8]
 800d834:	6823      	ldr	r3, [r4, #0]
 800d836:	441e      	add	r6, r3
 800d838:	6026      	str	r6, [r4, #0]
 800d83a:	2000      	movs	r0, #0
 800d83c:	e7dc      	b.n	800d7f8 <__ssputs_r+0x58>
 800d83e:	462a      	mov	r2, r5
 800d840:	f000 f94a 	bl	800dad8 <_realloc_r>
 800d844:	4606      	mov	r6, r0
 800d846:	2800      	cmp	r0, #0
 800d848:	d1e2      	bne.n	800d810 <__ssputs_r+0x70>
 800d84a:	6921      	ldr	r1, [r4, #16]
 800d84c:	4650      	mov	r0, sl
 800d84e:	f7ff feff 	bl	800d650 <_free_r>
 800d852:	e7c8      	b.n	800d7e6 <__ssputs_r+0x46>

0800d854 <_svfiprintf_r>:
 800d854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d858:	461d      	mov	r5, r3
 800d85a:	898b      	ldrh	r3, [r1, #12]
 800d85c:	061f      	lsls	r7, r3, #24
 800d85e:	b09d      	sub	sp, #116	; 0x74
 800d860:	4680      	mov	r8, r0
 800d862:	460c      	mov	r4, r1
 800d864:	4616      	mov	r6, r2
 800d866:	d50f      	bpl.n	800d888 <_svfiprintf_r+0x34>
 800d868:	690b      	ldr	r3, [r1, #16]
 800d86a:	b96b      	cbnz	r3, 800d888 <_svfiprintf_r+0x34>
 800d86c:	2140      	movs	r1, #64	; 0x40
 800d86e:	f7ff ff3d 	bl	800d6ec <_malloc_r>
 800d872:	6020      	str	r0, [r4, #0]
 800d874:	6120      	str	r0, [r4, #16]
 800d876:	b928      	cbnz	r0, 800d884 <_svfiprintf_r+0x30>
 800d878:	230c      	movs	r3, #12
 800d87a:	f8c8 3000 	str.w	r3, [r8]
 800d87e:	f04f 30ff 	mov.w	r0, #4294967295
 800d882:	e0c8      	b.n	800da16 <_svfiprintf_r+0x1c2>
 800d884:	2340      	movs	r3, #64	; 0x40
 800d886:	6163      	str	r3, [r4, #20]
 800d888:	2300      	movs	r3, #0
 800d88a:	9309      	str	r3, [sp, #36]	; 0x24
 800d88c:	2320      	movs	r3, #32
 800d88e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d892:	2330      	movs	r3, #48	; 0x30
 800d894:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d898:	9503      	str	r5, [sp, #12]
 800d89a:	f04f 0b01 	mov.w	fp, #1
 800d89e:	4637      	mov	r7, r6
 800d8a0:	463d      	mov	r5, r7
 800d8a2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d8a6:	b10b      	cbz	r3, 800d8ac <_svfiprintf_r+0x58>
 800d8a8:	2b25      	cmp	r3, #37	; 0x25
 800d8aa:	d13e      	bne.n	800d92a <_svfiprintf_r+0xd6>
 800d8ac:	ebb7 0a06 	subs.w	sl, r7, r6
 800d8b0:	d00b      	beq.n	800d8ca <_svfiprintf_r+0x76>
 800d8b2:	4653      	mov	r3, sl
 800d8b4:	4632      	mov	r2, r6
 800d8b6:	4621      	mov	r1, r4
 800d8b8:	4640      	mov	r0, r8
 800d8ba:	f7ff ff71 	bl	800d7a0 <__ssputs_r>
 800d8be:	3001      	adds	r0, #1
 800d8c0:	f000 80a4 	beq.w	800da0c <_svfiprintf_r+0x1b8>
 800d8c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d8c6:	4453      	add	r3, sl
 800d8c8:	9309      	str	r3, [sp, #36]	; 0x24
 800d8ca:	783b      	ldrb	r3, [r7, #0]
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	f000 809d 	beq.w	800da0c <_svfiprintf_r+0x1b8>
 800d8d2:	2300      	movs	r3, #0
 800d8d4:	f04f 32ff 	mov.w	r2, #4294967295
 800d8d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d8dc:	9304      	str	r3, [sp, #16]
 800d8de:	9307      	str	r3, [sp, #28]
 800d8e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d8e4:	931a      	str	r3, [sp, #104]	; 0x68
 800d8e6:	462f      	mov	r7, r5
 800d8e8:	2205      	movs	r2, #5
 800d8ea:	f817 1b01 	ldrb.w	r1, [r7], #1
 800d8ee:	4850      	ldr	r0, [pc, #320]	; (800da30 <_svfiprintf_r+0x1dc>)
 800d8f0:	f7f2 fc9e 	bl	8000230 <memchr>
 800d8f4:	9b04      	ldr	r3, [sp, #16]
 800d8f6:	b9d0      	cbnz	r0, 800d92e <_svfiprintf_r+0xda>
 800d8f8:	06d9      	lsls	r1, r3, #27
 800d8fa:	bf44      	itt	mi
 800d8fc:	2220      	movmi	r2, #32
 800d8fe:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d902:	071a      	lsls	r2, r3, #28
 800d904:	bf44      	itt	mi
 800d906:	222b      	movmi	r2, #43	; 0x2b
 800d908:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d90c:	782a      	ldrb	r2, [r5, #0]
 800d90e:	2a2a      	cmp	r2, #42	; 0x2a
 800d910:	d015      	beq.n	800d93e <_svfiprintf_r+0xea>
 800d912:	9a07      	ldr	r2, [sp, #28]
 800d914:	462f      	mov	r7, r5
 800d916:	2000      	movs	r0, #0
 800d918:	250a      	movs	r5, #10
 800d91a:	4639      	mov	r1, r7
 800d91c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d920:	3b30      	subs	r3, #48	; 0x30
 800d922:	2b09      	cmp	r3, #9
 800d924:	d94d      	bls.n	800d9c2 <_svfiprintf_r+0x16e>
 800d926:	b1b8      	cbz	r0, 800d958 <_svfiprintf_r+0x104>
 800d928:	e00f      	b.n	800d94a <_svfiprintf_r+0xf6>
 800d92a:	462f      	mov	r7, r5
 800d92c:	e7b8      	b.n	800d8a0 <_svfiprintf_r+0x4c>
 800d92e:	4a40      	ldr	r2, [pc, #256]	; (800da30 <_svfiprintf_r+0x1dc>)
 800d930:	1a80      	subs	r0, r0, r2
 800d932:	fa0b f000 	lsl.w	r0, fp, r0
 800d936:	4318      	orrs	r0, r3
 800d938:	9004      	str	r0, [sp, #16]
 800d93a:	463d      	mov	r5, r7
 800d93c:	e7d3      	b.n	800d8e6 <_svfiprintf_r+0x92>
 800d93e:	9a03      	ldr	r2, [sp, #12]
 800d940:	1d11      	adds	r1, r2, #4
 800d942:	6812      	ldr	r2, [r2, #0]
 800d944:	9103      	str	r1, [sp, #12]
 800d946:	2a00      	cmp	r2, #0
 800d948:	db01      	blt.n	800d94e <_svfiprintf_r+0xfa>
 800d94a:	9207      	str	r2, [sp, #28]
 800d94c:	e004      	b.n	800d958 <_svfiprintf_r+0x104>
 800d94e:	4252      	negs	r2, r2
 800d950:	f043 0302 	orr.w	r3, r3, #2
 800d954:	9207      	str	r2, [sp, #28]
 800d956:	9304      	str	r3, [sp, #16]
 800d958:	783b      	ldrb	r3, [r7, #0]
 800d95a:	2b2e      	cmp	r3, #46	; 0x2e
 800d95c:	d10c      	bne.n	800d978 <_svfiprintf_r+0x124>
 800d95e:	787b      	ldrb	r3, [r7, #1]
 800d960:	2b2a      	cmp	r3, #42	; 0x2a
 800d962:	d133      	bne.n	800d9cc <_svfiprintf_r+0x178>
 800d964:	9b03      	ldr	r3, [sp, #12]
 800d966:	1d1a      	adds	r2, r3, #4
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	9203      	str	r2, [sp, #12]
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	bfb8      	it	lt
 800d970:	f04f 33ff 	movlt.w	r3, #4294967295
 800d974:	3702      	adds	r7, #2
 800d976:	9305      	str	r3, [sp, #20]
 800d978:	4d2e      	ldr	r5, [pc, #184]	; (800da34 <_svfiprintf_r+0x1e0>)
 800d97a:	7839      	ldrb	r1, [r7, #0]
 800d97c:	2203      	movs	r2, #3
 800d97e:	4628      	mov	r0, r5
 800d980:	f7f2 fc56 	bl	8000230 <memchr>
 800d984:	b138      	cbz	r0, 800d996 <_svfiprintf_r+0x142>
 800d986:	2340      	movs	r3, #64	; 0x40
 800d988:	1b40      	subs	r0, r0, r5
 800d98a:	fa03 f000 	lsl.w	r0, r3, r0
 800d98e:	9b04      	ldr	r3, [sp, #16]
 800d990:	4303      	orrs	r3, r0
 800d992:	3701      	adds	r7, #1
 800d994:	9304      	str	r3, [sp, #16]
 800d996:	7839      	ldrb	r1, [r7, #0]
 800d998:	4827      	ldr	r0, [pc, #156]	; (800da38 <_svfiprintf_r+0x1e4>)
 800d99a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d99e:	2206      	movs	r2, #6
 800d9a0:	1c7e      	adds	r6, r7, #1
 800d9a2:	f7f2 fc45 	bl	8000230 <memchr>
 800d9a6:	2800      	cmp	r0, #0
 800d9a8:	d038      	beq.n	800da1c <_svfiprintf_r+0x1c8>
 800d9aa:	4b24      	ldr	r3, [pc, #144]	; (800da3c <_svfiprintf_r+0x1e8>)
 800d9ac:	bb13      	cbnz	r3, 800d9f4 <_svfiprintf_r+0x1a0>
 800d9ae:	9b03      	ldr	r3, [sp, #12]
 800d9b0:	3307      	adds	r3, #7
 800d9b2:	f023 0307 	bic.w	r3, r3, #7
 800d9b6:	3308      	adds	r3, #8
 800d9b8:	9303      	str	r3, [sp, #12]
 800d9ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d9bc:	444b      	add	r3, r9
 800d9be:	9309      	str	r3, [sp, #36]	; 0x24
 800d9c0:	e76d      	b.n	800d89e <_svfiprintf_r+0x4a>
 800d9c2:	fb05 3202 	mla	r2, r5, r2, r3
 800d9c6:	2001      	movs	r0, #1
 800d9c8:	460f      	mov	r7, r1
 800d9ca:	e7a6      	b.n	800d91a <_svfiprintf_r+0xc6>
 800d9cc:	2300      	movs	r3, #0
 800d9ce:	3701      	adds	r7, #1
 800d9d0:	9305      	str	r3, [sp, #20]
 800d9d2:	4619      	mov	r1, r3
 800d9d4:	250a      	movs	r5, #10
 800d9d6:	4638      	mov	r0, r7
 800d9d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d9dc:	3a30      	subs	r2, #48	; 0x30
 800d9de:	2a09      	cmp	r2, #9
 800d9e0:	d903      	bls.n	800d9ea <_svfiprintf_r+0x196>
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d0c8      	beq.n	800d978 <_svfiprintf_r+0x124>
 800d9e6:	9105      	str	r1, [sp, #20]
 800d9e8:	e7c6      	b.n	800d978 <_svfiprintf_r+0x124>
 800d9ea:	fb05 2101 	mla	r1, r5, r1, r2
 800d9ee:	2301      	movs	r3, #1
 800d9f0:	4607      	mov	r7, r0
 800d9f2:	e7f0      	b.n	800d9d6 <_svfiprintf_r+0x182>
 800d9f4:	ab03      	add	r3, sp, #12
 800d9f6:	9300      	str	r3, [sp, #0]
 800d9f8:	4622      	mov	r2, r4
 800d9fa:	4b11      	ldr	r3, [pc, #68]	; (800da40 <_svfiprintf_r+0x1ec>)
 800d9fc:	a904      	add	r1, sp, #16
 800d9fe:	4640      	mov	r0, r8
 800da00:	f7fc fbf4 	bl	800a1ec <_printf_float>
 800da04:	f1b0 3fff 	cmp.w	r0, #4294967295
 800da08:	4681      	mov	r9, r0
 800da0a:	d1d6      	bne.n	800d9ba <_svfiprintf_r+0x166>
 800da0c:	89a3      	ldrh	r3, [r4, #12]
 800da0e:	065b      	lsls	r3, r3, #25
 800da10:	f53f af35 	bmi.w	800d87e <_svfiprintf_r+0x2a>
 800da14:	9809      	ldr	r0, [sp, #36]	; 0x24
 800da16:	b01d      	add	sp, #116	; 0x74
 800da18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da1c:	ab03      	add	r3, sp, #12
 800da1e:	9300      	str	r3, [sp, #0]
 800da20:	4622      	mov	r2, r4
 800da22:	4b07      	ldr	r3, [pc, #28]	; (800da40 <_svfiprintf_r+0x1ec>)
 800da24:	a904      	add	r1, sp, #16
 800da26:	4640      	mov	r0, r8
 800da28:	f7fc fe96 	bl	800a758 <_printf_i>
 800da2c:	e7ea      	b.n	800da04 <_svfiprintf_r+0x1b0>
 800da2e:	bf00      	nop
 800da30:	0800e8dc 	.word	0x0800e8dc
 800da34:	0800e8e2 	.word	0x0800e8e2
 800da38:	0800e8e6 	.word	0x0800e8e6
 800da3c:	0800a1ed 	.word	0x0800a1ed
 800da40:	0800d7a1 	.word	0x0800d7a1

0800da44 <_sbrk_r>:
 800da44:	b538      	push	{r3, r4, r5, lr}
 800da46:	4c06      	ldr	r4, [pc, #24]	; (800da60 <_sbrk_r+0x1c>)
 800da48:	2300      	movs	r3, #0
 800da4a:	4605      	mov	r5, r0
 800da4c:	4608      	mov	r0, r1
 800da4e:	6023      	str	r3, [r4, #0]
 800da50:	f7f4 fcec 	bl	800242c <_sbrk>
 800da54:	1c43      	adds	r3, r0, #1
 800da56:	d102      	bne.n	800da5e <_sbrk_r+0x1a>
 800da58:	6823      	ldr	r3, [r4, #0]
 800da5a:	b103      	cbz	r3, 800da5e <_sbrk_r+0x1a>
 800da5c:	602b      	str	r3, [r5, #0]
 800da5e:	bd38      	pop	{r3, r4, r5, pc}
 800da60:	20000600 	.word	0x20000600

0800da64 <strncmp>:
 800da64:	b510      	push	{r4, lr}
 800da66:	b16a      	cbz	r2, 800da84 <strncmp+0x20>
 800da68:	3901      	subs	r1, #1
 800da6a:	1884      	adds	r4, r0, r2
 800da6c:	f810 3b01 	ldrb.w	r3, [r0], #1
 800da70:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800da74:	4293      	cmp	r3, r2
 800da76:	d103      	bne.n	800da80 <strncmp+0x1c>
 800da78:	42a0      	cmp	r0, r4
 800da7a:	d001      	beq.n	800da80 <strncmp+0x1c>
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d1f5      	bne.n	800da6c <strncmp+0x8>
 800da80:	1a98      	subs	r0, r3, r2
 800da82:	bd10      	pop	{r4, pc}
 800da84:	4610      	mov	r0, r2
 800da86:	e7fc      	b.n	800da82 <strncmp+0x1e>

0800da88 <__ascii_wctomb>:
 800da88:	b149      	cbz	r1, 800da9e <__ascii_wctomb+0x16>
 800da8a:	2aff      	cmp	r2, #255	; 0xff
 800da8c:	bf85      	ittet	hi
 800da8e:	238a      	movhi	r3, #138	; 0x8a
 800da90:	6003      	strhi	r3, [r0, #0]
 800da92:	700a      	strbls	r2, [r1, #0]
 800da94:	f04f 30ff 	movhi.w	r0, #4294967295
 800da98:	bf98      	it	ls
 800da9a:	2001      	movls	r0, #1
 800da9c:	4770      	bx	lr
 800da9e:	4608      	mov	r0, r1
 800daa0:	4770      	bx	lr

0800daa2 <memmove>:
 800daa2:	4288      	cmp	r0, r1
 800daa4:	b510      	push	{r4, lr}
 800daa6:	eb01 0302 	add.w	r3, r1, r2
 800daaa:	d807      	bhi.n	800dabc <memmove+0x1a>
 800daac:	1e42      	subs	r2, r0, #1
 800daae:	4299      	cmp	r1, r3
 800dab0:	d00a      	beq.n	800dac8 <memmove+0x26>
 800dab2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dab6:	f802 4f01 	strb.w	r4, [r2, #1]!
 800daba:	e7f8      	b.n	800daae <memmove+0xc>
 800dabc:	4283      	cmp	r3, r0
 800dabe:	d9f5      	bls.n	800daac <memmove+0xa>
 800dac0:	1881      	adds	r1, r0, r2
 800dac2:	1ad2      	subs	r2, r2, r3
 800dac4:	42d3      	cmn	r3, r2
 800dac6:	d100      	bne.n	800daca <memmove+0x28>
 800dac8:	bd10      	pop	{r4, pc}
 800daca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dace:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800dad2:	e7f7      	b.n	800dac4 <memmove+0x22>

0800dad4 <__malloc_lock>:
 800dad4:	4770      	bx	lr

0800dad6 <__malloc_unlock>:
 800dad6:	4770      	bx	lr

0800dad8 <_realloc_r>:
 800dad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dada:	4607      	mov	r7, r0
 800dadc:	4614      	mov	r4, r2
 800dade:	460e      	mov	r6, r1
 800dae0:	b921      	cbnz	r1, 800daec <_realloc_r+0x14>
 800dae2:	4611      	mov	r1, r2
 800dae4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800dae8:	f7ff be00 	b.w	800d6ec <_malloc_r>
 800daec:	b922      	cbnz	r2, 800daf8 <_realloc_r+0x20>
 800daee:	f7ff fdaf 	bl	800d650 <_free_r>
 800daf2:	4625      	mov	r5, r4
 800daf4:	4628      	mov	r0, r5
 800daf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800daf8:	f000 f814 	bl	800db24 <_malloc_usable_size_r>
 800dafc:	42a0      	cmp	r0, r4
 800dafe:	d20f      	bcs.n	800db20 <_realloc_r+0x48>
 800db00:	4621      	mov	r1, r4
 800db02:	4638      	mov	r0, r7
 800db04:	f7ff fdf2 	bl	800d6ec <_malloc_r>
 800db08:	4605      	mov	r5, r0
 800db0a:	2800      	cmp	r0, #0
 800db0c:	d0f2      	beq.n	800daf4 <_realloc_r+0x1c>
 800db0e:	4631      	mov	r1, r6
 800db10:	4622      	mov	r2, r4
 800db12:	f7ff f985 	bl	800ce20 <memcpy>
 800db16:	4631      	mov	r1, r6
 800db18:	4638      	mov	r0, r7
 800db1a:	f7ff fd99 	bl	800d650 <_free_r>
 800db1e:	e7e9      	b.n	800daf4 <_realloc_r+0x1c>
 800db20:	4635      	mov	r5, r6
 800db22:	e7e7      	b.n	800daf4 <_realloc_r+0x1c>

0800db24 <_malloc_usable_size_r>:
 800db24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800db28:	1f18      	subs	r0, r3, #4
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	bfbc      	itt	lt
 800db2e:	580b      	ldrlt	r3, [r1, r0]
 800db30:	18c0      	addlt	r0, r0, r3
 800db32:	4770      	bx	lr

0800db34 <atan2f>:
 800db34:	f000 b850 	b.w	800dbd8 <__ieee754_atan2f>

0800db38 <sqrtf>:
 800db38:	b510      	push	{r4, lr}
 800db3a:	ed2d 8b02 	vpush	{d8}
 800db3e:	b08a      	sub	sp, #40	; 0x28
 800db40:	eeb0 8a40 	vmov.f32	s16, s0
 800db44:	f000 f8f6 	bl	800dd34 <__ieee754_sqrtf>
 800db48:	4b21      	ldr	r3, [pc, #132]	; (800dbd0 <sqrtf+0x98>)
 800db4a:	f993 4000 	ldrsb.w	r4, [r3]
 800db4e:	1c63      	adds	r3, r4, #1
 800db50:	d02c      	beq.n	800dbac <sqrtf+0x74>
 800db52:	eeb4 8a48 	vcmp.f32	s16, s16
 800db56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db5a:	d627      	bvs.n	800dbac <sqrtf+0x74>
 800db5c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800db60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db64:	d522      	bpl.n	800dbac <sqrtf+0x74>
 800db66:	2301      	movs	r3, #1
 800db68:	9300      	str	r3, [sp, #0]
 800db6a:	4b1a      	ldr	r3, [pc, #104]	; (800dbd4 <sqrtf+0x9c>)
 800db6c:	9301      	str	r3, [sp, #4]
 800db6e:	ee18 0a10 	vmov	r0, s16
 800db72:	2300      	movs	r3, #0
 800db74:	9308      	str	r3, [sp, #32]
 800db76:	f7f2 fd0f 	bl	8000598 <__aeabi_f2d>
 800db7a:	2200      	movs	r2, #0
 800db7c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800db80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800db84:	2300      	movs	r3, #0
 800db86:	b9ac      	cbnz	r4, 800dbb4 <sqrtf+0x7c>
 800db88:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800db8c:	4668      	mov	r0, sp
 800db8e:	f000 f8d4 	bl	800dd3a <matherr>
 800db92:	b1b8      	cbz	r0, 800dbc4 <sqrtf+0x8c>
 800db94:	9b08      	ldr	r3, [sp, #32]
 800db96:	b11b      	cbz	r3, 800dba0 <sqrtf+0x68>
 800db98:	f7fc fa62 	bl	800a060 <__errno>
 800db9c:	9b08      	ldr	r3, [sp, #32]
 800db9e:	6003      	str	r3, [r0, #0]
 800dba0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dba4:	f7f3 f848 	bl	8000c38 <__aeabi_d2f>
 800dba8:	ee00 0a10 	vmov	s0, r0
 800dbac:	b00a      	add	sp, #40	; 0x28
 800dbae:	ecbd 8b02 	vpop	{d8}
 800dbb2:	bd10      	pop	{r4, pc}
 800dbb4:	4610      	mov	r0, r2
 800dbb6:	4619      	mov	r1, r3
 800dbb8:	f7f2 fe70 	bl	800089c <__aeabi_ddiv>
 800dbbc:	2c02      	cmp	r4, #2
 800dbbe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800dbc2:	d1e3      	bne.n	800db8c <sqrtf+0x54>
 800dbc4:	f7fc fa4c 	bl	800a060 <__errno>
 800dbc8:	2321      	movs	r3, #33	; 0x21
 800dbca:	6003      	str	r3, [r0, #0]
 800dbcc:	e7e2      	b.n	800db94 <sqrtf+0x5c>
 800dbce:	bf00      	nop
 800dbd0:	200001dc 	.word	0x200001dc
 800dbd4:	0800e9ee 	.word	0x0800e9ee

0800dbd8 <__ieee754_atan2f>:
 800dbd8:	ee10 2a90 	vmov	r2, s1
 800dbdc:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800dbe0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800dbe4:	b510      	push	{r4, lr}
 800dbe6:	eef0 7a40 	vmov.f32	s15, s0
 800dbea:	dc06      	bgt.n	800dbfa <__ieee754_atan2f+0x22>
 800dbec:	ee10 0a10 	vmov	r0, s0
 800dbf0:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800dbf4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800dbf8:	dd04      	ble.n	800dc04 <__ieee754_atan2f+0x2c>
 800dbfa:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800dbfe:	eeb0 0a67 	vmov.f32	s0, s15
 800dc02:	bd10      	pop	{r4, pc}
 800dc04:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800dc08:	d103      	bne.n	800dc12 <__ieee754_atan2f+0x3a>
 800dc0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dc0e:	f000 b897 	b.w	800dd40 <atanf>
 800dc12:	1794      	asrs	r4, r2, #30
 800dc14:	f004 0402 	and.w	r4, r4, #2
 800dc18:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800dc1c:	b943      	cbnz	r3, 800dc30 <__ieee754_atan2f+0x58>
 800dc1e:	2c02      	cmp	r4, #2
 800dc20:	d06e      	beq.n	800dd00 <__ieee754_atan2f+0x128>
 800dc22:	ed9f 7a39 	vldr	s14, [pc, #228]	; 800dd08 <__ieee754_atan2f+0x130>
 800dc26:	2c03      	cmp	r4, #3
 800dc28:	bf08      	it	eq
 800dc2a:	eef0 7a47 	vmoveq.f32	s15, s14
 800dc2e:	e7e6      	b.n	800dbfe <__ieee754_atan2f+0x26>
 800dc30:	b941      	cbnz	r1, 800dc44 <__ieee754_atan2f+0x6c>
 800dc32:	eddf 7a36 	vldr	s15, [pc, #216]	; 800dd0c <__ieee754_atan2f+0x134>
 800dc36:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800dd10 <__ieee754_atan2f+0x138>
 800dc3a:	2800      	cmp	r0, #0
 800dc3c:	bfb8      	it	lt
 800dc3e:	eef0 7a47 	vmovlt.f32	s15, s14
 800dc42:	e7dc      	b.n	800dbfe <__ieee754_atan2f+0x26>
 800dc44:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800dc48:	d122      	bne.n	800dc90 <__ieee754_atan2f+0xb8>
 800dc4a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800dc4e:	d112      	bne.n	800dc76 <__ieee754_atan2f+0x9e>
 800dc50:	2c02      	cmp	r4, #2
 800dc52:	d00a      	beq.n	800dc6a <__ieee754_atan2f+0x92>
 800dc54:	2c03      	cmp	r4, #3
 800dc56:	d00b      	beq.n	800dc70 <__ieee754_atan2f+0x98>
 800dc58:	eddf 7a2e 	vldr	s15, [pc, #184]	; 800dd14 <__ieee754_atan2f+0x13c>
 800dc5c:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 800dd18 <__ieee754_atan2f+0x140>
 800dc60:	2c01      	cmp	r4, #1
 800dc62:	bf18      	it	ne
 800dc64:	eef0 7a47 	vmovne.f32	s15, s14
 800dc68:	e7c9      	b.n	800dbfe <__ieee754_atan2f+0x26>
 800dc6a:	eddf 7a2c 	vldr	s15, [pc, #176]	; 800dd1c <__ieee754_atan2f+0x144>
 800dc6e:	e7c6      	b.n	800dbfe <__ieee754_atan2f+0x26>
 800dc70:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800dd20 <__ieee754_atan2f+0x148>
 800dc74:	e7c3      	b.n	800dbfe <__ieee754_atan2f+0x26>
 800dc76:	2c02      	cmp	r4, #2
 800dc78:	d042      	beq.n	800dd00 <__ieee754_atan2f+0x128>
 800dc7a:	2c03      	cmp	r4, #3
 800dc7c:	d005      	beq.n	800dc8a <__ieee754_atan2f+0xb2>
 800dc7e:	2c01      	cmp	r4, #1
 800dc80:	eddf 7a28 	vldr	s15, [pc, #160]	; 800dd24 <__ieee754_atan2f+0x14c>
 800dc84:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800dd28 <__ieee754_atan2f+0x150>
 800dc88:	e7eb      	b.n	800dc62 <__ieee754_atan2f+0x8a>
 800dc8a:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800dd08 <__ieee754_atan2f+0x130>
 800dc8e:	e7b6      	b.n	800dbfe <__ieee754_atan2f+0x26>
 800dc90:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800dc94:	d0cd      	beq.n	800dc32 <__ieee754_atan2f+0x5a>
 800dc96:	1a5b      	subs	r3, r3, r1
 800dc98:	15db      	asrs	r3, r3, #23
 800dc9a:	2b3c      	cmp	r3, #60	; 0x3c
 800dc9c:	dc1a      	bgt.n	800dcd4 <__ieee754_atan2f+0xfc>
 800dc9e:	2a00      	cmp	r2, #0
 800dca0:	da01      	bge.n	800dca6 <__ieee754_atan2f+0xce>
 800dca2:	333c      	adds	r3, #60	; 0x3c
 800dca4:	db19      	blt.n	800dcda <__ieee754_atan2f+0x102>
 800dca6:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800dcaa:	f000 f91d 	bl	800dee8 <fabsf>
 800dcae:	f000 f847 	bl	800dd40 <atanf>
 800dcb2:	eef0 7a40 	vmov.f32	s15, s0
 800dcb6:	2c01      	cmp	r4, #1
 800dcb8:	d012      	beq.n	800dce0 <__ieee754_atan2f+0x108>
 800dcba:	2c02      	cmp	r4, #2
 800dcbc:	d017      	beq.n	800dcee <__ieee754_atan2f+0x116>
 800dcbe:	2c00      	cmp	r4, #0
 800dcc0:	d09d      	beq.n	800dbfe <__ieee754_atan2f+0x26>
 800dcc2:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800dd2c <__ieee754_atan2f+0x154>
 800dcc6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800dcca:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800dd30 <__ieee754_atan2f+0x158>
 800dcce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800dcd2:	e794      	b.n	800dbfe <__ieee754_atan2f+0x26>
 800dcd4:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800dd0c <__ieee754_atan2f+0x134>
 800dcd8:	e7ed      	b.n	800dcb6 <__ieee754_atan2f+0xde>
 800dcda:	eddf 7a13 	vldr	s15, [pc, #76]	; 800dd28 <__ieee754_atan2f+0x150>
 800dcde:	e7ea      	b.n	800dcb6 <__ieee754_atan2f+0xde>
 800dce0:	ee17 3a90 	vmov	r3, s15
 800dce4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800dce8:	ee07 3a90 	vmov	s15, r3
 800dcec:	e787      	b.n	800dbfe <__ieee754_atan2f+0x26>
 800dcee:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800dd2c <__ieee754_atan2f+0x154>
 800dcf2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800dcf6:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800dd30 <__ieee754_atan2f+0x158>
 800dcfa:	ee77 7a67 	vsub.f32	s15, s14, s15
 800dcfe:	e77e      	b.n	800dbfe <__ieee754_atan2f+0x26>
 800dd00:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800dd30 <__ieee754_atan2f+0x158>
 800dd04:	e77b      	b.n	800dbfe <__ieee754_atan2f+0x26>
 800dd06:	bf00      	nop
 800dd08:	c0490fdb 	.word	0xc0490fdb
 800dd0c:	3fc90fdb 	.word	0x3fc90fdb
 800dd10:	bfc90fdb 	.word	0xbfc90fdb
 800dd14:	bf490fdb 	.word	0xbf490fdb
 800dd18:	3f490fdb 	.word	0x3f490fdb
 800dd1c:	4016cbe4 	.word	0x4016cbe4
 800dd20:	c016cbe4 	.word	0xc016cbe4
 800dd24:	80000000 	.word	0x80000000
 800dd28:	00000000 	.word	0x00000000
 800dd2c:	33bbbd2e 	.word	0x33bbbd2e
 800dd30:	40490fdb 	.word	0x40490fdb

0800dd34 <__ieee754_sqrtf>:
 800dd34:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800dd38:	4770      	bx	lr

0800dd3a <matherr>:
 800dd3a:	2000      	movs	r0, #0
 800dd3c:	4770      	bx	lr
	...

0800dd40 <atanf>:
 800dd40:	b538      	push	{r3, r4, r5, lr}
 800dd42:	ee10 5a10 	vmov	r5, s0
 800dd46:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800dd4a:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800dd4e:	eef0 7a40 	vmov.f32	s15, s0
 800dd52:	db10      	blt.n	800dd76 <atanf+0x36>
 800dd54:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800dd58:	dd04      	ble.n	800dd64 <atanf+0x24>
 800dd5a:	ee70 7a00 	vadd.f32	s15, s0, s0
 800dd5e:	eeb0 0a67 	vmov.f32	s0, s15
 800dd62:	bd38      	pop	{r3, r4, r5, pc}
 800dd64:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 800de9c <atanf+0x15c>
 800dd68:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800dea0 <atanf+0x160>
 800dd6c:	2d00      	cmp	r5, #0
 800dd6e:	bfd8      	it	le
 800dd70:	eef0 7a47 	vmovle.f32	s15, s14
 800dd74:	e7f3      	b.n	800dd5e <atanf+0x1e>
 800dd76:	4b4b      	ldr	r3, [pc, #300]	; (800dea4 <atanf+0x164>)
 800dd78:	429c      	cmp	r4, r3
 800dd7a:	dc10      	bgt.n	800dd9e <atanf+0x5e>
 800dd7c:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800dd80:	da0a      	bge.n	800dd98 <atanf+0x58>
 800dd82:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800dea8 <atanf+0x168>
 800dd86:	ee30 7a07 	vadd.f32	s14, s0, s14
 800dd8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dd8e:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800dd92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd96:	dce2      	bgt.n	800dd5e <atanf+0x1e>
 800dd98:	f04f 33ff 	mov.w	r3, #4294967295
 800dd9c:	e013      	b.n	800ddc6 <atanf+0x86>
 800dd9e:	f000 f8a3 	bl	800dee8 <fabsf>
 800dda2:	4b42      	ldr	r3, [pc, #264]	; (800deac <atanf+0x16c>)
 800dda4:	429c      	cmp	r4, r3
 800dda6:	dc4f      	bgt.n	800de48 <atanf+0x108>
 800dda8:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800ddac:	429c      	cmp	r4, r3
 800ddae:	dc41      	bgt.n	800de34 <atanf+0xf4>
 800ddb0:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800ddb4:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800ddb8:	eea0 7a27 	vfma.f32	s14, s0, s15
 800ddbc:	2300      	movs	r3, #0
 800ddbe:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ddc2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800ddc6:	1c5a      	adds	r2, r3, #1
 800ddc8:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800ddcc:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800deb0 <atanf+0x170>
 800ddd0:	eddf 5a38 	vldr	s11, [pc, #224]	; 800deb4 <atanf+0x174>
 800ddd4:	ed9f 5a38 	vldr	s10, [pc, #224]	; 800deb8 <atanf+0x178>
 800ddd8:	ee66 6a06 	vmul.f32	s13, s12, s12
 800dddc:	eee6 5a87 	vfma.f32	s11, s13, s14
 800dde0:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800debc <atanf+0x17c>
 800dde4:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800dde8:	eddf 5a35 	vldr	s11, [pc, #212]	; 800dec0 <atanf+0x180>
 800ddec:	eee7 5a26 	vfma.f32	s11, s14, s13
 800ddf0:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800dec4 <atanf+0x184>
 800ddf4:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800ddf8:	eddf 5a33 	vldr	s11, [pc, #204]	; 800dec8 <atanf+0x188>
 800ddfc:	eee7 5a26 	vfma.f32	s11, s14, s13
 800de00:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800decc <atanf+0x18c>
 800de04:	eea6 5a87 	vfma.f32	s10, s13, s14
 800de08:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800ded0 <atanf+0x190>
 800de0c:	eea5 7a26 	vfma.f32	s14, s10, s13
 800de10:	ed9f 5a30 	vldr	s10, [pc, #192]	; 800ded4 <atanf+0x194>
 800de14:	eea7 5a26 	vfma.f32	s10, s14, s13
 800de18:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800ded8 <atanf+0x198>
 800de1c:	eea5 7a26 	vfma.f32	s14, s10, s13
 800de20:	ee27 7a26 	vmul.f32	s14, s14, s13
 800de24:	eea5 7a86 	vfma.f32	s14, s11, s12
 800de28:	ee27 7a27 	vmul.f32	s14, s14, s15
 800de2c:	d121      	bne.n	800de72 <atanf+0x132>
 800de2e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800de32:	e794      	b.n	800dd5e <atanf+0x1e>
 800de34:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800de38:	ee30 7a67 	vsub.f32	s14, s0, s15
 800de3c:	ee30 0a27 	vadd.f32	s0, s0, s15
 800de40:	2301      	movs	r3, #1
 800de42:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800de46:	e7be      	b.n	800ddc6 <atanf+0x86>
 800de48:	4b24      	ldr	r3, [pc, #144]	; (800dedc <atanf+0x19c>)
 800de4a:	429c      	cmp	r4, r3
 800de4c:	dc0b      	bgt.n	800de66 <atanf+0x126>
 800de4e:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800de52:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800de56:	eea0 7a27 	vfma.f32	s14, s0, s15
 800de5a:	2302      	movs	r3, #2
 800de5c:	ee70 6a67 	vsub.f32	s13, s0, s15
 800de60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800de64:	e7af      	b.n	800ddc6 <atanf+0x86>
 800de66:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800de6a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800de6e:	2303      	movs	r3, #3
 800de70:	e7a9      	b.n	800ddc6 <atanf+0x86>
 800de72:	4a1b      	ldr	r2, [pc, #108]	; (800dee0 <atanf+0x1a0>)
 800de74:	491b      	ldr	r1, [pc, #108]	; (800dee4 <atanf+0x1a4>)
 800de76:	009b      	lsls	r3, r3, #2
 800de78:	441a      	add	r2, r3
 800de7a:	440b      	add	r3, r1
 800de7c:	edd3 6a00 	vldr	s13, [r3]
 800de80:	ee37 7a66 	vsub.f32	s14, s14, s13
 800de84:	2d00      	cmp	r5, #0
 800de86:	ee77 7a67 	vsub.f32	s15, s14, s15
 800de8a:	ed92 7a00 	vldr	s14, [r2]
 800de8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800de92:	bfb8      	it	lt
 800de94:	eef1 7a67 	vneglt.f32	s15, s15
 800de98:	e761      	b.n	800dd5e <atanf+0x1e>
 800de9a:	bf00      	nop
 800de9c:	bfc90fdb 	.word	0xbfc90fdb
 800dea0:	3fc90fdb 	.word	0x3fc90fdb
 800dea4:	3edfffff 	.word	0x3edfffff
 800dea8:	7149f2ca 	.word	0x7149f2ca
 800deac:	3f97ffff 	.word	0x3f97ffff
 800deb0:	3c8569d7 	.word	0x3c8569d7
 800deb4:	3d4bda59 	.word	0x3d4bda59
 800deb8:	bd6ef16b 	.word	0xbd6ef16b
 800debc:	3d886b35 	.word	0x3d886b35
 800dec0:	3dba2e6e 	.word	0x3dba2e6e
 800dec4:	3e124925 	.word	0x3e124925
 800dec8:	3eaaaaab 	.word	0x3eaaaaab
 800decc:	bd15a221 	.word	0xbd15a221
 800ded0:	bd9d8795 	.word	0xbd9d8795
 800ded4:	bde38e38 	.word	0xbde38e38
 800ded8:	be4ccccd 	.word	0xbe4ccccd
 800dedc:	401bffff 	.word	0x401bffff
 800dee0:	0800e9f4 	.word	0x0800e9f4
 800dee4:	0800ea04 	.word	0x0800ea04

0800dee8 <fabsf>:
 800dee8:	ee10 3a10 	vmov	r3, s0
 800deec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800def0:	ee00 3a10 	vmov	s0, r3
 800def4:	4770      	bx	lr
	...

0800def8 <_init>:
 800def8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800defa:	bf00      	nop
 800defc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800defe:	bc08      	pop	{r3}
 800df00:	469e      	mov	lr, r3
 800df02:	4770      	bx	lr

0800df04 <_fini>:
 800df04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df06:	bf00      	nop
 800df08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800df0a:	bc08      	pop	{r3}
 800df0c:	469e      	mov	lr, r3
 800df0e:	4770      	bx	lr
